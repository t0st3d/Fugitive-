//*--------------------------------------------------------------------------------------------------------------------------------
//*-----------------------[ San Fierro Fugitive Gamemode For SAMP 0.2 ||| Based On Denver's Public Enemy ]--------------------------------
//*----------------[ © 2006-2007  All rights Reserved to Fugitive Team. Fugitive San Fierro : version. 2.0.3b ]----------------------------
//*--------------------[ Creators : Tosted Foxtrota DragonmasterNYC Bl@ster Pixels^ JohnSanders Dodger Sneaky ]------------------------------
#include <a_samp>
//#include <dprop>
#include <core>
#include <float>
#include <time>
#include <file>

static gTeam[MAX_PLAYERS];
static gRadio[MAX_PLAYERS];
#define MAX_STRING 255
#define CHECKPOINT_NONE 0
#define CHECKPOINT_PICKUP 1
#define CHECKPOINT_DROPOFF 2

#define SPEC_TYPE_NONE 0
#define SPEC_TYPE_PLAYER 1
#define SPEC_TYPE_VEHICLE 2

new gSavedpoints[MAX_PLAYERS];

new gSpectateID[MAX_PLAYERS];
new gSpectateType[MAX_PLAYERS];
//Tram shit
#define RC_BANDIT	441
#define RC_BARON    464
#define RC_GOBLIN   501
#define RC_RAIDER   465
#define D_TRAM      449
//end of tram shit
///////////////////
//Johns race shit//
///////////////////
new Text:MainInfo;
new Float:gRaceTmp[MAX_PLAYERS][256];
new gRaceCreator[24];
new gRaceTimeGuy[24];
new gRaceName[256];
new gBestTime;
new gMakeRacePoints[MAX_PLAYERS];
new gRacePoints;
new Float:gRacePoint[256];
new gRacePointHit[MAX_PLAYERS];
new gPlayerLaps[MAX_PLAYERS];
new gRaceTime[MAX_PLAYERS];
new gEndRaceTimer;
new gLaps;
new gRaceStarted;
new gRaceStarting;
new gRaceStartTime;
new gRaceWinner;
new gRaceSecond;
new gRaceFirstThere;
new gRaceCD;
//new gRaceEnd;
//new gNumRaces;
new gRacing[MAX_PLAYERS];
new Text:RaceStartTime;
//new Text:RoundEnding;
new gRaceTimer;
//////////////////////////
//End of johns race shit//
//////////////////////////
new gDerbyStarted=0;
new gDerby[MAX_PLAYERS];
new gDerbyTime;
//new gMapIcon[MAX_PLAYERS][32];
new gVecSpawn[MAX_PLAYERS];
new gGivePermToChangeNick[MAX_PLAYERS];
new Float:Xlol, Float:Ylol, Float:Zlol;
new Float:Xlmao, Float:Ylmao, Float:Zlmao;
#define RACEPOINT_START 5656

#define CHECKPOINT_CARDROP 11
#define CHECKPOINT_HOME 12
#define CHECKPOINT_DM 13
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_GREEN 0x33AA33AA
#define COLOR_RED 0xFF0000AA
#define COLOR_ORANGE 0xFF9900AA
#define COLOR_DGREEN 0x7CFC00AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_WHITE 0xFFFFFFAA
#define COLOR_SMITH 0xFF1493FF // smith color
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_BLUE 0x0000FFFF //Who the hell defined blue as FF FF FF? jackass~_~
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_ALLDEPT 0xAA3333AA
#define COLOR_ESU 0xAA3333AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_ADMIN 0x034E98FF
#define COLOR_MILITARY 0x008040FF
#define COLOR_SANNEWS 0xEA9A06FF
#define COLOR_SFPD 0x0259EAFF//ptc
#define COLOR_SAPD 0x097DFFFF
#define COLOR_LVPD 0xCDC641FF
#define COLOR_LSPD 0x42ADFDFF
#define COLOR_TAXI 0xFDDC1EFF
#define COLOR_DTPD 0x2948DCFF
#define COLOR_FDSA 0xCE0000FF
#define RADIO_POLM 9555
#define RADIO_LSPD 7295//channels
#define RADIO_SFPD 4055
#define RADIO_LVPD 7801
#define RADIO_TAXI 1350
#define RADIO_NGSA 9420
#define RADIO_DTPD 7196
#define RADIO_FDSA 1233
//These arrays by 'Michael', moded by the Fugitive team
new police_veh_array[] = {430, 596, 599, 597, 598, 425,497,523};
new bikes[] = { 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 471, 539};
//new boats[] = { 472, 473, 493, 595, 484, 430, 453, 452, 446, 454};
//new helicopters[] = { 548, 425, 417, 487, 497, 563, 501, 465, 447, 469, 488};
new planes[] = { 592, 577, 511, 512, 593, 520, 553, 464, 476, 519, 460, 513, 539};
//new trailers[] = { 435, 450, 591, 606, 607, 610, 584, 608, 611};
//new trains[] = { 590, 569, 537, 538, 570, 449};
new cars[] = { 445, 602, 416, 485, 568, 429, 433, 499, 424, 536, 496, 504, 422,
609, 498, 401, 575, 518, 402, 541, 482, 431, 438, 457, 527, 483, 524, 415, 542,
589, 437, 532, 480, 596, 599, 597, 598, 578, 486, 507, 562, 585, 427, 419, 587,
490, 528, 533, 544, 407, 565, 455, 530, 526, 466, 604, 492, 474, 588, 434, 502,
503, 494, 579, 545, 411, 546, 559, 508, 571, 400, 403, 517, 410, 551, 500, 418,
572, 423, 414, 516, 582, 467, 443, 470, 404, 514, 603, 600, 413, 426, 436, 547,
489, 441, 594, 564, 515, 479, 534, 432, 505, 442, 440, 475, 543, 605, 495, 567,
428, 405, 535, 458, 580, 439, 561, 409, 560, 550, 506, 601, 574, 566, 549, 420,
459, 576, 525, 531, 408, 583, 451, 558, 552, 540, 491, 412, 478, 421, 529, 555,
 456, 554, 477, 406, 573, 444, 556, 557, 539};

#define TEAM_CYAN 1
#define TEAM_BLUE 2
#define TEAM_GREEN 3
#define TEAM_ORANGE 4
#define TEAM_BALLAS 5
#define TEAM_GROVE 6
#define TEAM_VAGOS 7
#define TEAM_AZTECAS 8
#define TEAM_NANG 9
#define TEAM_RIFA 10
#define TEAM_MAFIA 11
#define TEAM_RMAFIA 12
#define TEAM_TRIADS 13
#define TEAM_BIKERS 14
#define TEAM_SMITH 15
#define TEAM_FBI 16
#define OBJECTIVE_COLOR 0x64000064
#define TEAM_GREEN_COLOR 0xFFFFFFAA
#define TEAM_BLUE_COLOR 0x0259EAFF
#define COLOR_ADD 0x63FF60AA
#define TEAM_CYAN_COLOR 0xAA3333AA
#define TEAM_ORANGE_COLOR 0xFF8300C8
#define TEAM_ORANGE1_COLOR 0xFF830099
#define TEAM_ORANGE2_COLOR 0xFF830088
#define TEAM_ORANGE3_COLOR 0xFF830077
#define TEAM_ORANGE4_COLOR 0xFF830066
#define TEAM_ORANGE5_COLOR 0xFF830055
#define TEAM_ORANGE6_COLOR 0xFF830044
#define TEAM_ORANGE7_COLOR 0xFF830033
#define TEAM_ORANGE8_COLOR 0xFF830022
#define TEAM_ORANGE9_COLOR 0xFF830011
#define TEAM_ORANGE10_COLOR 0xFF830000
#define TEAM_SMITH_COLOR 0xFF1493FF
#define TEAM_BALLAS_COLOR 0xD900D3C8
#define TEAM_BALLAS1_COLOR 0xD900D399
#define TEAM_BALLAS2_COLOR 0xD900D388
#define TEAM_BALLAS3_COLOR 0xD900D377
#define TEAM_BALLAS4_COLOR 0xD900D366
#define TEAM_BALLAS5_COLOR 0xD900D355
#define TEAM_BALLAS6_COLOR 0xD900D344
#define TEAM_BALLAS7_COLOR 0xD900D333
#define TEAM_BALLAS8_COLOR 0xD900D322
#define TEAM_BALLAS9_COLOR 0xD900D311
#define TEAM_BALLAS10_COLOR 0xD900D300
#define TEAM_GROVE_COLOR 0x00D900C8
#define TEAM_GROVE1_COLOR 0x00D90099
#define TEAM_GROVE2_COLOR 0x00D90088
#define TEAM_GROVE3_COLOR 0x00D90077
#define TEAM_GROVE4_COLOR 0x00D90066
#define TEAM_GROVE5_COLOR 0x00D90055
#define TEAM_GROVE6_COLOR 0x00D90044
#define TEAM_GROVE7_COLOR 0x00D90033
#define TEAM_GROVE8_COLOR 0x00D90022
#define TEAM_GROVE9_COLOR 0x00D90011
#define TEAM_GROVE10_COLOR 0x00D90000
#define TEAM_VAGOS_COLOR 0xFFC801C8
#define TEAM_VAGOS1_COLOR 0xFFC80199
#define TEAM_VAGOS2_COLOR 0xFFC80188
#define TEAM_VAGOS3_COLOR 0xFFC80177
#define TEAM_VAGOS4_COLOR 0xFFC80166
#define TEAM_VAGOS5_COLOR 0xFFC80155
#define TEAM_VAGOS6_COLOR 0xFFC80144
#define TEAM_VAGOS7_COLOR 0xFFC80133
#define TEAM_VAGOS8_COLOR 0xFFC80122
#define TEAM_VAGOS9_COLOR 0xFFC80111
#define TEAM_VAGOS10_COLOR 0xFFC80100
#define TEAM_AZTECAS_COLOR 0x01FCFFC8
#define TEAM_AZTECAS1_COLOR 0x01FCFF99
#define TEAM_AZTECAS2_COLOR 0x01FCFF88
#define TEAM_AZTECAS3_COLOR 0x01FCFF77
#define TEAM_AZTECAS4_COLOR 0x01FCFF66
#define TEAM_AZTECAS5_COLOR 0x01FCFF55
#define TEAM_AZTECAS6_COLOR 0x01FCFF44
#define TEAM_AZTECAS7_COLOR 0x01FCFF33
#define TEAM_AZTECAS8_COLOR 0x01FCFF22
#define TEAM_AZTECAS9_COLOR 0x01FCFF11
#define TEAM_AZTECAS10_COLOR 0x01FCFF00

new Elevator;
new NiElevator;
new Gate;
new Agate;
new Menu:elemenu;
new Menu:nielemenu;

#define TEAM_NANG_COLOR 0xBDCB92C8
#define TEAM_NANG1_COLOR 0xBDCB9299
#define TEAM_NANG2_COLOR 0xBDCB9288
#define TEAM_NANG3_COLOR 0xBDCB9277
#define TEAM_NANG4_COLOR 0xBDCB9266
#define TEAM_NANG5_COLOR 0xBDCB9255
#define TEAM_NANG6_COLOR 0xBDCB9244
#define TEAM_NANG7_COLOR 0xBDCB9233
#define TEAM_NANG8_COLOR 0xBDCB9222
#define TEAM_NANG9_COLOR 0xBDCB9211
#define TEAM_NANG10_COLOR 0xBDCB9200
#define TEAM_RIFA_COLOR 0x00A2A4C8
#define TEAM_RIFA1_COLOR 0x00A2A499
#define TEAM_RIFA2_COLOR 0x00A2A488
#define TEAM_RIFA3_COLOR 0x00A2A477
#define TEAM_RIFA4_COLOR 0x00A2A466
#define TEAM_RIFA5_COLOR 0x00A2A455
#define TEAM_RIFA6_COLOR 0x00A2A444
#define TEAM_RIFA7_COLOR 0x00A2A433
#define TEAM_RIFA8_COLOR 0x00A2A422
#define TEAM_RIFA9_COLOR 0x00A2A411
#define TEAM_RIFA10_COLOR 0x00A2A400
#define TEAM_MAFIA_COLOR 0x9A9999C8
#define TEAM_MAFIA1_COLOR 0x9A999999
#define TEAM_MAFIA2_COLOR 0x9A999988
#define TEAM_MAFIA3_COLOR 0x9A999977
#define TEAM_MAFIA4_COLOR 0x9A999966
#define TEAM_MAFIA5_COLOR 0x9A999955
#define TEAM_MAFIA6_COLOR 0x9A999944
#define TEAM_MAFIA7_COLOR 0x9A999933
#define TEAM_MAFIA8_COLOR 0x9A999922
#define TEAM_MAFIA9_COLOR 0x9A999911
#define TEAM_MAFIA10_COLOR 0x9A999900
#define TEAM_RMAFIA_COLOR 0x916600C8
#define TEAM_RMAFIA1_COLOR 0x91660099
#define TEAM_RMAFIA2_COLOR 0x91660088
#define TEAM_RMAFIA3_COLOR 0x91660077
#define TEAM_RMAFIA4_COLOR 0x91660066
#define TEAM_RMAFIA5_COLOR 0x91660055
#define TEAM_RMAFIA6_COLOR 0x91660044
#define TEAM_RMAFIA7_COLOR 0x91660033
#define TEAM_RMAFIA8_COLOR 0x91660022
#define TEAM_RMAFIA9_COLOR 0x91660011
#define TEAM_RMAFIA10_COLOR 0x91660000
#define TEAM_TRIADS_COLOR 0x587B95C8
#define TEAM_TRIADS1_COLOR 0x587B9599
#define TEAM_TRIADS2_COLOR 0x587B9588
#define TEAM_TRIADS3_COLOR 0x587B9577
#define TEAM_TRIADS4_COLOR 0x587B9566
#define TEAM_TRIADS5_COLOR 0x587B9555
#define TEAM_TRIADS6_COLOR 0x587B9544
#define TEAM_TRIADS7_COLOR 0x587B9533
#define TEAM_TRIADS8_COLOR 0x587B9522
#define TEAM_TRIADS9_COLOR 0x587B9511
#define TEAM_TRIADS10_COLOR 0x587B9500
#define TEAM_BIKERS_COLOR 0xA49A00C8
#define TEAM_BIKERS1_COLOR 0xA49A0099
#define TEAM_BIKERS2_COLOR 0xA49A0088
#define TEAM_BIKERS3_COLOR 0xA49A0077
#define TEAM_BIKERS4_COLOR 0xA49A0066
#define TEAM_BIKERS5_COLOR 0xA49A0055
#define TEAM_BIKERS6_COLOR 0xA49A0044
#define TEAM_BIKERS7_COLOR 0xA49A0033
#define TEAM_BIKERS8_COLOR 0xA49A0022
#define TEAM_BIKERS9_COLOR 0xA49A0011
#define TEAM_BIKERS10_COLOR 0xA49A0000
#define TEAM_FBI_COLOR 0x2641FEAA
#define COLOR_INVIS 0xAFAFAF00
#define COLOR_SPEC 0xBFC0C200
#define INACTIVE_PLAYER_ID 255
#define COLOR_NOTICE 0xFFAA43FF
#define ROB_MAX_DISTANCE 			6.0 	//Make sure it is a float. Keep it small to avoid complications while getting the nearest player.
#define ROB_MAX_DISTANCE2   50.0
#define ROB_MIN_WAIT 				20000 	//Time that players have to wait between /rob attempts in miliseconds.
#define ROB_SUCCESS_PERCENTAGE 		60 		//Chances of a player to succeed in a /rob attempt.
#define ROB_SUCCESS_PERCENTAGE2   100
#define ROB_AMOUNT_MIN_PERCENTAGE  	20 		//Min % of a victims money the robber can get if they succeed.
#define ROB_AMOUNT_MIN_PERCENTAGE2   90
#define ROB_AMOUNT_MAX_PERCENTAGE 	 50 		//Max % of a victims money the robber can get if they succeed.
#define ROB_AMOUNT_MAX_PERCENTAGE2   90
#define COLOR_ROB_SUCCESS 0x00CCFFAA
#define COLOR_ROB_FAILURE 0xCCCCFFAA
#define COLOR_ROB_ERROR 0xFF0000AA
#define LATENCY 50

new fugitimer;
new fugitime = 300;
new gSnoop[MAX_PLAYERS];
new gvhichelealarm[MAX_PLAYERS];
new gAAlert[MAX_PLAYERS];
new Text:CNN;
new Text:timetext;
new gCNN;
new aarea;
new gJohnGangZone;
new Menu:Upgrades;
new Menu:ExtraUpgrades;
//new Menu:AmmoUpgrades;
new Menu:WeaponUpgrades;
new Menu:PistolUpgrades;
new Menu:ShotgunUpgrades;
new Menu:SubMachineUpgrades;
new Menu:AssaultUpgrades;
new Menu:RifleUpgrades;
new Menu:HeavyUpgrades;
new Menu:ThrownUpgrades;
new gDelVec[MAX_PLAYERS];
new gPlayerRC[MAX_PLAYERS];
new Float:gPlayerRCArea[MAX_PLAYERS][4];
new gRCveh[MAX_PLAYERS];
new LSPDGate;
new Tollgate3;
new gCuffed[MAX_PLAYERS];
new gFrozen[MAX_PLAYERS];
new pCTicket[MAX_PLAYERS];
new pPTicket[MAX_PLAYERS];
new Stunned[MAX_PLAYERS];
new pingkick[MAX_PLAYERS];

forward AddComponent(vehicleid);
forward AdminLevel(playerid);
forward PingKick();
forward DerbyTime();
forward EndDerby();
//~~~~~~~>Chapter><~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[Forward Ex]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
forward PrintKillStats(playerid,targetid);
forward PrintDeathStats(playerid,targetid);
forward PrintPersonalWeapons(playerid,targetid);
forward SendReportMessage (color, string[]);
forward DollahScoreUpdate();
forward SetPlayerRandomSpawn(playerid);
forward SetPlayerNewMission();
forward CheckpointReset();
forward SetPlayerToTeamColor(playerid);
forward SetupPlayerForClassSelection(playerid);
forward SetPlayerTeamFromClass(playerid,classid);
forward GameModeExitFunc();
forward GameModeInitExitFunc();
forward PrePlayerNewMission();
//forward SetPlayerNewMission(); //why forward it twice?
forward RaceDelay();
forward RaceDelayr();
forward RaceDelayg();
forward OnPlayerDropBriefCase(playerid);
forward RewardCalc(playerid,min,max);
forward Float:GetDistanceBetweenPlayers(p1,p2);
//forward CheckpointReset();
forward SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num);
forward SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi);
forward OpenDoors();
forward SetPlayerCriminal(playerid,declare,reason[],pe,flash);
forward SetPlayerFree(playerid,declare,reason[],pe,flash);
forward OffTheHook();
forward SetPlayerWeapons(playerid);
forward PrintPlayerWeapons(playerid,targetid);
//forward SetPlayerToTeamColor(playerid);
forward GameModeInitExitFunc();
forward LoadConfig();
forward GetVal(string[]);
forward SyncUp();
forward SyncTime();
forward PayDay();
forward GetClosestPlayer(p1);
//forward strtik(const string[], &index);
forward split(const strsrc[], strdest[][], delimiter);
forward OnPlayerLogin(playerid,const string[]);
forward OnPlayerUpdate(playerid);
forward BroadCast(color,const string[]);
forward OOCOff(color,const string[]);
forward PlaySoundAll(playerid, soundid, Float:psx ,Float:psy ,Float:psz);
forward SendRadioMessage(Radio, color, string[]);
forward SendTeamMessage(team, color, string[]);
forward SendAdminMessage(color, string[]);
forward AddCar(carcoords);
forward PlayerPlayMusic(playerid);
forward StopMusic();
forward UnStun();
forward Encript(string[]);
forward Decript(string[]);
forward ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5);
forward ProxDetectorS(Float:radi, playerid, targetid);
forward FixHour(hour);
forward TestDistance(playerid,giveplayerid,Float:tarx,Float:tary,Float:tarz,Float:radi);
forward PlayJailSound(sound , stopsound, duration, Float: jailx,  Float: jaily,  Float: jailz);
//My fixing forwards
forward CheckLinux();
forward Tick();
forward GetTick();
forward GameTicks();
forward ClearHack();
forward Spectator();
forward CopScanner();
forward SecTimer();
forward RaceEnd();
forward DestroyCNN();
forward DMDelay();
forward DMDelayr();
forward DMDelayg();
forward DMDetect();
forward CarCheck();
forward CellPhoneTimer();
forward SetPlayerFlash();
forward SetPlayerFlashRev();
forward RingToner();
forward RingTonerRev();
forward SetPlayerUnjail();
forward VoteKickTimer();
forward SkyDive();
forward Production();
forward LoadPlayer(loaderid,const string[]);
forward SavePlayer(loaderid,const string[]);
forward PlayerFixRadio2();
forward StopJail();
forward admin_cd();
forward cd_endround();
forward cd_atomicbomb();
forward cd_fugitive();
forward PlayerInArea();
forward PlayerInArena();
forward HouseLevel(playerid);
forward CHouseLevel(houseid);
forward CrimInRange(Float:radi, playerid,copid);
forward CrimProxDetector(Float:radi, playerid,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10);
forward PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z);
forward PenInArea();
forward CustomPickups();
//forward Idleafk();
forward AntiCamp();
forward AntiTeleport();
forward InHouse();
forward IsStringAName(string[]);
forward GetPlayerID(string[]);
forward AddsOn();
forward LottoTime(); //Oops on this one being missed ;) Added it before the new compiler :P
//forward i1111();
//forward Deplete_Fuel();
//End of fixed ones
forward dVec();
forward AgateT();
forward AgateM();
//forward amsgt();
forward alock();
forward respawnallvec();
//forward TimeShow();
forward RaceStart();
forward RaceEndTimer();
//forward LoadRaces();
forward Endround();

//~~~~~~~>Chapter><~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[New Variables]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
new connect[MAX_PLAYERS];
new hack;
new gblocked = 0;
new glocked = 0;
//new housecar;
new cd_timer,cd_seconds,Countdown;
new cd_freeze = 0;
new space;
new nick[MAX_PLAYER_NAME];
new msg[256];
new god[MAX_PLAYERS];
new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerLapStatus[MAX_PLAYERS];
new gPlayerLogged[MAX_PLAYERS];
new gPlayerSpawned[MAX_PLAYERS];
new gActivePlayers[MAX_PLAYERS];
new gLastCar[MAX_VEHICLES];
new gOoc[MAX_PLAYERS];
new BigEar[MAX_PLAYERS];
new Spectate[MAX_PLAYERS];
new FlashTime[MAX_PLAYERS];
new CellTime[MAX_PLAYERS];
new JailTime[MAX_PLAYERS];
new StartTime[MAX_PLAYERS];
//new RaceTime[MAX_PLAYERS];
new Contract[MAX_PLAYERS];
new KickVote[MAX_PLAYERS];
new VoteKick[MAX_PLAYERS];
new LastVote[MAX_PLAYERS];
new HireCar[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new gDice[MAX_PLAYERS];
new gSkyDive[MAX_PLAYERS];
new gSpeedo[MAX_PLAYERS];
new gSpentCash[MAX_PLAYERS];
new FirstSpawn[MAX_PLAYERS];
new gPlayerFighter[MAX_PLAYERS];
new DmScore[MAX_PLAYERS];
new LapCount[MAX_PLAYERS];
new SwitchKey[MAX_PLAYERS];
new TVMode[MAX_PLAYERS];
new Fixr[MAX_PLAYERS];
new Hidden[MAX_PLAYERS];
new Locator[MAX_PLAYERS];
new PLicence[MAX_PLAYERS];
new Phandcuffs[MAX_PLAYERS];
new Pmegaphone[MAX_PLAYERS];
new PoliceRadio[MAX_PLAYERS];
new gMap[MAX_PLAYERS];
new DmHiScore;
new DmHiPlayer = 255;
new Speeder;
new FugitiveCore[MAX_PLAYERS];
new gFighters;
new cmins,csecs,cmils;
new Mobile[MAX_PLAYERS];
new RingTone[MAX_PLAYERS];
new CallCost[MAX_PLAYERS];
new Mute[MAX_PLAYERS];
new gPlayerAccount[MAX_PLAYERS];
new gRaceGuy[MAX_PLAYERS];
new AdminAreaAccess[MAX_PLAYERS];
new gPlayerMission[MAX_PLAYERS];
new gPhoneBook[MAX_PLAYERS];
new gLastDriver[MAX_VEHICLES];
new gTeamCarLock[MAX_VEHICLES];
new gCarLock[MAX_VEHICLES];
new gPublicEnemy = INVALID_PLAYER_ID;
new gSuperCop = INVALID_PLAYER_ID;
new gFightLeader;
new LevScoreOld;
new MissionActive;
new DropOff;
new noooc;
new racelist = 1;
new dmlist = 1;
new automission = 1;
new adds = 1;
new addtimer = 60000;
new dmweapon;
new RetVal;
new specflick;
new Float:rx, Float:ry, Float:rz;
new Float:cwx, Float:cwy, Float:cwz;
new Float: scx, Float: scy, Float: scz;
new Float:rsx, Float:rsy, Float:rsz;
new Float:rmx, Float:rmy, Float:rmz;
//new ping1;
new Float:rm2x, Float:rm2y, Float:rm2z;
new Float:rex, Float:rey, Float:rez;
new Float: jailxt, Float: jailyt, Float: jailzt;
new stopsoundt;
new carselect[15];
new objstore[128];
new cbjstore[128];
//new vFuel[MAX_VEHICLES];
new motd[256];
new stealcar = 0;
new stealcardest = 0;
new rccounter = 0;
new racedelay = 60000;
new cdto = 0;
//new rStart;
new Float:radardist = 1000.0;
new radarfreq = 1000;
new ghour = 0;
new gminute = 0;
new gsecond = 0;
new reward = 0;
new mediccharge = 1000;
new preward = 0;
new numplayers = 0;
new dollah = 1000; // Amount player recieves on spawn.
new realtime = 1;
new wtime = 15;
new hotwire = 1;
new briefcase = 1;
new Briefcasepickup;
new streetrace = 0;
new deathmatch = 1;
new derbyon = 0;
new levelcost = 10000;
new deathcost = 500;
new paycheck = 10000;
new jobdelay = 20000;
new petime = 180000; //3 minutes
new jailtime = 20000; //20 seconds
new callcost = 10; //20 seconds
new forceteam = 0;
new realchat = 0;
new fow = 1;
new timeshift = 0;
new stats = 0;
new gdebug = 0;
new shifthour;
new synctimer;
new newmistimer;
new unjailtimer;
new playertimer;
new dmtimer;
new cartimer;
new lastkiller;
new celltimer;
new intrate = 1;
new teamcarlock = 1;
new levelexp = 2;
new nocasino = 1;
//new idletime = 900000; //~15 mins
//new idleafkt = 200000; //~n/a mins
new dmtime = 240; //4 mins
new accountplay = 1;
new civnokill =1;
new basedcost = 1000;
new suecost = 1000;
new cchargetime = 10;
new txtcost = 1;
new offhook;
new pickups;
//new randomrace = 0;
new nocarcash = 0;
new skydivecount = 60;
new Gtickcount;
//new Float:PlayerPos[MAX_PLAYERS][6];
new Float:DmeCam[6];
new Float:TeleportDest[MAX_PLAYERS][3];
new Float:CarTracking[MAX_PLAYERS][4];
new Float:TelePos[MAX_PLAYERS][6];
new Float:PenPos[3];
new BetRace[MAX_PLAYERS][2];
new BetDm[MAX_PLAYERS][2];
new gRobProtection[MAX_PLAYERS];
//Lottery lotto variables
new gLotto;
new gLottoTicket[MAX_PLAYERS];
new gLottoTime=9;
new gLottoWinners=0;
new gLottoPool=1;
new gLottoWinner[MAX_PLAYERS];
//end of lotto
new gRaces[500][28];

new DmGun[14] = {WEAPON_MINIGUN,WEAPON_CHAINSAW,WEAPON_ROCKETLAUNCHER,WEAPON_M4,WEAPON_AK47,WEAPON_TEC9,WEAPON_UZI,WEAPON_DEAGLE,WEAPON_SHOTGSPA,WEAPON_SHOTGUN,WEAPON_MP5,WEAPON_COLT45,WEAPON_SILENCED,0};

new DeathMatches[36][128] = {
{"Area52"},
{"Atlantis"},
{"Baseball"},
{"Construction"},
{"Quarry"},
{"Refinery"},
{"RodsOffice"},
{"RodsCastle"},
{"Carrier"},
{"TheBoat"},
{"Ruins"},
{"RodsCampus"},
{"Ruins"},
{"Urban"},
{"Ruins"},
{"TheCage"},
{"TheFarm"},
{"WildWest"},
{"Suburb"},
{"TruckYard"},
{"OpenWarII"},
{"MastaTrailer"},
{"EstateOfHate"},
{"OpenWar"},
{"HellSite"},
{"BigEars"},
{"PirateView"},
{"CabinFever"},
{"BatesMotel"},
{"Woods"},
{"SleepyHallow"},
{"WangView"},
{"DeathWay"},
{"TrainHouse"},
{"Glen"},
{"Abandon"}
};

/*new ShotgunPrice[4][1] = {
{8000}, //sawnoff
{5000}, //spas12
{1000}, //shotgun
{10} //shotgunammo
};

new SmgPrice[4][1] = {
{7000}, //Tec9
{5000}, //uzi
{3000}, //mp5
{2} //smgammo
};

new PistolPrice[4][1] = {
{4000}, //deagle
{3000}, //colt45
{1000}, //sdpistol
{1}//ammo
};

new RiflePrice[4][1] = {
{8000},//M4
{6000},//AK-47
{6000},//Rifle
{50}//Ammo
};

new ProjectilePrice[5][1] = {
{15000},//Satchel
{8000},//Molotov
{6000},//Grenade
{4000},//TearGas
{5}//Ammo
};

new HeavyPrice[4][1] = {
{25000},//Heat Seeker
{20000},//RPG
{15000},//Sniper Rifle
{8}//Ammo
};

new DildoPrice[4][1] = {
{1000}, //purpledildo
{1000}, //whitedildo
{1000}, //longwhitedildo
{1000} //whitedildo2
};

new MeleePrice[10][1] = {
{1000}, //parachute
{1000}, //golfclub
{1000}, //nightstick
{1000}, //knife
{1000}, //baseballbat
{1000}, //shovel
{1000}, //poolcue
{1000}, //flowers
{1000}, //cane
{25000}//Katana
};*/
public Float:GetDistanceBetweenPlayers(p1,p2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	if(!IsPlayerConnected(p1) || !IsPlayerConnected(p2))
	{
		return -1.00;
	}
	GetPlayerPos(p1,x1,y1,z1);
	GetPlayerPos(p2,x2,y2,z2);
	return floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
}

new Float:gRandomPlayerSpawns[10][3] = {
{-1736.59,820.87,24.89}, //sp1
{-2719.55,803.54,53.58},
{-2620.45,341.04,6.33},
{-2725.79,-305.50,9.03},
{-2134.96,-429.45,35.33},
{-2134.99,209.84,37.31},
{-2022.43,476.99,37.17},
{-1874.86,1132.28,47.44},
{-1969.78,1320.66,9.26},
{-2616.40,1400.42,9.09}
};


new Float:gRandomDMSpawns[21][3] = {
{-2414.0,1551.8,2.1}, // 1
{-2406.9,1555.2,2.1}, // 2
{-2392.8,1550.4,2.1}, // 3
{-2406.6,1545.1,2.1}, // 4
{-2391.9,1539.2,2.1}, // 5
{-2379.7,1541.8,2.1}, // 6
{-2366.9,1539.6,2.1}, // 7
{-2426.6,1537.4,2.1}, // 8
{-2473.5,1550.1,33.2}, // 9
{-2474.2,1546.8,23.6}, // 10
{-2464.2,1530.9,17.3}, // 11
{-2437.5,1559.0,17.3}, // 12
{-2416.3,1554.3,26.0}, // 13
{-2424.7,1542.5,26.0}, // 14
{-2410.5,1532.4,26.0}, // 15
{-2403.5,1546.5,26.0}, // 16
{-2389.2,1550.7,26.0}, // 17
{-2368.0,1556.7,17.3}, // 18
{-2351.5,1551.1,23.1}, // 19
{-2313.7,1546.4,18.7}, // 20
{-2313.7,1546.4,18.7} // 21
};

new Float:gDMWbounds[4] = {0.0,0.0,0.0,0.0};
//~~~~~~~~~[Police Spawns]~~~~~~~~~~~
new Float:gCopPlayerSpawns[2][3] = {
{-1605.80,717.35,11.67},
{-1603.80,717.35,11.67}
//{614.8,-608.2,17.2},
//{611.5,-607.8,17.2}
};
//~~~~~~~~~[Medice Spawns]~~~~~~~~~~~
new Float:gMedPlayerSpawns[2][3] = {
{-2643.4,634.1,14.4},
{-2695.5,629.1,14.4}
};


//=========[BriefCase CP]===========
new Float:gCBdropoff[37][3] = {
{-1531.62,687.50,133.05},
{-2116.69,925.64,86.08},
{-2178.19,714.87,53.89},
{-2079.53,1066.02,65.57},
{-2708.04,378.05,11.98},
{-1474.37,152.15,18.77},
{-1320.62,485.88,11.19},
{-2659.46,1530.08,54.94},
{-2657.78,1414.17,27.97},
{-2807.55,1162.87,20.31},
{-2387.21,2215.94,4.98},
{-2119.53,224.59,35.10},
{-2027.70,-42.67,38.80},
{-1948.38,111.97,27.69},
{-1808.22,560.85,35.16},
{-1940.65,486.94,31.97},
{-1571.32,703.71,26.46},
{-1599.16,683.78,17.16},
{-1610.15,-493.28,22.09},
{-1429.51,-964.76,200.91},
{-1685.92,1034.85,56.91},
{-1643.64,1206.49,32.91},
{-1505.59,1374.12,3.83},
{-2187.07,607.10,35.16},
{-2222.01,615.84,44.24},
{-2435.86,544.59,28.36},
{-2525.08,310.48,35.12},
{-1812.34,1226.70,23.98},
{-1864.90,1281.93,62.48},
{-2483.35,164.50,32.06},
{-1650.97,1422.88,9.22},
{-2582.19,893.12,74.48},
{-2661.18,874.05,84.38},
{-1465.60,408.74,7.19},
{-2734.98,769.54,65.91},
{-2402.25,-597.65,132.65},
{-2432.76,-1620.05,526.86}
};

enum pSpec
{
	Float:sPx,
	Float:sPy,
	Float:sPz,
	sPint,
	sLocal,
	sCam,
};

new Unspec[MAX_PLAYERS][pSpec];

/*enum supname
{
	name[24]
};*/
new Supervisors[288]=
{
	"JohnSanders",
	"Fox_Trota",
	"T0St3D_SawN0fF",
	"Trinity_SawN0fF",
	"DragonMasterNYC",
	"Exile",
	"[X2G]Sneaky"
};
enum eCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle
};

enum pInfo//=========[Player Info]========//[DIAMOND1]
{
	pPassword[128], //1
	pCash, //2
	pAccount, //3
	pAdmin, //4
    pRank, //5
    pJRank, //6
    pJob, //7
	pLevel, //8
	pExp, //9
	gPupgrade,//10
	pKills,//11
	pCB,//12
	pHW,//13
	pSR,
	pSP,
	pBD,
	pDB,
	pFUG,
	pGun1,
	pGun2,
	pGun3,
	pGun4,
	pGun5,
	pGun6,
	pAmmo1,
	pAmmo2,
	pAmmo3,
	pAmmo4,
	pAmmo5,
	pAmmo6,
	Float:pSHealth,
	Float:pHealth,
	Float:pPos_x,
	Float:pPos_y,
	Float:pPos_z,
	pInt,
	pLocal,
	pTeam,
	pModel,
	pCell,
	pPnumber,
	pPhousekey,
	pPbiskey,
	pDuty,
	pLicA,
	pLicB,
	pLicJD,
	pLicPL,
  	pLicFE,
  	pXpir,
  	pFood,
  	pWarnL,
  	pTick,
  	pWantL,
  	pFish,
  	pProb,
  	pWeed,
  	pCoke,
    pAEdit,
    pJail,
    pDisez,
    pJPnts,
    pSuspend,
    pBanTime,
    pDebitc,
    pMisc,
    pAju,
    Float:pSArmour,
    vehicle,
    pKillz,
	pCBz,
	pHWz,
	pSRz,
	pWAz,
	pPENz,
	pDeathz,
	pDMz,
	pDrowned,
	pFell,
	pBusted,
	pCrimkill,
	pGangkill,
	pCopkill,
	pDMKill,
	pDMDeath,
	pDildoK,
	pFlowerK,
	pCaneK,
	pGrenadeK,
	pGasK,
	pMolotovK,
	pColtK,
	pSPK,
	pDeagleK,
	pPShotK,
	pSawnK,
	pSpas12K,
	pUziK,
	pMP5K,
	pAK47K,
	pM4K,
	pTec9K,
	pRifleK,
	pSRifleK,
	pRPGK,
	pHSRLK,
	pFlameK,
	pMiniK,
	pSatchelK,
	pFireEK,
	pSprayK,
	pFistK,
	pBrassK,
	pGolfK,
	pNightSK,
	pBatK,
	pShovelK,
	pPoolCK,
	pKatanaK,
	pChainsawK,
	pIntimK,
	pKnifeK,
	pDildoD,
	pFlowerD,
	pCaneD,
	pGrenadeD,
	pGasD,
	pMolotovD,
	pColtD,
	pSPD,
	pDeagleD,
	pPShotD,
	pSawnD,
	pSpas12D,
	pUziD,
	pMP5D,
	pAK47D,
	pM4D,
	pTec9D,
	pRifleD,
	pSRifleD,
	pRPGD,
	pHSRLD,
	pFlameD,
	pMiniD,
	pSatchelD,
	pFireED,
	pSprayD,
	pFistD,
	pBrassD,
	pGolfD,
	pNightSD,
	pBatD,
	pShovelD,
	pPoolCD,
	pKatanaD,
	pChainsawD,
	pIntimD,
	pKnifeD,
	pLogs,
	pTmpMission,
	pTmpRank,
	pTmpDMkill,
	pGangRank,
	pWantedlevel, //
	pLicense, //
	pMuted,
	pPbiskey2, //
	pPhousekey2, //
	pCDL,
	pMotoL,
	pDisconnects,
	pMHeals,
	pHealed,
	pFucked,
	pGotfucked,
	pBlown,
	pGotblown,
	pWank,
	pGotwanked,
	pAnal,
	pGotanal,
	pRobs,
	pGotrobbed,
	pSaves,
	aMutes,
	pMutes,
	aSlaps,
	pSlaps,
	aKicks,
	pKicks,
	aScrews,
	pScrews,
    pGun7,
    pAmmo7,
    pGun8,
    pAmmo8,
    pLottoXP
};
new PlayerInfo[MAX_PLAYERS][pInfo];

/*enum Info111
{
	Fuel
}
new pInfo1[MAX_PLAYERS][Info111];*/

enum Pos
{
	Float:LastX,
	Float:LastY,
	Float:LastZ
}
//new SavePlayerPos[MAX_PLAYERS][Pos];
new Alarm[255]; // Vehicle Alarm
new gMon[MAX_PLAYERS];
enum plInfo //=========[Player Info]========[DIAMOND2]
{
	plPassword[128],
	plCash,
	plAccount,
	plAdmin,
	plRank,
	plJRank,
    plJob,
	plLevel,
	plExp,
	glPupgrade,
	plKills,
	plCB,
	plHW,
	plSR,
	plSP,
	plBD,
	plDB,
	plFUG,
	plGun1,
	plGun2,
	plGun3,
	plGun4,
	plGun5,
	plGun6,
	plAmmo1,
	plAmmo2,
	plAmmo3,
	plAmmo4,
	plAmmo5,
	plAmmo6,
	Float:plSHealth,
	Float:plHealth,
	Float:plPos_x,
	Float:plPos_y,
	Float:plPos_z,
	plInt,
	plLocal,
	plTeam,
	plModel,
	plCell,
	plPnumber,
	plPhousekey,
	plPbiskey,
	plDuty,
	plLicA,
	plLicB,
	plLicJD,
	plLicPL,
  	plLicFE,
  	plXpir,
  	plFood,
  	plWarnL,
  	plTick,
  	plWantL,
  	plFish,
  	plProb,
  	plWeed,
  	plCoke,
    plAEdit,
    plJail,
    plDisez,
    plJPnts,
    plSuspend,
    plBanTime,
    plDebitc,
    plMisc,
    plAju,
    Float:plArmour,
    plKillz,
	plCBz,
	plHWz,
	plSRz,
	plWAz,
	plPENz,
	plDeathz,
	plDMz,
	plDrowned,
	plFell,
	plBusted,
	plCrimkill,
	plGangkill,
	plCopkill,
	plDMKill,
	plDMDeath,
	plDildoK,
	plFlowerK,
	plCaneK,
	plGrenadeK,
	plGasK,
	plMolotovK,
	plColtK,
	plSPK,
	plDeagleK,
	plPShotK,
	plSawnK,
	plSpas12K,
	plUziK,
	plMP5K,
	plAK47K,
	plM4K,
	plTec9K,
	plRifleK,
	plSRifleK,
	plRPGK,
	plHSRLK,
	plFlameK,
	plMiniK,
	plSatchelK,
	plFireEK,
	plSprayK,
	plFistK,
	plBrassK,
	plGolfK,
	plNightSK,
	plBatK,
	plShovelK,
	plPoolCK,
	plKatanaK,
	plChainsawK,
	plIntimK,
	plKnifeK,
	plDildoD,
	plFlowerD,
	plCaneD,
	plGrenadeD,
	plGasD,
	plMolotovD,
	plColtD,
	plSPD,
	plDeagleD,
	plPShotD,
	plSawnD,
	plSpas12D,
	plUziD,
	plMP5D,
	plAK47D,
	plM4D,
	plTec9D,
	plRifleD,
	plSRifleD,
	plRPGD,
	plHSRLD,
	plFlameD,
	plMiniD,
	plSatchelD,
	plFireED,
	plSprayD,
	plFistD,
	plBrassD,
	plGolfD,
	plNightSD,
	plBatD,
	plShovelD,
	plPoolCD,
	plKatanaD,
	plChainsawD,
	plIntimD,
	plKnifeD,
	plLogs,
	plTmpMission,
	plTmpRank,
	plTmpDMkill,
	plGangRank,
	plWantedlevel,
	plLicense,
	plMuted,
	plPbiskey2,
	plPhousekey2,
	plCDL,
	plMotoL,
	plDisconnects,
	plMHeals,
	plHealed,
	plFucked,
	plGotfucked,
	plBlown,
	plGotblown,
	plWank,
	plGotwanked,
	plAnal,
	plGotanal,
	plRobs,
	plGotrobbed,
	plSaves,
	alMutes,
	plMutes,
	alSlaps,
	plSlaps,
	alKicks,
	plKicks,
	alScrews,
	plScrews,
	plGun7,
	plAmmo7,
	plGun8,
	plAmmo8,
	plLottoXP
};
new PLlayerInfo[MAX_PLAYERS][plInfo];

enum hInfo//=========[House Info]===========
{
	Float:hEntrancex,
	Float:hEntrancey,
	Float:hEntrancez,
	Float:hExitx,
	Float:hExity,
	Float:hExitz,
	hHealthx,
	hHealthy,
	hHealthz,
	hArmourx,
	hArmoury,
	hArmourz,
	hOwner[MAX_PLAYER_NAME],
	hDiscription[MAX_PLAYER_NAME],
	hValue,
	hHel,
	hArm,
	hInt,
	hLock,
	hOwned,
	hRooms,
	hRent,
	hRentabil,
	hTakings,
	hVec,
	hVcol1,
	hVcol2,
	hDate,
	hStartLevel,
	hLevel,
	hRC
	//hPlate[8]
};

new HouseInfo[102][hInfo];

/*enum bInfo //=========[Bizz info]===========
{
	Float:bEntrancex,
	Float:bEntrancey,
	Float:bEntrancez,
	Float:bExitx,
	Float:bExity,
	Float:bExitz,
	bHealthx,
	bHealthy,
	bHealthz,
	bArmourx,
	bArmoury,
	bArmourz,
	bOwner[MAX_PLAYER_NAME],
	bDiscription[64],
	bValue,
	bHel,
	bArm,
	bInt,
	bLock,
	bOwned,
	bEntcost,
	bTakings,
	bDate,
	bLevel,
	bProd,
	bProdCap,
	bComp,
	bCompCap,
	bProdCost,
	bPayComp,
	bPriceMod
};*/


enum bInfo //=========[Bizz info]===========
{
	Float:bEntrancex,
	Float:bEntrancey,
	Float:bEntrancez,
	Float:bExitx,
	Float:bExity,
	Float:bExitz,
	bHealthx,
	bHealthy,
	bHealthz,
	bArmourx,
	bArmoury,
	bArmourz,
	bOwner[MAX_PLAYER_NAME],
	bDiscription[64],
	bValue,
	bHel,
	bArm,
	bInt,
	bLock,
	bOwned,
	bEntcost,
	bTakings,
	bDate,
	bLevel,
	bProd,
	bProdCap,
	bComp,
	bCompCap,
	bProdCost,
	bPayComp,
	bPriceMod,
};

new BizzInfo[13][bInfo];

enum sbInfo //=========[Small Biz Info]===========
{
	Float:sbEntrancex,
	Float:sbEntrancey,
	Float:sbEntrancez,
	sbOwner[MAX_PLAYER_NAME],
	sbDiscription[64],
	sbValue,
	sbHel,
	sbArm,
	sbInt,
	sbLock,
	sbOwned,
	sbEntcost,
	sbTakings,
	sbDate,
	sbLevel,
	sbProd,
	sbProdCap,
	sbComp,
	sbCompCap,
	sbProdCost,
	sbPayComp,
};

new SBizzInfo[17][sbInfo]; //=========[CompBizz]===========

enum pHaul
{
	pCapasity,
	pLoad,
};

new PlayerHaul[MAX_VEHICLES][pHaul];

enum pCrime
{
	pBplayer[32],
	pAccusing[32],
	pAccusedof[32],
	pVictim[32],
};

new PlayerCrime[MAX_PLAYERS][pCrime];

enum pTele
{
	Float:pTmpposx,
	Float:pTmpposy,
	Float:pTmpposz,
	pTmpint,
};

new Teletmp[255][pTele];

enum rInfo
{
	Float:rStartx,
	Float:rStarty,
	Float:rStartz,
	Float:rMidx,
	Float:rMidy,
	Float:rMidz,
	Float:rMid2x,
	Float:rMid2y,
	Float:rMid2z,
	Float:rEndx,
	Float:rEndy,
	Float:rEndz,
	rName[MAX_PLAYER_NAME],
	rBest[MAX_PLAYER_NAME],
	rBestm,
	rBests,
	rBestms,
	rLaps,
};

new RaceInfo[rInfo];

/*
enum pPickup
{
	pID,
	pType,
	Float:pPx,
	Float:pPy,
	Float:pPz,
};

new PickUps[MAX_PLAYERS][pPickup];
*/
//=========[Random Car Spawns]===========
new RandCars[50][1] = {
{404},{405},{410},{413},{409},
{419},{421},{422},{426},{436},
{439},{445},{458},{466},{467},
{474},{475},{479},{482},{483},
{491},{492},{496},{500},{507},
{516},{517},{518},{526},{527},
{529},{533},{540},{542},{545},
{546},{547},{549},{550},{551},
{555},{566},{579},{580},{585},
{587},{589},{600},{602},{603}
};


new RandLCars[6][1] = {
{431},// bus
{433},// barracks
{437},// coach
{443},// packer
{455},// flatbed
{578}// dft30
};

new GunPrice[30][1] = {
{5000}, //Parachute
{4000}, //Golfclub
{3000}, //Nightstick
{8000}, //Knife
{1200}, //Baseballbat
{3000}, //Shovel
{1000}, //Poolcue
{4000}, //Purpledildo
{7800}, //Whitedildo
{5600}, //Longwhitedildo
{5300}, //Whitedildo2
{2000}, //Flowers
{6000}, //Cane
{500}, //Silenced Pistol
{1000}, //Colt45 Pistol
{1500}, //Desert Eagle
{2000}, //Tec9
{3000}, //Uzi
{2500}, //Mp5
{100}, //Shotgun
{2000}, //Spas12 Auto
{4000}, //Sawnoff
{2000}, //AK47
{2500}, //M4
{1000}, //Rifle
{3}, //pistolammo
{15}, //shotgunammo
{10}, //smgammo
{20}, //assaultammo
{50} //rifle
};

new Peds[276][1] = {
{264},
{102},//TEAM_BALLAS
{103},
{104},
{105},//TEAM_GROVE
{106},
{107},
{108},//TEAM_VAGOS
{109},
{110},
{114},//TEAM_AZTECAS
{115},
{116},
{121},// TEAM_NANG
{122},
{123},
{173},//TEAM_RIFA
{174},
{175},
{124},//TEAM_MAFIA
{125},
{126},
{127},
{111},//TEAM_RMAFIA
{112},
{113},
{117},//TEAM_TRIADS
{118},
{120},
{247},//TEAM_BIKERS
{248},
{100},
{256},//cops
{263},
{262},
{261},
{260},
{259},//cops
{258},
{257},
{256},
{255},
{253},
{252},
{251},
{250},
{249},
{246},
{245},
{244},
{243},
{242},
{241},
{240},
{239},
{238},
{237},
{236},
{235},
{234},
{233},
{232},
{231},
{230},
{229},
{228},
{227},
{226},
{225},
{224},
{223},
{222},
{221},
{220},
{219},
{218},
{217},
{216},
{215},
{214},
{213},
{212},
{211},
{210},
{209},//	{208},
{207},
{206},
{205},
{204},
{203},
{202},
{201},
{200},
{199},
{198},
{197},
{196},
{195},
{194},
{193},
{192},
{191},
{190},
{189},
{188},
{187},
{186},
{185},
{184},
{183},
{182},
{181},
{180},
{179},
{178},
{177},
{176},
{172},
{171},
{170},
{169},
{168},
{167},//	{166},//	{165},//	{164},//	{163},
{162},
{161},
{160},
{159},
{158},
{157},
{156},
{155},
{154},
{153},
{152},
{151},
{150},//	{149},
{148},
{147},
{146},
{145},
{144},
{143},
{142},
{141},
{140},
{139},
{138},
{137},
{136},
{135},
{134},
{133},
{132},
{131},
{130},
{129},
{128},
{101},
{254},
{99},
{98},
{97},
{96},
{95},
{94},
{93},
{92},
{91},
{90},
{89},
{88},
{87},//	{86},
{85},
{84},
{83},
{82},
{81},
{80},
{79},
{78},
{77},
{76},
{75},//	{74},
{73},
{72},
{69},
{68},
{67},
{66},//	{65},
{64},
{63},
{62},
{61},
{60},
{59},
{58},
{57},
{56},
{55},
{54},
{53},
{52},
{51},
{50},
{49},
{48},
{47},
{46},
{45},
{44},
{43},//	{42},
{41},
{40},
{39},
{38},
{37},
{36},
{35},
{34},
{33},
{32},
{31},
{30},
{29},
{28},
{27},
{26},
{25},
{24},
{23},
{22},
{21},
{20},
{19},
{18},
{17},
{16},
{15},
{14},
{13},
{12},
{11},
{10},
{1},//TRUTH
{2},//MACCER
{290},//ROSE
{291},//PAUL
{292},//CESAR
{293},//OGLOC
{294},//WUZIMU
{187},
{296},//JIZZY
{297},//MADDOGG
{298},//CAT
{299},//ZERO
{71}, //=255 amb
{70},
{274},
{275},
{276}, //==259
{163}, //=260
{164},
{165},
{166},
{295},//TORINO
{246},
{186},
{147},
{288},
{286},
{285},
{284},
{283},
{282},
{281},
{280} //276
};
//{9},
//{8},
//{7},
//{6},
//{5},
//{4},
//{3},
//{2},
//{1}


/*\\~~~~~~~~~~~~~~~~~~~~~~[Vehicle IDE]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
{536},//Blade
{496},//Blista
{422},//Bobcat
{518},//Buccaneer
{402},//Buffalo
{482},//Burrito
{480},//Comet
{562},//Elegy
{587},//Euros
{533},//Feltzer
{565},//Flash
{579},//Huntly
{545},//Hustler
{546},//Intruduer
{559},//Jester
{400},//Landstalker
{517},//Majestic
{551},//Merit
{500},//Mesa
{467},//Oceanic
{603},//Phoenix
{436},//Previon
{475},//Sabre
{567},//Savanna
{535},//Slamvan
{561},//Stratum
{560},//Sultan
{550},//Sunrise
{566},//Tahoma
{558},//Uranus
{540},//Vincent
{412},//Voodoo
{421},//Washington
{529},//Willard
{555}//Windsor
};
*/
//~~~~~~~~[Random Lowrider Spawns]~~~~~~~~~~~~
new RandLow[7][1] = {
	{536}, //Blade
	{575}, //Broadway
	{534}, //Remington
	{567}, //Savanna
	{535}, //Slamvan
	{576}, //Tornado
	{412}  //Voodoo
};
//~~~~~~~~[Random Bike Spawns]~~~~~~~~~~~~
new RandBikes[12][1] = {
	//{448},//Pizza Boy
	{461},//PCJ-600
	{462},//Faggio
	{463},//Freeway
	{468},//Sanchez
	{481},//BMX
	{509},//Bike
	{510},//Mountain Bike
	{521},//FCR-900
	{581},//BF-400
	{586},//Wayfarer
	{571},//kart
	{471}//quad
};
//~~~~~~~~[Random Fast Car Spawns]~~~~~~~~~~~~
new RandAngles[5][1] = {
	{562},//Elegy
	//{561},//Stratum
	{565},//Flash
	{559},//Jester
	{558},//Uranus
	{560}//Sultan
};

//-------------[Gas Station Locs]]-------------
/*new Float:Stations[16][3] = { // 1-16 located below
	{2109.2126,917.5845,10.8203},
	{2640.1831,1103.9224,10.8203},
	{611.8934,1694.7921,6.7193},
	{-1327.5398,2682.9771,49.7896},
	{-2413.7427,975.9317,45.0031},
	{-1672.3597,414.2950,6.8866},
	{-2244.1365,-2560.6294,31.6276},
	{-1603.0166,-2709.3589,48.2419},
	{1939.3275,-1767.6813,13.2787},
	{-94.7651,-1174.8079,1.9979},
	{1381.6699,462.6467,19.8540},
	{657.8167,-559.6507,16.0630},
	{-1478.2916,1862.8318,32.3617},
	{2147.3054,2744.9377,10.5263},
	{2204.9602,2480.3494,10.5278},
	{1590.9493,2202.2637,10.5247}
}; // 1-16 located above*/
new RentCar1,RentCar2,RentCar3,RentCar4,RentCar5,RentCar6;
//~~~~~~~~~~~~~[House Car Spawns]~~~~~~~~~~~~~~
new Float:HouseCarSpawns[102][4] ={
// (normal house num) car number outside of parenthesis (for LS, add 34 for real house num, LV add 68)
	{-2094.5471,-2527.4312,30.7206,46.5135},//Beginning of Housecars SF (0)
	{-1425.7777,-1525.2206,101.1078,0.1380},//house (1)
	{-2082.0408,-2530.1794,30.6888,47.3303},//d (2)
	{-2795.9570,101.3395,7.2843,89.3898},//house3 d (3)
	{-2227.5791,102.0441,35.4133,88.4252}, // hosue  (4)
	{-2718.5862,-124.3040,4.4283,269.8176},//balde hr - (5)
	{-2275.9343,907.2831,66.7379,359.1227},//house (6)
	{-2741.3259,767.3788,54.4718,88.9035},//house (7)
	{-2724.2317,915.5233,67.6782,90.9239},//blistac (8)
	{-2426.2532,2345.3655,5.0731,191.1916},//remington (9)
	{-2464.5801,897.8078,62.6993,358.978},//(10)
	{-1974.7997,1188.2860,45.5382,89.5201},//supergt (11) d
	{-2156.0278,835.2209,68.4106,269.5579},//house (12) d
	{-2637.1038,164.6272,3.9562,177.3784},//comet (13) d
	{-2615.3564,-109.7871,4.4289,225.9607},//newhouse cheeta	(14) d
	{-2694.7485,112.6164,4.4288,90.9767}, //(15)
	{-2048.4634,901.8010,51.7757,359.0649},//savanna 8 house (16) d
	{-2569.7253,813.0837,49.7375,90.4472}, //blank (17) d
	{-2635.7874,930.2011,71.6010,228.5905},//bullit 10 house (18)
	{-2437.2031,2447.7285,13.8814,178.4756},//hotring 2 house (19)
	{-2662.7969,991.1157,64.9829,352.0646},//bullit 10 house (20)
	{-2278.9688,1093.0332,80.1988,271.8419},//rancher 5 house (21)
	{-2681.1306,870.3436,76.5524,21.0380},//bucaner//hotrod 6 house (22)
	{-2696.0505,824.4062,48.5107,178.6384},//cheetah (23)
	{-2711.5933,871.2088,70.4306,90.4896},//zr350 //house (24)
	{-2536.7979,763.1629,38.3829,267.4845},//infernus house (25)
	{-2840.5642,917.9500,44.1476,274.2529},//euros //house (26)
	{-2721.0137,984.6269,54.4609,24.5002},//banshee //house (27)
	{-2398.0574,863.7018,43.2900,273.5835},//banshee //house (28)
	{-2625.6299,2273.8923,8.3787,268.2709}, //(29)
	{-2377.3142,688.0111,35.2619,88.3543},//banshee //house (30)
	{-2486.9502,2510.0149,18.0625,359.0382},//banshee //house (31)
	{-2425.8875,2496.2031,13.5679,89.8136}, //(32)
	{-2894.5146,1053.8331,32.6685,269.2279},//End of SF housecars (33)
	//LS HOUSECARS
	{1826.0729,-2002.0835,13.1268,182.9288}, // crazyhouse car (0) 35
	{1451.6055,-930.9224,36.4748,172.4766}, // okayhouse car (1) 36
	{641.9377,-1712.9033,14.0762,345.6347}, //(2) 37
	{1041.2626,-1051.1041,31.2701,359.7627}, // bypayspray car (3) 38
	{970.4853,-914.9857,45.4714,89.1970}, // (4) 39
	{815.3465,-1499.1899,12.8493,354.6878}, // apt car (5) 40
	{2281.5432,-1050.9148,48.9306,235.0592}, // crapshed car (6) 41
	{2366.2310,-1039.4999,53.7627,234.8819}, // anothermobile car (7) 42
	{2480.8889,-1023.3525,64.2540,153.2641}, // slightly better car (8)43
	{2137.5771,-1285.4934,24.1629,175.1404}, // glen area car (9) 44
	{1094.6428,-1101.5836,24.6671,94.2744}, // decentarea car (10) 45
	{1175.9948,-1067.3306,28.4647,90.2040}, // decenthouse car (11) 46
	{2141.3652,-1435.5828,24.0602,99.6723}, // closetohospital car (12) 47
	{2142.8938,-1415.7184,24.4527,79.6471}, // close2 car (13) 48
	{2266.1189,-1398.4230,23.5774,355.3431}, // almostdone car (14) 49
	{2515.2102,-1672.1677,13.3613,68.6595}, // Sweet's housecar (15) 50
	{207.2804,-1775.1649,3.3445,90.0846}, // beach car (16) 51
	{1962.1310,-1719.9298,15.5159,357.7199}, // oddplacecar (17) 52
	{1094.0931,-826.9011,86.5113,90.5011}, // stilthouse car (18) 53
	{2068.4182,-1695.0598,13.1183,270.9351}, // bigsmoke's housecar (19) 57
	{2777.3523,-1945.8530,13.1205,96.5530}, // vagos car i guess (20) 55
	{315.9351,-1746.0806,4.1415,258.7465}, // shithole car (21) 56
	{2763.1641,-1937.7841,13.1189,176.7922}, // vagos2 car (22) 57
	{2645.3149,-1991.8645,13.1306,181.9033}, // byloco car (23) 58
	{645.8808,-1683.7667,14.5692,351.3130}, // luxary car (24) 59
	{1704.7936,-2125.1243,13.1199,354.7459}, // nexthousecar (25) 60
	{1793.5358,-2126.2590,13.1121,358.7352}, // housecar1 (26) 61
	{1513.5316,-694.4525,94.3270,87.9704}, // huuuge house car (27) 62
	{191.8320,-1774.7845,3.4846,272.1209}, // (28) 83
	{2222.6260,-1791.5647,13.1198,184.2663}, // decentplace car (29) 64
	{2489.3887,-1406.7021,28.4014,267.9354}, // someplace car (30) 65
	{2003.5742,-1122.8768,26.1602,176.6059}, // glenhouse2 car (31) 66
	{1910.4113,-1119.4092,25.3433,180.9053}, // glenpark car (32) 67
	{169.0209,-1344.0310,69.9334,185.3639}, // nicehouse car (33) 68
	//========================LV cars 69-102============================
	{-1483.8367,2693.7095,55.6292,268.6008}, // county house (1) car
	{-1665.7373,2562.6230,84.9620,270.7202}, // county house LV (2) car
	{-901.8378,2686.7988,42.2414,43.2059}, // housecar LV county (3)
	{1419.5316,1956.8292,11.2368,358.4515}, // LV house (4) car
	{1370.2736,2012.0361,11.2373,272.1077}, // LV housecar (5)
	{1932.1091,2335.3547,10.6319,358.9978}, // LV housecar (6)
	{1849.6129,699.0710,11.2491,268.6075}, // Housecar Lv (7)
	{2004.3495,688.4729,11.1746,177.0243}, // housecar (8)
	{2083.9966,690.7889,11.2800,178.3526}, // housecar (9) LV
	{2185.8779,650.9358,11.2634,178.7526}, // Housecar LV (10)
	{2326.4194,648.5112,11.1044,177.9313}, // housecar (11) LV
	{2361.2019,650.7147,11.2776,177.8871}, // LV housecar (12)
	{2444.7327,734.6721,11.2463,90.5309}, // Housecar (13)
	{1911.4133,2763.1809,10.5427,180.3234}, // housecar (14) LV
	{2028.0909,2733.1875,10.6911,359.5067}, // LV house (15) car
	{1929.2698,2654.5212,10.6911,179.4774}, // LV housecar (16)
	{2026.8879,2653.7739,10.6911,180.7419}, // HOuse LV (17) car
	{2102.5657,2656.5688,10.6899,148.1479}, // LV carhouse (18)
	{1673.0778,2695.8293,10.6913,1.0080}, // Housecar (19)
	{1622.4249,2715.4297,10.6914,357.8697}, // House (20) Housecar LV
	{1564.1821,2722.7715,10.6879,359.3688}, // house (21) car LV
	{1599.8660,2655.0215,10.6910,88.5925}, // housecar (22) LV
	{1607.9348,2602.2283,10.6985,179.9705}, // housecar LV (23)
	{1496.0884,2540.3970,10.6915,89.0855}, // house (24) car LV
	{1297.6456,2530.3003,10.5430,358.8774}, // House LV car (25)
	{1284.1786,2572.5635,10.6913,268.7108}, // housecar (26) LV
	{-608.5671,2709.9424,72.1648,180.4413}, // House (27) LV car
	{893.0535,2040.3594,11.1206,268.2309}, // House1 LV car (28)
	{990.0835,1894.0042,11.2750,267.4143}, // LV house2 car (29)
	{1090.6462,1993.9155,11.2639,267.2709}, // LV house 3 car (30)
	{2489.7285,1534.1671,10.5498,232.0087}, // Hotel w/pool tiki car (31)
	{2613.0566,2294.0239,10.7116,5.1043}, // Hotel Vrock LV car (32)
	{2034.9052,1922.0493,12.0498,178.4412}, // hoetl Lv vsage (33)
	{1634.7715,2082.9077,11.0961,86.9123} // Las LV housecar (34)
	//========================================================================
};
enum derbyCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
	ecolor1,
	ecolor2,
	respawn
};
new DerbyCar[25][derbyCars]=
{
	{444,-1464.2366,977.8143,1025.9411,315.3889,-1,-1,-1},
	{444,-1471.7260,999.3374,1026.2319,250.3189,-1,-1,-1},
	{444,-1435.6176,1025.5268,1026.3991,178.7130,-1,-1,-1},
	{444,-1415.9193,1028.5236,1026.5299,179.1440,-1,-1,-1},
	{444,-1405.2641,1028.4680,1026.5093,171.7194,-1,-1,-1},
	{444,-1387.7398,1023.7097,1025.9046,173.1634,-1,-1,-1},
	{444,-1373.8725,1022.9439,1025.8029,176.5748,-1,-1,-1},
	{444,-1367.4570,1022.2234,1025.7506,164.4366,-1,-1,-1},
	{444,-1353.4633,1018.3042,1025.6762,155.9409,-1,-1,-1},
	{444,-1342.7757,1011.0956,1025.4931,143.8928,-1,-1,-1},
	{444,-1335.4309,1002.7367,1025.4077,93.8331,-1,-1,-1},
	{444,-1337.7843,985.2111,1025.0885,64.0850,-1,-1,-1},
	{444,-1346.3381,975.9971,1025.0256,23.2450,-1,-1,-1},
	{444,-1360.0007,971.5171,1024.8087,16.3828,-1,-1,-1},
	{444,-1372.8823,967.6331,1024.9290,351.9758,-1,-1,-1},
	{444,-1383.2659,968.1646,1024.8901,359.8238,-1,-1,-1},
	{444,-1393.4200,967.3416,1024.9768,354.7002,-1,-1,-1},
	{444,-1408.4654,967.7206,1024.9468,2.2658,-1,-1,-1},
	{444,-1418.7348,967.1035,1025.0209,6.2569,-1,-1,-1},
	{444,-1429.1813,967.8336,1025.0729,353.3563,-1,-1,-1},
	{444,-1441.4638,971.9506,1025.0739,331.8225,-1,-1,-1},
	{444,-1451.4792,976.7484,1025.2170,326.3336,-1,-1,-1},
	{444,-1456.5515,982.7573,1025.2354,303.5089,-1,-1,-1},
	{444,-1460.3697,991.3407,1025.3226,283.6932,-1,-1,-1},
	{444,-1445.7888,994.7463,1024.5296,283.1702,-1,-1,-1}
};
enum lsCars
{
	model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
	ecolor1,
	ecolor2,
	respawn
};
new LSCars[101][lsCars]=
{
	{522,2507.0258,-1671.7978,12.9464,359.6259,-1,-1,-1},
	{522,2299.6501,-1638.2037,14.2523,268.5729,-1,-1,-1},
	{522,2163.6579,-1807.0875,12.9365,358.8191,-1,-1,-1},
	{522,2185.6623,-1806.2524,12.9423,0.2658,-1,-1,-1},
	{522,2052.4941,-1904.1845,13.1170,179.2501,-1,-1,-1},
	{522,1978.3297,-1572.4794,13.1773,110.2809,-1,-1,-1},
	{522,1312.6381,-1499.6962,13.1158,143.3484,-1,-1,-1},
	{522,1284.9907,-1542.8900,13.0844,185.3697,-1,-1,-1},
	{522,1203.3747,-1542.8557,13.1139,351.9893,-1,-1,-1},
	{522,1213.4473,-1328.5473,13.1353,0.5923,-1,-1,-1},
	{522,1030.7553,-1130.7779,23.4091,86.3604,-1,-1,-1},
	{522,947.9403,-1134.6683,23.4594,87.2452,-1,-1,-1},
	{522,763.5737,-1129.0899,23.8075,233.7288,-1,-1,-1},
	{522,764.0266,-1032.5356,23.5552,169.0759,-1,-1,-1},
	{522,719.5076,-1124.3529,17.5655,336.0786,-1,-1,-1},
	{522,662.2730,-1175.4212,15.7475,144.8958,-1,-1,-1},
	{522,674.3659,-1258.9943,13.1917,177.1896,-1,-1,-1},
	{522,710.3078,-1222.3515,17.2036,312.2717,-1,-1,-1},
	{522,790.8625,-1245.0869,13.4827,180.3160,-1,-1,-1},
	{522,752.1811,-1334.6472,13.1105,196.6286,-1,-1,-1},
	{522,783.9664,-1347.5123,13.1093,79.9128,-1,-1,-1},
	{522,767.9088,-1431.1619,13.1021,5.3234,-1,-1,-1},
	{522,783.4195,-1630.2242,12.9479,274.8647,-1,-1,-1},
	{522,744.0624,-1670.2070,10.0029,98.4892,-1,-1,-1},
	{522,387.6501,-1644.3437,31.7068,78.9862,-1,-1,-1},
	{522,155.5408,-1595.0130,12.7232,221.5817,-1,-1,-1},
	{522,239.1805,-1691.8640,9.4051,233.3490,-1,-1,-1},
	{522,451.3317,-1697.9306,10.4748,95.5668,-1,-1,-1},
	{522,883.2833,-1793.9317,13.2955,270.4224,-1,-1,-1},
	{522,1083.8492,-1755.4334,12.9526,270.0809,-1,-1,-1},
	{522,1136.0715,-1692.6804,13.3777,4.2982,-1,-1,-1},
	{522,1674.8156,-1112.0068,23.4806,83.2585,-1,-1,-1},
	{522,1621.8814,-1098.8713,23.4719,87.5781,-1,-1,-1},
	{522,1627.4418,-1012.3360,23.4735,164.9477,-1,-1,-1},
	{522,1757.0603,-1016.7639,23.5397,169.3547,-1,-1,-1},
	{522,1943.8023,-1050.1097,23.7279,272.5163,-1,-1,-1},
	{522,2103.0422,-969.1107,53.1654,170.7094,-1,-1,-1},
	{522,2275.6320,-1035.9265,50.3179,134.4547,-1,-1,-1},
	{522,2636.3005,-1075.0904,69.1920,175.7102,-1,-1,-1},
	{522,2717.7368,-1117.9104,69.1471,184.6080,-1,-1,-1},
	{522,2744.2221,-1223.2749,63.6584,9.3568,-1,-1,-1},
	{522,2816.9755,-1442.2604,19.7866,96.8568,-1,-1,-1},
	{522,2810.3679,-1433.4975,31.6959,179.2672,-1,-1,-1},
	{522,2813.6171,-1442.5671,35.6517,115.9987,-1,-1,-1},
	{522,2795.4445,-1458.5609,39.6158,349.0885,-1,-1,-1},
	{522,2933.8229,-1478.5302,10.5965,0.2595,-1,-1,-1},
	{522,2930.9833,-1386.7858,10.5165,5.5116,-1,-1,-1},
	{522,2864.0083,-1505.5100,10.6187,172.8667,-1,-1,-1},
	{522,2887.6782,-1685.3118,10.6085,0.7868,-1,-1,-1},
	{522,2825.6513,-1768.9802,10.6140,168.7399,-1,-1,-1},
	{522,2758.1413,-1848.1660,9.2807,198.9174,-1,-1,-1},
	{522,2661.6762,-1822.4166,8.8795,273.1041,-1,-1,-1},
	{522,2691.8835,-1673.5324,9.0327,183.7787,-1,-1,-1},
	{522,2507.5805,-1794.0880,13.1161,317.6752,-1,-1,-1},
	{522,2643.4458,-1938.2255,13.1151,268.0477,-1,-1,-1},
	{522,2763.2670,-1964.1295,13.1090,182.4235,-1,-1,-1},
	{522,2796.4541,-2175.5463,13.7943,315.0423,-1,-1,-1},
	{522,2528.0854,-2162.1232,13.1319,99.0040,-1,-1,-1},
	{522,2367.6137,-2197.7968,13.1126,308.0659,-1,-1,-1},
	{522,2336.5998,-2088.1140,13.1166,87.5878,-1,-1,-1},
	{522,2232.4775,-2096.1618,13.1152,249.2858,-1,-1,-1},
	{522,2255.4626,-2147.4328,13.1131,314.3762,-1,-1,-1},
	{522,2116.3347,-2137.9294,13.1992,0.1293,-1,-1,-1},
	{522,1948.5614,-2117.3085,13.1153,266.0299,-1,-1,-1},
	{522,1968.5849,-2023.1864,13.1134,2.7521,-1,-1,-1},
	{522,1802.0419,-1915.1020,12.9385,359.8257,-1,-1,-1},
	{522,1778.6861,-1912.9365,12.9516,351.3396,-1,-1,-1},
	{522,1766.4204,-1861.8688,13.1474,97.9886,-1,-1,-1},
	{522,1666.6024,-1889.6628,13.1153,81.3141,-1,-1,-1},
	{522,1635.4815,-1903.9434,13.1223,3.8855,-1,-1,-1},
	{522,1523.1741,-1961.5362,20.5450,181.8751,-1,-1,-1},
	{522,1410.0350,-2028.2785,52.9291,107.6920,-1,-1,-1},
	{522,1134.2829,-2048.4155,68.5758,184.7221,-1,-1,-1},
	{522,1133.9742,-2024.7963,68.5686,6.7204,-1,-1,-1},
	{522,1195.4403,-2036.2061,68.5749,271.5267,-1,-1,-1},
	{522,1030.4165,-1876.5616,12.6646,7.6623,-1,-1,-1},
	{522,938.2683,-1830.8165,12.1768,83.1883,-1,-1,-1},
	{522,737.7869,-1795.2629,12.8665,340.9757,-1,-1,-1},
	{522,600.1241,-1716.5667,13.4381,78.9043,-1,-1,-1},
	{522,609.7335,-1516.2661,14.5310,274.7887,-1,-1,-1},
	{522,443.9519,-1301.1994,14.7668,224.8034,-1,-1,-1},
	{522,374.9084,-1342.1613,14.1878,203.2199,-1,-1,-1},
	{522,110.9048,-1610.6062,10.0830,168.3244,-1,-1,-1},
	{522,173.7537,-1783.3554,3.6012,260.5683,-1,-1,-1},
	{522,327.6491,-1808.2554,4.0731,358.0671,-1,-1,-1},
	{522,815.7374,-1704.1737,13.1088,0.1116,-1,-1,-1},
	{522,857.2183,-1528.2669,13.1229,266.9612,-1,-1,-1},
	{522,952.5655,-1381.2767,12.9111,176.4425,-1,-1,-1},
	{522,956.8811,-1193.2904,16.5299,267.2605,-1,-1,-1},
	{522,1107.8494,-1211.2899,17.3719,242.7962,-1,-1,-1},
	{522,1149.5388,-1226.2105,16.8590,184.3545,-1,-1,-1},
	{522,1336.3885,-1115.9428,23.4286,359.8094,-1,-1,-1},
	{522,1440.7978,-1040.7719,23.3960,262.2301,-1,-1,-1},
	{522,1931.1166,-1141.9224,24.8276,271.8010,-1,-1,-1},
	{522,2058.9667,-1235.8372,23.5509,178.5017,-1,-1,-1},
	{522,2149.1625,-1725.8973,13.1052,266.7922,-1,-1,-1},
	{522,2248.9250,-1740.8477,13.1074,256.3349,-1,-1,-1},
	{522,2340.8144,-1744.2989,13.1107,281.6130,-1,-1,-1},
	{522,2411.9206,-1537.9715,23.5409,9.3645,-1,-1,-1},
	{522,2334.2788,-1443.6680,23.5695,357.1663,-1,-1,-1},
	{522,2433.3784,-1239.6458,24.1070,174.4238,-1,-1,-1}
};

new CarSpawns[196][eCars] = {
	{405,-2619.2,1377.9,7.1,0.0},//carid 90
	{554,-2618.6799,1354.3392,6.8373,270.8708},
	{426,-1763.3330,819.3478,24.7289,359.8215},
	{445,-1693.0175,856.4080,24.4977,270.2762},
	{492,-1721.5243,814.7571,24.9259,180.8070},
	{507,-2631.5037,1378.8342,7.2575,181.1889},//jizzys
	{545,-2622.8477,1337.6140,7.2987,316.5417},
	{540,-1887.2897,-769.0257,31.7874,89.4600},
	{482,-2175.7429,306.2949,34.7450,179.1501},
	{547,-2222.8445,306.2426,34.7384,179.6163},
	{550,-2201.3782,293.3218,34.7453,0.2534},
	{551,-2394.4966,-609.8448,132.2743,34.0125},
	{560,-2198.6421,-2351.3596,30.2520,231.8535},
	{566,-2109.6780,-2422.1514,30.2481,139.0628},
	{402,-2757.8911,-312.3266,7.1437,186.1606},
	{405,-2114.5579,-2410.2927,31.0792,321.1253},
	{554,-2153.3105,-2438.7710,30.2535,142.3130},
	{426,-2142.6797,-2446.9368,30.2586,142.3146},
	{507,-2093.2097,-2246.4563,30.3183,137.3789},
	{545,-2342.1008,-1587.0745,483.1974,242.4391},
	{540,-2251.1714,-1726.2953,479.6402,222.4934},
	{482,-1905.0978,-1671.2063,22.6481,270.5423},
	{547,-1857.4342,-1621.0774,21.5685,182.7465},
	{550,-1818.5417,-1619.9663,22.6527,181.1767},
	{400,-1030.5739,-653.6227,31.6315,270.1856},
	{405,-1006.7538,-625.7125,31.6443,270.4088}, //
	{492,-982.6550,-679.2434,31.6447,85.9554},
	{507,-1931.1104,1337.9386,6.9130,359.3145},
	{545,-1412.4739,-299.6119,13.7706,224.4117},
	{540,-1917.7603,1340.6293,6.8964,0.8749},
	{482,-2002.3789,1339.9393,6.9116,178.6080},
	{547,-1992.3242,1340.2391,6.9099,177.5546},
	{550,-1876.6682,1136.2804,45.0951,178.7776},
	{551,-1949.1823,792.1185,55.3477,269.2535},
	{533,-1801.7239,951.5541,24.5622,180.8025},
	{482,-1822.7212,938.4982,25.7963,88.6442},
	{547,-1847.4434,1114.1853,45.0658,270.0493},
	{550,-1411.9128,456.0428,6.8919,89.1449},
	{551,-1440.0000,456.3805,6.9053,89.3045},
	{566,-1463.3411,456.6666,6.9086,89.3186},
	{554,-1578.6233,1058.2885,6.6652,359.7366},
	{405,-1808.9396,249.9903,14.7357,157.6021},
	{554,-1834.7416,114.0225,14.8446,266.1066},
	{426,-1579.4412,1167.9718,6.6659,4.3934},
	{445,-1827.2614,420.4467,16.8178,47.4988},
	{492,-2185.0369,1165.0491,55.3564,270.9099},
	{507,-2066.6636,558.6514,34.8453,90.7903},
	{545,-2016.7843,761.9774,45.0672,179.8661},
	{540,-2456.8696,1070.2971,55.5153,358.5935},
	{482,-1812.9871,-190.5459,13.8008,269.3492},
	{547,-2473.4392,1071.1536,55.4983,1.0893},
	{550,-2585.5688,1157.6729,55.0783,328.4306},
	{551,-2448.8735,-122.5677,25.4299,92.5909},
	{560,-2366.3752,1168.5133,40.6195,90.6569},
	{405,-2542.3271,599.1761,13.9936,89.9350},
	{554,-2543.4243,587.1970,14.0657,86.9525},
	{426,-2543.1626,610.7283,14.3281,88.4236},
	{445,-1760.2054,762.8785,25.0124,269.9135},
	{492,-1913.9000,791.7728,39.5503,269.9752},
	{507,-1809.1056,535.5177,34.9359,266.8667},//150
	{545,-1728.5143,1025.8417,44.8940,273.4900},
	{540,-1687.5502,983.1491,17.2423,89.3987},
	{482,-2174.1907,634.9171,49.5687,359.4943},
	{547,-2134.6780,376.2780,34.7829,359.3839},
	{550,-2889.5300,292.1919,3.9648,12.3508},
	{551,-1936.3577,273.4882,40.7557,185.3691},
	{598,2251.7363,2459.3135,10.6495,178.6703},
	{566,-2102.3367,654.2971,52.1427,270.2816},
	{405,-2483.9358,418.7318,27.3684,134.2648},
	{554,-1706.5850,1373.0841,6.6999,45.9366},
	{426,-1689.9032,1338.0310,6.1758,46.2081},
	{445,-2069.0911,960.8536,60.3715,198.2042},
	{492,-2408.3298,974.3469,45.0525,178.0619},
	{507,-2069.0911,960.8536,60.3715,198.2042},
	{545,-2323.4355,-468.9953,80.1877,302.2128},//165
	{482,-1522.0845,935.3561,6.6783,359.6746},
	{547,-2460.6282,152.4777,34.6958,0.6854},
	{550,-1987.8806,111.1257,27.4383,359.6521},
	{551,-2398.3132,-187.1352,35.4332,321.7989},
	{560,-2396.5161,-57.9216,35.0234,96.5329},
	{566,-2753.2773,384.7231,3.9102,179.8601},
	{405,-2632.4431,213.1238,4.4423,270.7947},
	{554,-2566.9053,295.0119,15.4260,80.0919},
	{426,-2271.4888,533.8504,34.8168,271.1359},
	{445,-2668.3689,268.2515,3.9222,180.9499},
	{492,-2574.6282,105.2575,4.2710,359.0365},
	{507,-2674.6321,267.8804,4.0947,180.5064},
	{545,-2326.3479,-125.5784,34.9119,181.6565},//178
	{540,-2528.0505,-602.3646,132.2045,0.1908},//179
	{482,-2746.6709,-306.7387,6.6259,229.3295},
	{547,-2403.2100,-584.9926,132.3222,126.1051},
	{550,-2585.5208,328.9509,4.4839,270.3127},
	{551,-1971.4618,-973.4301,31.8561,85.9100},
	{560,-2422.8945,317.9433,34.5812,153.5196},
	{566,-1941.2579,1000.4224,34.9303,269.2519},
	{405,-2037.6155,132.7958,28.4967,1.1959},
	{554,-2058.0310,1116.5924,52.9259,358.3035},
	{426,-2222.9377,-318.7825,35.2293,271.3530},
	{445,-2265.7803,200.6325,34.8841,90.4599},
	{492,-2352.9697,983.2838,50.4104,187.9889},
	{507,-2663.3662,-285.7718,7.1277,45.4428},
	{545,-2344.8416,-124.8412,35.5475,177.8665},
	{540,-2422.1079,956.6570,45.0145,273.0062},
	{482,-2149.5471,-850.6599,31.8722,269.6975},
	{547,-2380.3682,904.6349,45.0093,182.7165},
	{550,-2133.5100,215.8516,34.9431,88.0051},
	{551,-2468.9939,741.5577,34.9424,0.2116},
	{560,-2443.0715,742.1548,34.9756,1.3260},
	{566,-2420.7593,742.0991,34.9467,1.5068},
	{566,-1979.7594,431.4321,24.9566,359.1189},
	{405,-2539.0818,1228.7523,37.3556,32.1050},
	{554,-2072.7380,-86.2725,34.7255,0.3699},
	{426,-2081.0969,-84.3474,34.7284,176.6517},
	{445,-2530.2026,1229.0217,37.3603,32.0471},
	{492,-2093.3647,-84.0303,34.7383,3.3251},
	{507,-2513.5530,1210.9374,37.9264,269.2218},
	{545,-2038.2688,-318.0672,34.8923,277.1726},
	{540,-1739.8186,1370.3749,7.1210,56.9776},
	{482,-1879.7233,-201.0086,16.5959,268.6204},
	{547,-1648.2128,1307.8180,6.9644,315.9977},
	{550,-1641.1713,1301.0726,6.9702,316.1382},
	{551,-1822.5028,-181.5963,8.9688,304.8850},
	{560,-1522.6522,914.2039,6.9755,0.7067},
	{566,-1885.9440,-177.1894,11.6343,273.1362},
	{405,-1754.4772,854.1481,25.2402,89.1936},
	{554,-1816.3250,1311.3502,59.6651,6.5129},
	{426,-2198.5967,-412.3290,34.8833,312.2229},
	{445,-1674.4451,438.3445,7.0973,225.9711},
	{492,-1686.7341,418.8446,7.1089,133.8689},
	{507,-1915.4990,-1231.0449,39.0442,177.2690},
	{545,-1593.0455,858.4213,7.2392,90.0331},
	{540,-1659.7131,823.7580,18.9724,355.2868},
	{482,-1430.8145,836.1859,6.9964,135.2504},
	{547,-1932.2721,584.9741,34.9016,180.6186},
	{550,-1938.3221,585.4367,34.9353,0.9912},
	{551,-1959.5010,586.0233,34.9127,359.3756},
	{560,-1810.7808,612.3569,34.7342,90.2361},
	{554,-1746.6874,158.2828,3.3600,176.9423},
	{426,-1737.7177,-1.9093,3.3411,1.9709},
	{445,-1997.6547,412.3148,34.7324,180.6070},
	{492,-1988.5487,274.3956,34.8867,89.2174},
	{507,-1989.0286,264.0512,34.8956,83.8542},
	{545,-1990.4890,253.5073,34.8963,84.3485},
	{540,-2515.4829,925.8769,64.8585,182.3667},
	{482,-2132.1487,-443.1496,35.0436,180.4687},
	{547,-2051.7166,1265.5660,8.2539,358.4029},
	{551,-2198.7354,-2444.9009,29.0,52.1157},
	{560,-2062.9453,1350.4680,6.9064,180.8428},
	{566,-2234.0432,-2568.5571,31.6305,58.4111},
	{405,-2271.9019,2315.2549,4.6335,270.3059},
	{554,-1903.1940,1377.2800,7.0194,267.9030},
	{426,-1571.4741,-2732.4189,48.2918,323.8274},
	{445,-2486.2866,2363.5720,10.0979,206.8707},
	{492,-1603.7168,-2715.7810,48.3314,230.2204},
	{507,-1883.3522,1255.3145,26.1518,284.7032},
	{545,-1786.8409,1204.1288,24.9149,180.7327},
	{540,-1556.8092,1177.5500,6.9823,88.6408},
	{482,-1559.9998,-2739.9531,48.2650,326.3558},
	{547,-1521.6738,478.1654,7.0159,85.5420},
	{550,-1615.5740,-2696.5061,48.2561,145.0066},
	{551,-1714.9807,395.1194,6.9972,222.0763},
	{560,-1871.7748,-954.6565,31.8210,268.5667},
	{566,-1569.4583,98.6495,3.3661,317.4455},
	{405,-1887.1088,-900.2256,31.8234,270.4749},
	{554,-2802.6831,-1528.0753,139.0021,180.7956},
	{426,-1673.1589,1074.0695,7.7626,3.3732}, //= 255
	{445,-2441.1729,133.1548,34.6221,90.5700},
	{492,-2279.9060,732.4872,49.2787,310.9523},
	{507,-2214.0183,614.2594,35.0018,180.2223},
	{482,-1978.9030,456.2121,28.2365,357.4657},
	{550,-2447.5134,-121.2782,25.9662,93.9408},
	{551,-1721.6322,-559.1102,13.9892,271.1190},
	{560,-2712.0464,-305.9818,6.9247,315.2878},
	{566,-1673.4308,-628.8376,13.9138,162.2298},
	{405,-1258.1068,40.4151,13.8796,135.0181},
	{554,-1442.8499,-187.2847,5.6902,269.3653},
	{426,-1370.8063,-220.2884,5.8234,269.5073},
	{445,-1336.8333,-137.5235,5.7420,90.3342},
	{492,-1433.7583,-247.1532,5.8115,302.2628},
	{507,-1224.0182,48.8356,13.9480,314.1260},
	{545,-1683.4752,-158.6743,14.2899,220.9296},
	{540,-1427.8677,-959.7118,200.6311,265.5663},
	{482,-2240.3767,-1727.6427,480.2751,185.2589},
	{547,-2336.7446,-1587.8500,483.4714,195.2475},
	{550,-1437.2271,-1538.1738,100.3117,87.3429},
	{551,-1800.5289,-1640.7754,24.0332,123.9021},
	{551,-175.9272,1020.2180,19.5160,93.1490},
	{551,-76.9480,1222.1284,19.7295,180.0705},
	{551,-239.6821,1000.0770,19.5253,357.5310},
	{551,-305.4848,1015.9127,19.3682,270.7740},
	{551,65.0815,1220.5809,18.8223,166.4945},
	{551,-303.3315,1035.9254,19.3672,271.3441},
	{551,-248.3633,1135.2465,19.4980,88.5937},
	{551,-176.5996,1222.6281,19.5142,274.6205},
	{551,-110.6799,1132.4226,19.7270,178.5398},
	{551,-89.2255,1222.0529,19.5142,0.1308}
};



// new Float:gJailPlayerSpawns[1][3] = {
// {264.395200,77.564040,1001.039000}
// };

//Round code stolen from mike's Manhunt :P
new gRoundTime = 3600000;                   // Round time - 1 hour
//new gRoundTime = 1200000;					// Round time - 20 mins
//new gRoundTime = 900000;					// Round time - 15 mins
//new gRoundTime = 600000;					// Round time - 10 mins
//new gRoundTime = 300000;					// Round time - 5 mins
//new gRoundTime = 120000;					// Round time - 2 mins
//new gRoundTime = 60000;					// Round time - 1 min

new gPlayerLastRob[MAX_PLAYERS]; //For /rob command
new tickCount = 0;
new tickDelay = 1000;
public CheckLinux() {
     if (GetTickCount() == 0)
          SetTimer("Tick", tickDelay, 1);
     return 1;
}
public Tick() {
     tickCount += tickDelay;
     return 1;
}
public GetTick() {
     if (GetTickCount() == 0)
          return tickCount;
     return GetTickCount();
}

//_____________________________________________________________________________________________________

main()
{
print(" ");
print("==================== ");
print("SF:Fugitive v2.0.3b"); //Version
print("==================== ");
print("By: Denver, Fox, Tosted, DragonMasterNYC, Bl@ster, DodgeR, DaMiAn, Pixels^, JohnSanders and Sneaky.");
//print(""); THIS IS THE FUCKING LINE THAT CRASHED US IN WINDOWS!
print(" ");
}

//----->Chapter><----------------------------------------[On Public Events]---------------------------------------------------

public DollahScoreUpdate()
{
	new LevScore;
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i))
		{
   			LevScore = PlayerInfo[i][pLevel];
			SetPlayerScore(i, LevScore);
			if (LevScore > LevScoreOld)
			{
				LevScoreOld = LevScore;
			}
		}
	}
	return 1;
}

public GameTicks()
{
	Gtickcount = Gtickcount+500;
}

ConvertTicks(ticks)
{
	csecs = 0;
	cmils = 0;
	cmins = 0;
	new tempcsecs = ticks / 1000;//61.59
	cmins = ticks / 60000;//1.0265
	csecs = (ticks - cmins*60000)/1000;
	cmils = (ticks - tempcsecs*1000)/10;
}


public CopScanner()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) && gTeam[i] >= 4 && gPublicEnemy != i && gSuperCop != i && Hidden[i] !=1)
		{
			if(gTeam[i] == 4)
			{
				CrimProxDetector(radardist, i,TEAM_ORANGE1_COLOR,TEAM_ORANGE2_COLOR,TEAM_ORANGE3_COLOR,TEAM_ORANGE4_COLOR,TEAM_ORANGE5_COLOR,TEAM_ORANGE6_COLOR,TEAM_ORANGE7_COLOR,TEAM_ORANGE8_COLOR,TEAM_ORANGE9_COLOR,TEAM_ORANGE10_COLOR);
			}
			if(gTeam[i] == 5)
			{
				CrimProxDetector(radardist, i,TEAM_BALLAS1_COLOR,TEAM_BALLAS2_COLOR,TEAM_BALLAS3_COLOR,TEAM_BALLAS4_COLOR,TEAM_BALLAS5_COLOR,TEAM_BALLAS6_COLOR,TEAM_BALLAS7_COLOR,TEAM_BALLAS8_COLOR,TEAM_BALLAS9_COLOR,TEAM_BALLAS10_COLOR);
			}
			if(gTeam[i] == 6)
			{
				CrimProxDetector(radardist, i,TEAM_GROVE1_COLOR,TEAM_GROVE2_COLOR,TEAM_GROVE3_COLOR,TEAM_GROVE4_COLOR,TEAM_GROVE5_COLOR,TEAM_GROVE6_COLOR,TEAM_GROVE7_COLOR,TEAM_GROVE8_COLOR,TEAM_GROVE9_COLOR,TEAM_GROVE10_COLOR);
			}
			if(gTeam[i] == 7)
			{
				CrimProxDetector(radardist, i,TEAM_VAGOS1_COLOR,TEAM_VAGOS2_COLOR,TEAM_VAGOS3_COLOR,TEAM_VAGOS4_COLOR,TEAM_VAGOS5_COLOR,TEAM_VAGOS6_COLOR,TEAM_VAGOS7_COLOR,TEAM_VAGOS8_COLOR,TEAM_VAGOS9_COLOR,TEAM_VAGOS10_COLOR);
			}
			if(gTeam[i] == 8)
			{
				CrimProxDetector(radardist, i,TEAM_AZTECAS1_COLOR,TEAM_AZTECAS2_COLOR,TEAM_AZTECAS3_COLOR,TEAM_AZTECAS4_COLOR,TEAM_AZTECAS5_COLOR,TEAM_AZTECAS6_COLOR,TEAM_AZTECAS7_COLOR,TEAM_AZTECAS8_COLOR,TEAM_AZTECAS9_COLOR,TEAM_AZTECAS10_COLOR);
			}
			if(gTeam[i] == 9)
			{
				CrimProxDetector(radardist, i,TEAM_NANG1_COLOR,TEAM_NANG2_COLOR,TEAM_NANG3_COLOR,TEAM_NANG4_COLOR,TEAM_NANG5_COLOR,TEAM_NANG6_COLOR,TEAM_NANG7_COLOR,TEAM_NANG8_COLOR,TEAM_NANG9_COLOR,TEAM_NANG10_COLOR);
			}
			if(gTeam[i] == 10)
			{
				CrimProxDetector(radardist, i,TEAM_RIFA1_COLOR,TEAM_RIFA2_COLOR,TEAM_RIFA3_COLOR,TEAM_RIFA4_COLOR,TEAM_RIFA5_COLOR,TEAM_RIFA6_COLOR,TEAM_RIFA7_COLOR,TEAM_RIFA8_COLOR,TEAM_RIFA9_COLOR,TEAM_RIFA10_COLOR);
			}
			if(gTeam[i] == 11)
			{
				CrimProxDetector(radardist, i,TEAM_MAFIA1_COLOR,TEAM_MAFIA2_COLOR,TEAM_MAFIA3_COLOR,TEAM_MAFIA4_COLOR,TEAM_MAFIA5_COLOR,TEAM_MAFIA6_COLOR,TEAM_MAFIA7_COLOR,TEAM_MAFIA8_COLOR,TEAM_MAFIA9_COLOR,TEAM_MAFIA10_COLOR);
			}
			if(gTeam[i] == 12)
			{
				CrimProxDetector(radardist, i,TEAM_RMAFIA1_COLOR,TEAM_RMAFIA2_COLOR,TEAM_RMAFIA3_COLOR,TEAM_RMAFIA4_COLOR,TEAM_RMAFIA5_COLOR,TEAM_RMAFIA6_COLOR,TEAM_RMAFIA7_COLOR,TEAM_RMAFIA8_COLOR,TEAM_RMAFIA9_COLOR,TEAM_RMAFIA10_COLOR);
			}
			if(gTeam[i] == 13)
			{
				CrimProxDetector(radardist, i,TEAM_TRIADS1_COLOR,TEAM_TRIADS2_COLOR,TEAM_TRIADS3_COLOR,TEAM_TRIADS4_COLOR,TEAM_TRIADS5_COLOR,TEAM_TRIADS6_COLOR,TEAM_TRIADS7_COLOR,TEAM_TRIADS8_COLOR,TEAM_TRIADS9_COLOR,TEAM_TRIADS10_COLOR);
			}
			if(gTeam[i] == 14)
			{
				CrimProxDetector(radardist, i,TEAM_BIKERS1_COLOR,TEAM_BIKERS2_COLOR,TEAM_BIKERS3_COLOR,TEAM_BIKERS4_COLOR,TEAM_BIKERS5_COLOR,TEAM_BIKERS6_COLOR,TEAM_BIKERS7_COLOR,TEAM_BIKERS8_COLOR,TEAM_BIKERS9_COLOR,TEAM_BIKERS10_COLOR);
			}
			if(gTeam[i] == 15)
			{
				CrimProxDetector(radardist, i,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR,TEAM_SMITH_COLOR);
			}
		}
	}
}

public Spectator()//~~~~~~~~~~~~~~~~~~~~~~~~~~~~[Camera Recon Views]~~~~~~~~~~~~~~~~~~~~~~~~~~~
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			if(TVMode[i] >= 1 && TVMode[i] <= 5)
			{
				Unspec[i][sCam] = 2;
				TVMode[i]++;
				BestPlayer(i);
			}
			if(TVMode[i] >= 6 && TVMode[i] <= 9)
			{
				Unspec[i][sCam] = 3;
				TVMode[i]++;
				BestPlayer(i);
			}
			if(TVMode[i] == 10)
			{
				TVMode[i] = 1;
				BestPlayer(i);
				Unspec[i][sCam] = random(4);
			}
			if(TVMode[i] >= 11 && TVMode[i] <= 15)
			{
				DMPlayer(i);
				Unspec[i][sCam] = 2;
				TVMode[i]++;
			}
			if(TVMode[i] >= 16 && TVMode[i] <= 19)
			{
				DMPlayer(i);
				Unspec[i][sCam] = 3;
				TVMode[i]++;
			}
			if(TVMode[i] == 20)
			{
				DMPlayer(i);
				TVMode[i] = 11;
				Unspec[i][sCam] = random(4);
			}
			if(TVMode[i] >= 21 && TVMode[i] <= 25)
			{
				RaceSpec(i);
				Unspec[i][sCam] = 2;
				TVMode[i]++;
			}
			if(TVMode[i] >= 26 && TVMode[i] <= 29)
			{
				RaceSpec(i);
				Unspec[i][sCam] = 3;
				TVMode[i]++;
			}
			if(TVMode[i] == 30)
			{
				RaceSpec(i);
				TVMode[i] = 21;
				Unspec[i][sCam] = random(4);
			}
			if(TVMode[i] >= 31 && TVMode[i] <= 35)
			{
				PenDelay(i);
				Unspec[i][sCam] = 2;
				TVMode[i]++;
			}
			if(TVMode[i] >= 36 && TVMode[i] <= 39)
			{
				PenDelay(i);
				Unspec[i][sCam] = 3;
				TVMode[i]++;
			}
			if(TVMode[i] == 40)
			{
				PenDelay(i);
				TVMode[i] = 31;
				Unspec[i][sCam] = random(4);
			}
			if(TVMode[i] >= 41 && TVMode[i] <= 45)
			{
				SpeedDelay(i);
				Unspec[i][sCam] = 2;
				TVMode[i]++;
			}
			if(TVMode[i] >= 46 && TVMode[i] <= 49)
			{
				SpeedDelay(i);
				Unspec[i][sCam] = 3;
				TVMode[i]++;
			}
			if(TVMode[i] == 50)
			{
				SpeedDelay(i);
				TVMode[i] = 41;
				Unspec[i][sCam] = random(4);
			}
			if(Spectate[i] < 253 && Spectate[i] != 255)
			{
				SetPlayerColor(i,COLOR_SPEC);
				TogglePlayerControllable(i, 0);
				new hight;
				new targetid = Spectate[i];
				new Float:px, Float:py, Float:pz, Float:pa;
				if(specflick == 1)
				{
					GetPlayerPos(targetid, CarTracking[i][0], CarTracking[i][1], CarTracking[i][2]);
				}
				px = CarTracking[i][0];py = CarTracking[i][1];pz = CarTracking[i][2];
				if(PlayerInfo[targetid][pInt] == 0)
				{
					SetPlayerInterior(i,0);
				}
				if(PlayerInfo[targetid][pInt] > 0)
				{
					SetPlayerInterior(i,PlayerInfo[targetid][pInt]);
				}
				if(pz > 530.0 && PlayerInfo[targetid][pInt] == 0) //the highest land point in sa = 526.8
				{
					SetPlayerInterior(i,1);
				}
				if(Unspec[i][sCam] <= 1 &&  Unspec[i][sCam] != 10)
				{
					if(GetPlayerState(targetid) != 1)
					{
						SetPlayerCameraPos(i,px,py,pz+40);
					}
					else
					{
						SetPlayerCameraPos(i,px,py,pz+10);
					}
					SetPlayerPos(i, px, py, pz+110);
				}
				else if(Unspec[i][sCam] >= 2 && Unspec[i][sCam] <= 3)
				{
					new dist;
					if(Unspec[i][sCam] == 2)
					{
						if(GetPlayerState(targetid) != 1)
						{
							dist = 6;
							hight = 2;
						}
						else
						{
							dist = 6;
							hight = 1;
						}
					}
					if(Unspec[i][sCam] == 3)
					{
						if(GetPlayerState(targetid) != 1)
						{
							dist = -50;
							hight = 4;
						}
						else
						{
							dist = -10;
							hight = 2;
						}
					}
					if(GetPlayerState(targetid) != 1)
					{
						if(specflick == 2)
						{
							new Float:px2, Float:py2, Float:pz2, Float:tpx,Float:tpy;
							GetPlayerPos(targetid, px2, py2, pz2);
							if(py2 > py && px2 > px)
							{
								tpx = px2-px;
								tpy = py2-py;
								if(tpy > tpx)
								{
									if(tpy-tpx > 10.0)
									{
										CarTracking[i][3] = 0.0;
									}
									else
									{
										CarTracking[i][3] = 315.0;
									}
								}
								if(tpy < tpx)
								{
									if(tpx-tpy > 10.0)
									{
										CarTracking[i][3] = 270.0;
									}
									else
									{
										CarTracking[i][3] = 315.0;
									}
								}
							}
							if(py2 < py && px2 > px)
							{
								tpx = px2-px;
								tpy = py-py2;
								if(tpy > tpx)
								{
									if(tpy-tpx > 10.0)
									{
										CarTracking[i][3] = 180.0;
									}
									else
									{
										CarTracking[i][3] = 225.0;
									}
								}
								if(tpy < tpx)
								{
									if(tpx-tpy > 10.0)
									{
										CarTracking[i][3] = 270.0;
									}
									else
									{
										CarTracking[i][3] = 225.0;
									}
								}
							}
							if(py2 < py && px2 < px)
							{
								tpx = px-px2;
								tpy = py-py2;
								if(tpy > tpx)
								{
									if(tpy-tpx > 10.0)
									{
										CarTracking[i][3] = 180.0;
									}
									else
									{
										CarTracking[i][3] = 135.0;
									}
								}
								if(tpy < tpx)
								{
									if(tpx-tpy > 10.0)
									{
										CarTracking[i][3] = 90.0;
									}
									else
									{
										CarTracking[i][3] = 135.0;
									}
								}
							}
							if(py2 > py && px2 < px)
							{
								tpx = px-px2;
								tpy = py2-py;
								if(tpy > tpx)
								{
									if(tpy-tpx > 10.0)
									{
										CarTracking[i][3] = 0.0;
									}
									else
									{
										CarTracking[i][3] = 45.0;
									}
								}
								if(tpy < tpx)
								{
									if(tpx-tpy > 10.0)
									{
										CarTracking[i][3] = 90.0;
									}
									else
									{
										CarTracking[i][3] = 45.0;
									}
								}
							}
							specflick = 0;
						}
						pa = CarTracking[i][3];
						//	new formated[256];
						//	format(formated, sizeof(formated), "Debug:CarAngle (%f)",CarTracking[i][3]);
						//	SendClientMessageToAll(COLOR_WHITE, formated);
					}
					else
					{
						GetPlayerFacingAngle(targetid,pa);
					}
					if(pa >= 0.0 && pa <= 22.5) //n1
					{
						SetPlayerCameraPos(i, px, py-(dist), pz+hight);
					}
					if(pa >= 332.5 && pa < 0.0) //n2
					{
						SetPlayerCameraPos(i, px, py-(dist), pz+hight);
					}
					if(pa >= 22.5 && pa <= 67.5) //nw
					{
						SetPlayerCameraPos(i, px+(dist/2), py-(dist/2), pz+hight);
					}
					if(pa >= 67.5 && pa <= 112.5) //w
					{
						SetPlayerCameraPos(i, px+(dist), py, pz+hight);
					}
					if(pa >= 112.5 && pa <= 157.5) //sw
					{
						SetPlayerCameraPos(i, px+(dist/2), py+(dist/2), pz+hight);
					}
					if(pa >= 157.5 && pa <= 202.5) //s
					{
						SetPlayerCameraPos(i, px, py+(dist), pz+hight);
					}
					if(pa >= 202.5 && pa <= 247.5)//se
					{
						SetPlayerCameraPos(i, px-(dist/2), py+(dist/2), pz+hight);
					}
					if(pa >= 247.5 && pa <= 292.5)//e
					{
						SetPlayerCameraPos(i, px-(dist), py, pz+hight);
					}
					if(pa >= 292.5 && pa <= 332.5)//e
					{
						SetPlayerCameraPos(i, px-(dist/2), py-(dist/2), pz+hight);
					}
					SetPlayerPos(i, px, py, pz+110);
				}
				else if(Unspec[i][sCam] == 5)
				{
					SetPlayerPos(i, px, py, pz+40);
				}
				else if(Unspec[i][sCam] == 6)
				{
					SetPlayerPos(i, rsx, rsy, rsz+100);
					SetPlayerCameraPos(i, rsx, rsy+4, rsz+2);
				}
				else if(Unspec[i][sCam] == 7)
				{
					SetPlayerPos(i, rmx, rmy, rmz+100);
					SetPlayerCameraPos(i, rmx, rmy+4, rmz+2);
				}
				else if(Unspec[i][sCam] == 8)
				{
					SetPlayerPos(i, rm2x, rm2y, rm2z+100);
					SetPlayerCameraPos(i, rm2x, rm2y+4, rm2z+2);
				}
				else if(Unspec[i][sCam] == 9)
				{
					SetPlayerPos(i, rex, rey, rez+100);
					SetPlayerCameraPos(i, rex, rey+4, rez+2);
				}
				else if(Unspec[i][sCam] == 10)
				{
					new house = Unspec[i][sLocal];
					SetPlayerPos(i,HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]+100);
					SetPlayerCameraPos(i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]+2.0);
					SetPlayerInterior(i,0);
				}
				SetPlayerCameraLookAt(i,px,py,pz);
			}
			if(Spectate[i] == 253)
			{
				TogglePlayerControllable(i, 1);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				Unspec[i][sLocal] = 255;
				SetSpawnInfo(i, 1, PlayerInfo[i][pModel], Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]-1.0, 1.0, -1, -1, -1, -1, -1, -1);
				//SetPlayerPos(i, Unspec[i][sPx], Unspec[i][sPy], Unspec[i][sPz]);
				gTeam[i] = PlayerInfo[i][pTeam];
				SetPlayerToTeamColor(i);
				SpawnPlayer(i);
				Spectate[i] = 255;
				SetPlayerVirtualWorld(i,0);
			}
			if(Spectate[i] == 254)
			{
				TogglePlayerControllable(i, 1);
				SetPlayerInterior(i,Unspec[i][sPint]);
				PlayerInfo[i][pInt] = Unspec[i][sPint];
				PlayerInfo[i][pLocal] = Unspec[i][sLocal];
				SetPlayerPos(i, Unspec[i][sPx],  Unspec[i][sPy], Unspec[i][sPz]);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 256)
			{
				SetPlayerToTeamColor(i);
				Spectate[i] = 255;
			}
			if(Spectate[i] == 257)
			{
				Spectate[i] = 254;
			}
		}
	}
	if(specflick < 2)
	{
		specflick++;
	}
	else
	{
		specflick = 0;
	}
}

//----->Chapter><----------------------------------------[Vehicle Enter]---------------------------------------------------------
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if(IsAdminVehicle(vehicleid)){
		if(PlayerInfo[playerid][pAdmin] <= 103 || AdminAreaAccess[playerid] == 1 || FugitiveCore[playerid] == 1){
			SetVehicleParamsForPlayer(vehicleid,playerid,0,1);
			SendClientMessageToAll(COLOR_RED, "AutoAdmCmd: admin lock on.");
			new string[256],fuckedname[256];
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz+500);
			PlaySoundAll(playerid, 1130, slx, sly, slz+500);
			GetPlayerName(playerid,fuckedname,sizeof(fuckedname));
			format(string,sizeof(string),"%s attempted to use an Admin only vehicle and will drop from the sky.",fuckedname);
			SendClientMessageToAll(COLOR_NOTICE,string);
			SetPlayerColor(playerid, 0xFF0000AA);
			ResetPlayerWeapons(playerid);
			SendClientMessage(playerid, COLOR_WHITE, "SERVER: YOU'RE FUCKED!!!");
		}
	}
	if (gdebug >= 1){printf("DEBUG OnPlayerEnterVehicle(%d, %d, %d)", playerid, vehicleid, ispassenger);}
	if(gTeam[playerid] >= 3)
	{
		if (IsACopCar(vehicleid) && !ispassenger)
		{
          	SetPlayerCriminal(playerid,255, "Stealing A Police Vehicle",0,0);
            if(FlashTime[playerid] == 0){FlashTime[playerid] = 10;}
   		}
		if (IsAnAmbulance(vehicleid) && !ispassenger)
		{
			SetPlayerCriminal(playerid,255, "Stealing An Ambulance",0,0);
			if(FlashTime[playerid] == 0){FlashTime[playerid] = 10;}
		}
	}
	return 1;
}
//~~~~>Chapter><~~~~~~~~~~~~~~~~~~~~[Public Entering Vehicle Types]~~~~~~~~~~~~~~~
IsAPlane(carid)
{
	carid=GetVehicleModel(carid);
	for(new i=0;i<sizeof(planes);i++)
	{
		if(carid==planes[i]){return 1;}
	}
	return 0;
}

IsACopCar(carid)
{
	carid=GetVehicleModel(carid);
	for(new i=0;i<sizeof(police_veh_array);i++)
	{
		if(carid==police_veh_array[i]){return 1;}
	}
	return 0;
}

IsAnAmbulance(carid)
{
	carid=GetVehicleModel(carid);
	if(carid==416){return 1;}
	return 0;
}

IsATruck(carid)
{
	carid=GetVehicleModel(carid);
	if(carid==440||carid==456){return 1;}//added by js
	return 0;
}
new AdminVehicles[]={999/*520,447,432,425*/};//999 fake vec id
IsAdminVehicle(carid)
{
	carid=GetVehicleModel(carid);
	for(new i=0;i<sizeof(AdminVehicles);i++)
	{
		if(carid==AdminVehicles[i]){return 1;}
	}
	return 0;
}
IsACar(carid)
{
	carid=GetVehicleModel(carid);
	for(new i=0;i<sizeof(cars);i++)
	{
		if(carid==cars[i]){return 1;}
	}
	return 0;
}
IsABike(carid)
{
	carid=GetVehicleModel(carid);
	for(new i=0;i<sizeof(bikes);i++)
	{
		if(carid==bikes[i]){return 1;}
	}
	return 0;
}
IsATaxi(carid)
{
	carid=GetVehicleModel(carid);
	if(carid==420 || carid==428){return 1;} //Added by JS
	return 0;
}
/*IsABoat(carid)
{
	carid=GetVehicleModel(carid);
	for(new i=0;i<sizeof(boats);i++)
	{
		if(carid==boats[i]){return 1;}
	}
	return 0;
}*/
//~~~~>Chapter><~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[On PLayer Connect to Server]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


public OnPlayerConnect(playerid){
	gSnoop[playerid]=1;
	gAAlert[playerid]=1;
	new thatname[24];
	GetPlayerName(playerid,thatname,sizeof(thatname));
	//GetPlayerName(playerid, gPlayerName[playerid], MAX_PLAYER_NAME);
	if(strfind(thatname,"%",true,0)!=-1){
	    new string[256];
	    for(new i=0;i<MAX_PLAYERS;i++){
	        if(IsPlayerAdmin(i)||PlayerInfo[i][pAdmin]>=103 || FugitiveCore[playerid] == 1){
	            format(string,sizeof(string),"Player %d detected with percent in their name.",playerid);
	        	SendClientMessage(i,COLOR_YELLOW,string);
	        }
	    }
	    Fuck(playerid);
	    //Ban(playerid);
		Kick(playerid);
	}
	if(IsNumeric(thatname[0])){Kick(playerid);}
	new joinshit[256];
	format(joinshit,sizeof(joinshit),"** Welcome %s to San Andreas Fugitive **",thatname);
	SendClientMessageToAll(COLOR_GRAD1,joinshit);
/*	if(strcmp(thatname,"_",true,0)!=0){
	    new string[256];
	    for(new i=0;i<MAX_PLAYERS;i++){
	        if(IsPlayerAdmin(i)||PlayerInfo[i][pAdmin]>=103  || FugitiveCore[playerid] == 1){
	            format(string,sizeof(string),"Player %d detected with underscore in their name.",playerid);
	        	SendClientMessage(i,COLOR_YELLOW,string);
	        }
	    }
	    //Fuck(playerid);
	    //Ban(playerid);
		Kick(playerid);
	}*/
//	if(!PropertyExists("Timer")){
//		PropertySet("Timer","On");
//		SetTimer("SecTimer",1000,true);
//		SetTimer("ClearHack",60000,true);
//	}
	connect[playerid] = 0;
	if(hack > 5){
		hack = 0;
		Ban(playerid);
		new playername[MAX_PLAYER_NAME];
		GetPlayerName(playerid,playername,sizeof(playername));
		new tmpstr[64];
		format(tmpstr,sizeof(tmpstr),"[S:Anti-Flood] Banned: %s for flood hack",playername);
		print(tmpstr);
		SendClientMessageToAll(COLOR_RED,tmpstr);
	}	
 	if(glocked == 1)
    {
        SendClientMessage(playerid, COLOR_RED, "--------The Server is Closed to Incoming players-------.");
    	SendClientMessage(playerid, COLOR_GRAD1, "Please Contact the Server Administrator for assistance.");
    	SendClientMessage(playerid, COLOR_GRAD1, "San Fierro Fugitive Administration");
    	Kick(playerid);
    	return 1;
    }
    if(gblocked == 1)
    {
        SendClientMessage(playerid, COLOR_RED, "--------The Server is Closed to Incoming players-------.");
    	SendClientMessage(playerid, COLOR_GRAD1, "Please Contact the Server Administrator for assistance.");
    	SendClientMessage(playerid, COLOR_GRAD1, "San Fierro Fugitive Administration");
    	Ban(playerid);
    	return 1;
    }
	if (gdebug >= 1){printf("DEBUG OnPlayerConnect(%d)", playerid);}
	gActivePlayers[playerid]++;
	numplayers++;
	new plname[MAX_PLAYER_NAME];
	new string[MAX_PLAYER_NAME];
	//TelePos[playerid][0] = 0;
	//TelePos[playerid][1] = 0;
	//TelePos[playerid][2] = 0;
	SafeTime[playerid] = 60;
	BetRace[playerid][0] = 255;
	BetRace[playerid][1] = 0;
	BetDm[playerid][0] = 255;
	BetDm[playerid][1] = 0;
	gPlayerFighter[playerid] = 0;
	DmScore[playerid] = 0;
	Mobile[playerid] = 255;
	Spectate[playerid] = 255;
	Unspec[playerid][sLocal] = 255;
    gSkyDive[playerid] = 0;
	TVMode[playerid] = 0;
    gLastCar[playerid] = 0;
    FirstSpawn[playerid] = 0;
	gPlayerLapStatus[playerid] = 0;
	gOoc[playerid] = 0;
	BigEar[playerid] = 0;
	FlashTime[playerid] = 0;
	gDice[playerid] = 0;
	gSpeedo[playerid] = 0;
	gPlayerLogged[playerid] = 0;
	gPlayerAccount[playerid] = 0;
	gPlayerSpawned[playerid] = 0;
	LapCount[playerid] = 0;
	Mute[playerid] = 0;
	StartTime[playerid] = 0;
	gRaceGuy[playerid] = 0;
	AdminAreaAccess[playerid] = 0;
	Contract[playerid] = 0;
	gPlayerMission[playerid] = 0;
	PlayerInfo[playerid][pCash] = dollah;
	KickVote[playerid] = 0;
	VoteKick[playerid] = 0;
	LastVote[playerid] = 255;
	HireCar[playerid] = 999;
	Hidden[playerid] = 0;
	Locator[playerid] = 0;
	PLicence[playerid] = 0;
	Phandcuffs[playerid] = 0;
	Pmegaphone[playerid] = 0;
	PoliceRadio[playerid] = 0;
	gMap[playerid] = 0;
	gPhoneBook[playerid] = 0;
	gGivePermToChangeNick[playerid] = 0;
	pCTicket[playerid] = 0;
	pPTicket[playerid] = 0;
	Stunned[playerid] = 0;
	FugitiveCore[playerid] = 0;
	//PlayerPos[playerid][3] = 1.0;
	//PlayerPos[playerid][4] = 1.0;
	//PlayerPos[playerid][5] = 1.0;
	GiveMoney(playerid,PlayerInfo[playerid][pCash]);//[DIAMOND2]
 	PlayerInfo[playerid][pAccount] = 0;
	PlayerInfo[playerid][pAdmin] = 0;
	PlayerInfo[playerid][pJRank] = 0;
	PlayerInfo[playerid][pJob] = 0;
	PlayerInfo[playerid][pLevel] = 1;
	PlayerInfo[playerid][pExp] = 0;
	PlayerInfo[playerid][gPupgrade] = 0;
	PlayerInfo[playerid][pKills] = 0;
	PlayerInfo[playerid][pCB] = 0;
	PlayerInfo[playerid][pHW] = 0;
	PlayerInfo[playerid][pSR] = 0;
	PlayerInfo[playerid][pSP] = 0;
	PlayerInfo[playerid][pBD] = 0;
	PlayerInfo[playerid][pDB] = 0;
	PlayerInfo[playerid][pFUG] = 0;
	PlayerInfo[playerid][pGun1] = 0;
	PlayerInfo[playerid][pGun2] = 0;
	PlayerInfo[playerid][pGun3] = 0;
	PlayerInfo[playerid][pGun4] = 0;
	PlayerInfo[playerid][pGun5] = 0;
	PlayerInfo[playerid][pGun6] = 0;
	PlayerInfo[playerid][pGun7] = 0;
	PlayerInfo[playerid][pGun8] = 0;
	PlayerInfo[playerid][pLottoXP] = 0;
	PlayerInfo[playerid][pAmmo1] = 200;
	PlayerInfo[playerid][pAmmo2] = 8;
	PlayerInfo[playerid][pAmmo3] = 30;
	PlayerInfo[playerid][pAmmo4] = 30;
	PlayerInfo[playerid][pAmmo5] = 10;
	PlayerInfo[playerid][pAmmo6] = 10;
	PlayerInfo[playerid][pAmmo7] = 5;
	PlayerInfo[playerid][pAmmo8] = 1;
	PlayerInfo[playerid][pSHealth] = 0.0;
	PlayerInfo[playerid][pHealth] = 85.0;
	PlayerInfo[playerid][pPos_x] = 2246.6;
	PlayerInfo[playerid][pPos_y] = -1161.9;
	PlayerInfo[playerid][pPos_z] = 1029.7;
	PlayerInfo[playerid][pInt] = 15;
	PlayerInfo[playerid][pLocal] = 255;
	PlayerInfo[playerid][pTeam] = 1;
	PlayerInfo[playerid][pModel] = 264;
	PlayerInfo[playerid][pCell] = 0;
	//new randphone = 1000 + random(8999);//minimum 1000  max 9999 //giving one at the start
	//PlayerInfo[playerid][pPnumber] = randphone;
	PlayerInfo[playerid][pPnumber] = 0;
	PlayerInfo[playerid][pPhousekey] = 255;
	PlayerInfo[playerid][pPbiskey] = 255;
	PlayerInfo[playerid][pDuty] = 0;
	PlayerInfo[playerid][pLicA] = 0;
	PlayerInfo[playerid][pLicB] = 0;
	PlayerInfo[playerid][pLicJD] = 0;
	PlayerInfo[playerid][pLicPL] = 0;
	PlayerInfo[playerid][pLicFE] = 0;
	PlayerInfo[playerid][pXpir] = 12;
	PlayerInfo[playerid][pFood] = 0;
	PlayerInfo[playerid][pWarnL] = 0;
	PlayerInfo[playerid][pTick] = 0;
	PlayerInfo[playerid][pWantL] = 0;
	PlayerInfo[playerid][pFish] = 0;
	PlayerInfo[playerid][pProb] = 12;
	PlayerInfo[playerid][pWeed] = 0;
	PlayerInfo[playerid][pCoke] = 0;
	PlayerInfo[playerid][pAEdit] = 0;
	PlayerInfo[playerid][pJail] = 0;
	PlayerInfo[playerid][pDisez] = 0;
	PlayerInfo[playerid][pJPnts] = 0;
	PlayerInfo[playerid][pSuspend] = 0;
	PlayerInfo[playerid][pBanTime] = 0;
	PlayerInfo[playerid][pDebitc] = 0;
	PlayerInfo[playerid][pMisc] = 0;
	PlayerInfo[playerid][pAju] = 0;
	PlayerInfo[playerid][pSArmour]=0.0;
	PlayerInfo[playerid][pKillz] = 0;
	PlayerInfo[playerid][pCBz] = 0;
	PlayerInfo[playerid][pHWz] = 0;
	PlayerInfo[playerid][pSRz] = 0;
	PlayerInfo[playerid][pWAz] = 0;
	PlayerInfo[playerid][pPENz] = 0;
	PlayerInfo[playerid][pDeathz] = 0;
	PlayerInfo[playerid][pDMz] = 0;
	PlayerInfo[playerid][pRank] = 0;
	PlayerInfo[playerid][pDrowned] = 0;
	PlayerInfo[playerid][pFell] = 0;
	PlayerInfo[playerid][pBusted] = 0;
	PlayerInfo[playerid][pCrimkill] = 0;
	PlayerInfo[playerid][pGangkill] = 0;
	PlayerInfo[playerid][pCopkill] = 0;
	PlayerInfo[playerid][pDMKill] = 0;
	PlayerInfo[playerid][pDMDeath] = 0;
	PlayerInfo[playerid][pDildoK] = 0;
	PlayerInfo[playerid][pFlowerK] = 0;
	PlayerInfo[playerid][pCaneK] = 0;
	PlayerInfo[playerid][pGrenadeK] = 0;
	PlayerInfo[playerid][pGasK] = 0;
	PlayerInfo[playerid][pMolotovK] = 0;
	PlayerInfo[playerid][pColtK] = 0;
	PlayerInfo[playerid][pSPK] = 0;
	PlayerInfo[playerid][pDeagleK] = 0;
	PlayerInfo[playerid][pPShotK] = 0;
	PlayerInfo[playerid][pSawnK] = 0;
	PlayerInfo[playerid][pSpas12K] = 0;
	PlayerInfo[playerid][pUziK] = 0;
	PlayerInfo[playerid][pMP5K] = 0;
	PlayerInfo[playerid][pAK47K] = 0;
	PlayerInfo[playerid][pM4K] = 0;
	PlayerInfo[playerid][pTec9K] = 0;
	PlayerInfo[playerid][pRifleK] = 0;
	PlayerInfo[playerid][pSRifleK] = 0;
	PlayerInfo[playerid][pRPGK] = 0;
	PlayerInfo[playerid][pHSRLK] = 0;
	PlayerInfo[playerid][pFlameK] = 0;
	PlayerInfo[playerid][pMiniK] = 0;
	PlayerInfo[playerid][pSatchelK] = 0;
	PlayerInfo[playerid][pFireEK] = 0;
	PlayerInfo[playerid][pSprayK] = 0;
	PlayerInfo[playerid][pFistK] = 0;
	PlayerInfo[playerid][pBrassK] = 0;
	PlayerInfo[playerid][pGolfK] = 0;
	PlayerInfo[playerid][pNightSK] = 0;
	PlayerInfo[playerid][pBatK] = 0;
	PlayerInfo[playerid][pShovelK] = 0;
	PlayerInfo[playerid][pPoolCK] = 0;
	PlayerInfo[playerid][pKatanaK] = 0;
	PlayerInfo[playerid][pChainsawK] = 0;
	PlayerInfo[playerid][pIntimK] = 0;
	PlayerInfo[playerid][pKnifeK] = 0;
	PlayerInfo[playerid][pDildoD] = 0;
	PlayerInfo[playerid][pFlowerD] = 0;
	PlayerInfo[playerid][pCaneD] = 0;
	PlayerInfo[playerid][pGrenadeD] = 0;
	PlayerInfo[playerid][pGasD] = 0;
	PlayerInfo[playerid][pMolotovD] = 0;
	PlayerInfo[playerid][pColtD] = 0;
	PlayerInfo[playerid][pSPD] = 0;
	PlayerInfo[playerid][pDeagleD] = 0;
	PlayerInfo[playerid][pPShotD] = 0;
	PlayerInfo[playerid][pSawnD] = 0;
	PlayerInfo[playerid][pSpas12D] = 0;
	PlayerInfo[playerid][pUziD] = 0;
	PlayerInfo[playerid][pMP5D] = 0;
	PlayerInfo[playerid][pAK47D] = 0;
	PlayerInfo[playerid][pM4D] = 0;
	PlayerInfo[playerid][pTec9D] = 0;
	PlayerInfo[playerid][pRifleD] = 0;
	PlayerInfo[playerid][pSRifleD] = 0;
	PlayerInfo[playerid][pRPGD] = 0;
	PlayerInfo[playerid][pHSRLD] = 0;
	PlayerInfo[playerid][pFlameD] = 0;
	PlayerInfo[playerid][pMiniD] = 0;
	PlayerInfo[playerid][pSatchelD] = 0;
	PlayerInfo[playerid][pFireED] = 0;
	PlayerInfo[playerid][pSprayD] = 0;
	PlayerInfo[playerid][pFistD] = 0;
	PlayerInfo[playerid][pBrassD] = 0;
	PlayerInfo[playerid][pGolfD] = 0;
	PlayerInfo[playerid][pNightSD] = 0;
	PlayerInfo[playerid][pBatD] = 0;
	PlayerInfo[playerid][pShovelD] = 0;
	PlayerInfo[playerid][pPoolCD] = 0;
	PlayerInfo[playerid][pKatanaD] = 0;
	PlayerInfo[playerid][pChainsawD] = 0;
	PlayerInfo[playerid][pIntimD] = 0;
	PlayerInfo[playerid][pKnifeD] = 0;
	PlayerInfo[playerid][pLogs] = 0;
	PlayerInfo[playerid][pTmpMission] = 0;
	PlayerInfo[playerid][pTmpRank] = 0;
	PlayerInfo[playerid][pTmpDMkill] = 0;
	PlayerInfo[playerid][pGangRank] = 0;
	PlayerInfo[playerid][pWantedlevel] = 0;
	PlayerInfo[playerid][pLicense] = 0;
	PlayerInfo[playerid][pMuted] = 0;
	PlayerInfo[playerid][pPbiskey2] = 255;
	PlayerInfo[playerid][pPhousekey2] = 255;
	PlayerInfo[playerid][pMotoL] = 0;
	PlayerInfo[playerid][pCDL] = 0;
	PlayerInfo[playerid][pDisconnects] = 0;
	PlayerInfo[playerid][pMHeals] = 0;
	PlayerInfo[playerid][pHealed] = 0;
	PlayerInfo[playerid][pFucked] = 0;
	PlayerInfo[playerid][pGotfucked] = 0;
	PlayerInfo[playerid][pBlown] = 0;
	PlayerInfo[playerid][pGotblown] = 0;
	PlayerInfo[playerid][pWank] = 0;
	PlayerInfo[playerid][pGotwanked] = 0;
	PlayerInfo[playerid][pAnal] = 0;
	PlayerInfo[playerid][pGotanal] = 0;
	PlayerInfo[playerid][pRobs] = 0;
	PlayerInfo[playerid][pGotrobbed] = 0;
	PlayerInfo[playerid][pSaves] = 0;
	PlayerInfo[playerid][aMutes] = 0;
	PlayerInfo[playerid][pMutes] = 0;
	PlayerInfo[playerid][aSlaps] = 0;
	PlayerInfo[playerid][pSlaps] = 0;
	PlayerInfo[playerid][aKicks] = 0;
	PlayerInfo[playerid][pKicks] = 0;
	PlayerInfo[playerid][aScrews] = 0;
	PlayerInfo[playerid][pScrews] = 0;
	ClearCrime(playerid);
	printf("Player Connecting as (%d)", playerid);
	SetPlayerColor(playerid,COLOR_GRAD2);
	GetPlayerName(playerid, plname, sizeof(plname));

	//SetPlayerCameraPos(playerid,1530.9, 686.98, 133.0);
	//SetPlayerCameraLookAt(playerid,1530.5, 686.98, 120.0);
	format(string, sizeof(string), "%s.cer", plname);
	if(fexist(string))
	{
		gPlayerAccount[playerid] = 1;
        SendClientMessage(playerid, COLOR_GREEN, "Welcome to San Fierro Fugitive!");
        SendClientMessage(playerid, COLOR_GRAD2, "Type /help to view game command and /admins to see admins online");
		SendClientMessage(playerid, COLOR_GRAD3, "You can now login by typing /login <password>");
		return 1;
	}
	else
	{
		gPlayerAccount[playerid] = 0;
		SendClientMessage(playerid, COLOR_DGREEN, "Welcome to San Fierro: Fugitive!");
        SendClientMessage(playerid, COLOR_WHITE, "Register at our website/forums www.pen1sf.com");
        SendClientMessage(playerid, COLOR_WHITE, "We also have a Ventrilo Server /vent to find out more, goto our site.");
		SendClientMessage(playerid, COLOR_WHITE, "Type /register <password> to create an account or /help for help");
        format(string, sizeof(string), "~B~San Fierro Fugitive ");
		GameTextForPlayer(playerid, string, 5000, 4);
	    return 1;
	}
	//return 1; Unreachable, good job
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~[ClearCrime]~~~~~~~~~~~~~~~~`
ClearCrime(playerid)
{
	if (gdebug >= 1){printf("DEBUG ClearCrime(%d)", playerid);}
	new string[MAX_PLAYER_NAME];
	format(string, sizeof(string), "********");
	strmid(PlayerCrime[playerid][pBplayer], string, 0, strlen(string), 255);
	strmid(PlayerCrime[playerid][pVictim], string, 0, strlen(string), 255);
	strmid(PlayerCrime[playerid][pAccusing], string, 0, strlen(string), 255);
	strmid(PlayerCrime[playerid][pAccusedof], string, 0, strlen(string), 255);
	return 1;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[Betwin System]~~~~~~~~~~~~~~~`
BetWinner(playerid,contest)
{
	new winname[MAX_PLAYER_NAME];
	new better[MAX_PLAYER_NAME];
	new string[256];
	GetPlayerName(playerid, winname, sizeof(winname));
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			if(contest == 1)
			{
				if(BetRace[i][0] == playerid)
				{
					GiveMoney(i,BetRace[i][1]*2);
					BizzInfo[5][bTakings] -= (BetRace[i][1]*2);
					format(string, sizeof(string), "______-= %s =-_______", BizzInfo[5][bDiscription]);
					SendClientMessage(i, TEAM_VAGOS_COLOR,string);
					format(string, sizeof(string), "You have won $%d on %s in a streetrace", BetRace[i][1]*2, winname);
					SendClientMessage(i, COLOR_WHITE, string);
					SendClientMessage(i, TEAM_VAGOS_COLOR,"_______________________________________");
					PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
					GetPlayerName(i, better, sizeof(better));
					format(string, sizeof(string), "%s won $%d on %s", better, BetRace[i][1]*2, winname);
					printf("%s", string);
					PayLog(string);
				}
				BetRace[i][0] = 255;
				BetRace[i][1] = 0;
			}
			if(contest == 2)
			{
				if(BetDm[i][0] == playerid)
				{
					GiveMoney(i,BetDm[i][1]*2);
					BizzInfo[5][bTakings] -= (BetDm[i][1]*2);
					format(string, sizeof(string), "______-= %s =-_______", BizzInfo[5][bDiscription]);
					SendClientMessage(i, TEAM_VAGOS_COLOR,string);
					format(string, sizeof(string), "   You have won $%d on %s in a deathmatch", BetDm[i][1]*2, winname);
					SendClientMessage(i, COLOR_WHITE, string);
					SendClientMessage(i, TEAM_VAGOS_COLOR,"_______________________________________");
					PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
					GetPlayerName(i, better, sizeof(better));
					format(string, sizeof(string), "%s won $%d on %s", better, BetDm[i][1]*2, winname);
					printf("%s", string);
					PayLog(string);
				}
				BetDm[i][0] = 255;
				BetDm[i][1] = 0;
			}
		}
	}
	return 1;
}
//~~~~>Chapter><~~~~~~~~~~~~~~~~~~~~~~~~~~~[On Player Disconnect]~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public OnPlayerDisconnect(playerid, reason){
	if(connect[playerid] < 3){
		hack++;
	}
	gCuffed[playerid]=0;
	gFrozen[playerid]=0;
	gMon[playerid]=0; //fix for moneycheat problem
	gSnoop[playerid]=0; //turns off snoop to avoid mishaps.
	gRobProtection[playerid]=0; //Rob protection leaves when you do.
//if (gdebug >= 1){printf("DEBUG OnPlayerDisconnect(%d)", playerid);}
	printf("DEBUG OnPlayerDisconnect(%d)1", playerid);
	gActivePlayers[playerid]--;
	numplayers--;
	new partshit[256],thatname[24];
	GetPlayerName(playerid,thatname,sizeof(thatname));
	if(reason==0)
	{
		format(partshit,sizeof(partshit),"** %s[%d] lost connection to San Andreas Fugitive **",thatname,playerid);
	}
	if(reason==1)
	{
		format(partshit,sizeof(partshit),"** %s[%d] has left San Andreas Fugitive **",thatname,playerid);
	}
	if(reason==2)
	{
		format(partshit,sizeof(partshit),"** %s[%d] has been kicked from San Andreas Fugitive **",thatname,playerid);
	}
	SendClientMessageToAll(COLOR_GRAD1,partshit);
	if(gVecSpawn[playerid]!=INVALID_VEHICLE_ID)
	{
	    for(new i=0;i<MAX_PLAYERS;i++)
	    {
	        if(GetPlayerVehicleID(i)==gVecSpawn[playerid])
	        {
	        	RemovePlayerFromVehicle(i);
	        	SetVehicleParamsForPlayer(gVecSpawn[playerid],i,0,1);
       		}
		}
		SetTimer("dVec",5000,0);
		gDelVec[playerid]=gVecSpawn[playerid];
		gVecSpawn[playerid]=INVALID_VEHICLE_ID;
	}
	if (DmHiPlayer == playerid)
	{
		DmHiPlayer = INVALID_PLAYER_ID;
		new tmp1;
		new tmp2;
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(DmScore[i] > tmp1 && IsPlayerConnected(i) == 1)
			{
				DmScore[i] = tmp1;
				i = tmp2;
			}
		}
		if(DmHiPlayer != 255)
		{
			DmHiPlayer = tmp2;
			new dmname[MAX_PLAYER_NAME];
			new string[256];
			GetPlayerName(DmHiPlayer, dmname, sizeof(dmname));
			DmHiScore = DmScore[DmHiPlayer];
			format(string, sizeof(string), ":::DM::News::: %s Is now in the lead with %d ", dmname,DmHiScore);
			BroadCast(COLOR_WHITE, string);
		}
	}
	if (gPublicEnemy == playerid)
	{
		gPublicEnemy = INVALID_PLAYER_ID;
		GiveMoney(playerid, -reward);
		KillTimer(offhook);
		KillTimer(fugitimer);
	}
	OnPlayerUpdate(playerid);
	printf("DEBUG OnPlayerDisconnect(%d)2", playerid);
	printf("DEBUG OnPlayerDisconnect(%d)3", playerid);
	if(HireCar[playerid] != 999)
	{
		gLastDriver[HireCar[playerid]] = 300;
		gCarLock[HireCar[playerid]] = 0;
		UnLockCar(HireCar[playerid]);
	}
	if (gLastCar[playerid] > 0)
	{
		gLastDriver[gLastCar[playerid]] = 300;
		if(PlayerInfo[playerid][pPhousekey] != gLastCar[playerid]-1)
		{
			gCarLock[gLastCar[playerid]] = 0;
			UnLockCar(gLastCar[playerid]);
		}
	}
	printf("DEBUG OnPlayerDisconnect(%d)4", playerid);
	if (gPlayerCheckpointStatus[playerid] == CHECKPOINT_DROPOFF)
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		MissionActive = 0;
		if (gdebug){print("DEBUG MissionActive = 0;");}
	}
	if (gSuperCop == playerid)
	{
		gSuperCop = INVALID_PLAYER_ID;
	}
	
}

public SecTimer(){
	for(new i=0;i<MAX_PLAYERS;i++){
		if(IsPlayerConnected(i)){
			connect[i]++;
		}
	}
}

public ClearHack(){
	hack = 0;
}

public SetPlayerRandomSpawn(playerid)
{
	new rand;
	new playername[32];
	new house = PlayerInfo[playerid][pPhousekey];
	GetPlayerName(playerid, playername, sizeof(playername));
	if(gPlayerFighter[playerid] == 1)
    {
		new string[256];
		gTeam[playerid] = 4;
		SetPlayerToTeamColor(playerid);
		rand = random(sizeof(gRandomDMSpawns)-2)+1;
		SetPlayerPos(playerid, gRandomDMSpawns[rand][0], gRandomDMSpawns[rand][1], gRandomDMSpawns[rand][2]); // Warp the player
		SetPlayerFacingAngle(playerid, 270.0);
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		format(string, sizeof(string), "  ~r~%d~w~|~g~%d",DmScore[playerid],DmHiScore);
		GameTextForPlayer(playerid, string, 5000, 6);
		if(gFightLeader < 1000)
		{
			TogglePlayerControllable(playerid, 0);
		}
		if (gdebug >=0){printf("DEBUG SPAWNED: Playerid:%d Team:%d DMPoint:%d", playerid, gTeam[playerid], rand);}
		return 1;
	}
	if(house !=255)
	{
		/*
		if(gTeam[playerid] <= 2 && strcmp(playername, HouseInfo[house][hOwner], true) == 0 || gTeam[playerid] > 2)
		{
			*/
			SetPlayerToTeamColor(playerid);
			SetPlayerInterior(playerid,HouseInfo[house][hInt]);
			SetPlayerPos(playerid, HouseInfo[house][hExitx], HouseInfo[house][hExity],HouseInfo[house][hExitz]); // Warp the player
			PlayerInfo[playerid][pLocal] = house;
			PlayerInfo[playerid][pInt] = HouseInfo[house][hInt];
			if (gdebug >=1){printf("DEBUG SPAWNED: Playerid:%d Team:%d SpawnPoint:%d", playerid, gTeam[playerid], rand);}
			return 1;
		//}

	}
	if ((gTeam[playerid]) == 2)
	{
		SetPlayerToTeamColor(playerid);
		rand = random(sizeof(gCopPlayerSpawns));
		SetPlayerPos(playerid, gCopPlayerSpawns[rand][0], gCopPlayerSpawns[rand][1], gCopPlayerSpawns[rand][2]); // Warp the player
		SetPlayerFacingAngle(playerid, 270.0);
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		if (gdebug >=1){printf("DEBUG SPAWNED: Playerid:%d Team:%d SpawnPoint:%d", playerid, gTeam[playerid], rand);}
		return 1;
    }
    if ((gTeam[playerid]) == 1)
    {
		SetPlayerToTeamColor(playerid);
		rand = random(sizeof(gMedPlayerSpawns));
		SetPlayerPos(playerid, gMedPlayerSpawns[rand][0], gMedPlayerSpawns[rand][1], gMedPlayerSpawns[rand][2]); // Warp the player
		SetPlayerFacingAngle(playerid, 270.0);
		SetPlayerInterior(playerid,0);
		PlayerInfo[playerid][pInt] = 0;
		if (gdebug >=1){printf("DEBUG SPAWNED: Playerid:%d Team:%d SpawnPoint:%d", playerid, gTeam[playerid], rand);}
		return 1;
	}
    else
    {
		SetPlayerToTeamColor(playerid);
		rand = random(sizeof(gRandomPlayerSpawns));
		SetPlayerPos(playerid, gRandomPlayerSpawns[rand][0], gRandomPlayerSpawns[rand][1], gRandomPlayerSpawns[rand][2]); // Warp the player
		SetPlayerFacingAngle(playerid, 270.0);
		SetPlayerInterior(playerid,0); //willie
		PlayerInfo[playerid][pInt] = 0;
		if (gdebug >=1){printf("DEBUG SPAWNED: Playerid:%d Team:%d SpawnPoint:%d", playerid, gTeam[playerid], rand);}
		return 1;
	}
	//return 1; UNREACHABLE
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[On Player Death]~~~~~~~~~~~~~~~~~~~~~

public OnPlayerDeath(playerid, killerid, reason)
{
	if (gdebug >=0){printf("OnPlayerDeath Playerid:%d killerid:%d reason:%d", playerid, killerid, reason);}
	new name[MAX_PLAYER_NAME];
	new string[256];
	new dmessage[128];
	new deathreason[20];
	new playercash;
	new victimteam;
	new Float:px,Float:py,Float:pz;
	//new killerteam;
	victimteam = (gTeam[playerid]);
	SetPlayerWantedLevel(playerid,0);
	//killerteam = (gTeam[killerid]);
	gPlayerSpawned[playerid] = 0;
	GetPlayerName(playerid, name, sizeof(name));
	PlayerInfo[playerid][pLocal] = 255;
	GetPlayerPos(playerid, px, py, pz);
	if(PlayerToPoint(50.0, playerid, rsx,rsy,rsz) && MissionActive < 7)
	{
		new kilname [MAX_PLAYER_NAME];
		GetPlayerName(killerid, kilname, sizeof(kilname));
		format(string, sizeof(string), ":::Race::News::: %s Has Been Arrested For Race Start Murder", kilname);
		BroadCast(COLOR_WHITE, string);
		SetPlayerInterior(killerid,6);
		LapCount[killerid] = 0;
		PlayerInfo[killerid][pInt] = 6;
		SetPlayerPos(killerid,264.395200,77.564040,1001.039000);
		SendClientMessage(killerid, COLOR_DBLUE,"**Officer: You have been Arrested for killing at race start (type /time).");
		PlayJailSound(1153 , 1154, 2000,264.395200, 77.564040, 1001.039000);
		JailTime[killerid] = 60;
		return 1;
	}
	if(killerid != 255)
	{
		if(GetPlayerState(killerid) == 2 && playerid != gPublicEnemy)
		{
			SendClientMessage(killerid, COLOR_RED, "DriveBy Kill, You get nothing. Kill on foot for $$$");
			KillTimer(fugitimer);
			return 1;
		}
	}
	if(gPlayerFighter[playerid] == 1)
	{
		DmScore[playerid]--;
		if(killerid != INVALID_PLAYER_ID)
		{
			DmScore[killerid]++;
			if(DmScore[killerid] > DmHiScore)
			{
				new dmname[MAX_PLAYER_NAME];
				GetPlayerName(killerid, dmname, sizeof(dmname));
				DmHiPlayer = killerid;
				DmHiScore = DmScore[killerid];
				format(string, sizeof(string), ":::DM::News::: %s Is now in the lead with %d ", dmname,DmHiScore);
				BroadCast(COLOR_WHITE, string);
				format(string, sizeof(string), "  ~g~%d~w~|~g~%d",DmScore[killerid],DmHiScore);
			}
			else
			{
				format(string, sizeof(string), "  ~r~%d~w~|~g~%d",DmScore[killerid],DmHiScore);
			}
			GameTextForPlayer(killerid, string, 5000, 6);
		}
	}
	GetWeaponName(reason, deathreason, 20);
	format(dmessage, sizeof(dmessage), "Wasted");
	if (strlen(deathreason) == 0)
	{
		format(deathreason, sizeof(deathreason), "Fists");
	}
	if (reason == 41)
	{
		format(deathreason, sizeof(deathreason), "Pepper Spray");
	}
	if (gPlayerCheckpointStatus[playerid] == CHECKPOINT_DROPOFF)
	{
		if (gdebug){print("DEBUG test6");}
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		new check;
		check = gPlayerCheckpointStatus[playerid];
		if (gdebug){printf("DEBUG check %d" ,check);}
		OnPlayerDropBriefCase(playerid);

	}
	if (gPlayerCheckpointStatus[playerid] > 4 && gPlayerCheckpointStatus[playerid] < 11)//foxtemp
	{
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		LapCount[playerid] = 0;
	}
	/*
	if((PlayerInfo[playerid][pPhousekey]+1 != gLastCar[playerid] && gLastCar[playerid] != 0) || HireCar[playerid] != gLastCar[playerid] && gLastCar[playerid] != 0)
	{
		printf("DEBUG PlayerInfo[playerid][pPhousekey](%d) gLastCar[playerid]-1(%d) HireCar[playerid](%d)", PlayerInfo[playerid][pPhousekey],gLastCar[playerid]-1,HireCar[playerid]);
		UnLockCar(gLastCar[playerid]);
		gCarLock[gLastCar[playerid]] = 0;
		gLastDriver[gLastCar[playerid]] = 300;
		gLastCar[playerid] = 0;
	}
	*/
	new caller = Mobile[playerid];
	if(caller != 255)
	{
		if(caller < 255)
		{
			SendClientMessage(caller,  COLOR_GRAD2, "<<>Your Call has been Dropped<>>");
			CellTime[caller] = 0;
			CellTime[playerid] = 0;
			Mobile[caller] = 255;
		}
		Mobile[playerid] = 255;
		CellTime[playerid] = 0;
	}
	ClearCrime(playerid);
	if (killerid == INVALID_PLAYER_ID)
	{
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && gTeam[i] != gTeam[playerid] && CrimInRange(20.0, playerid,i) && GetPlayerState(i) != 2)
			{
				killerid = i;
				format(deathreason, sizeof(deathreason), "Intimidation");
			}
		}
	}
	if (killerid == INVALID_PLAYER_ID)
	{
		if ((gTeam[playerid]) == 0){return 1;}
		new slice = ((PlayerInfo[playerid][pLevel]*deathcost)+(basedcost)); //1k +your level
		GiveMoney(playerid, -slice);
		format(string, sizeof(string), "MEDIC: Your have been Charged $%d for Medical Bills, Have A Great Day.", slice);
		SendClientMessage(playerid, TEAM_CYAN_COLOR, string);
		switch (reason)
		{
			case WEAPON_DROWN:
			{
				format(string, sizeof(string), "-] %s drowned [-", name);
				BroadCast(COLOR_RED, string);
				GameTextForPlayer(playerid, dmessage, 5000, 2);
			}
			case WEAPON_COLLISION:
			{
				format(string, sizeof(string), "-] %s fell to his death [-", name);
				BroadCast(COLOR_RED, string);
				GameTextForPlayer(playerid, dmessage, 5000, 2);
			}
			default:
			{
				/*
				if (strlen(deathreason) > 0)
				{
					format(string, sizeof(string), ".: %s died. (%s) :.", name, deathreason);
				}*/
			//	else
			//	{
				format(string, sizeof(string), ".: %s has died :.", name);
			//	}

				BroadCast(COLOR_RED, string);
				GameTextForPlayer(playerid, dmessage, 5000, 2);
			}
		}
		if (gTeam[playerid] == 4)
		{
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
		}
		if (gPublicEnemy == playerid)
		{
			if(killerid == 255)
			{
				gPublicEnemy = INVALID_PLAYER_ID;
				GiveMoney(playerid, -preward);
				format(string, sizeof(string), "%s, The Ambulance Driver Took Your Last Payment $%d, Sender: 8 Ball (555)",name,preward);
				RingTone[playerid] = 20;
				SendClientMessage(playerid, COLOR_YELLOW, string);
				KillTimer(offhook);
				KillTimer(fugitimer);
				new tmpmed;
				for(new i = 0; i <= MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1 && gTeam[i] == TEAM_CYAN)
					{
						tmpmed++;
					}
				}
				for(new i = 0; i <= MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1 && gTeam[i] == TEAM_CYAN)
					{
						GiveMoney(i, preward/tmpmed);
					}
				}
			}
		}
		return 1;
	}
	if (Contract[playerid] > 0)
	{
		new killer[MAX_PLAYER_NAME];
		GetPlayerName(killerid, killer, sizeof(killer));
		GiveMoney(killerid, Contract[playerid]);
		format(string,128,"-=- %s has fulfilled the contract on %s and collected $%d -=-",killer,name,Contract[playerid]);
		BroadCast(COLOR_YELLOW, string);
		PayLog(string);
		Contract[playerid] = 0;
	}
	if (victimteam >= 4)
	{
		new killer[MAX_PLAYER_NAME];
		GetPlayerName(killerid, killer, sizeof(killer));
		new slice = ((PlayerInfo[playerid][pLevel]*deathcost)+(basedcost)); //1k +your level
		playercash = GetPlayerMoney(playerid);
		if(SafeTime[playerid] <= 0 || gPlayerFighter[playerid] == 1)
		{
			if(gTeam[killerid] != gTeam[playerid])
			{
				if(GetPlayerState(killerid) == 1)
				{
					PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills]+2;
				}
				else
				{
					PlayerInfo[killerid][pKills]++;
				}
				PlayerInfo[playerid][pKills]--;
				if(PlayerInfo[killerid][pKills] >= 30)
				{
					PlayerInfo[killerid][pExp]++;
					PlayerInfo[killerid][pKills] = 0;
					SendClientMessage(killerid, COLOR_DGREEN, "You Gained Experience! +1");
				}
			}
		}
		if (strlen(deathreason) > 0)// patch
		{
			if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill) || gTeam[killerid] == gTeam[playerid])//med kill criminal
			{
				format(string, sizeof(string), "[- %s murdered %s. (%s) -]", killer, name, deathreason);
			}
			else
			{
				format(string, sizeof(string), "[- %s murdered %s. (%s) for $%d -]", killer, name, deathreason, slice);
			}
			if (gdebug){print("DEBUG Deathtest3");}

		}
		else
		{
			if (gdebug){print("DEBUG Deathtest4");}
			if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill || gTeam[killerid] == gTeam[playerid]))
			{
				format(string, sizeof(string), "[- %s murdered %s -]", killer, name);
			}
			else
			{
				format(string, sizeof(string), "[- %s murdered %s for $%d -]", killer, name, slice);
			}
		}
		if ((gTeam[killerid]) == 2)//cops kill criminal
		{
			format(string, sizeof(string), "- %s was arrested by Officer %s (%s) and fined $%d -", name, killer, deathreason, slice);
			format(dmessage, sizeof(dmessage), "Busted");
			PlayerInfo[killerid][pSP]++;
			if(PlayerInfo[killerid][pSP] >= 20)
			{
				SendClientMessage(killerid, COLOR_YELLOW, "POLICE: You've gained +1 Exp!");
   				PlayerInfo[killerid][pSP] = 0;
   				PlayerInfo[killerid][pExp]++;
  			}
			if(IsACopCar(gLastCar[killerid]))
			{
				GiveMoney(killerid, 2000);
				SendClientMessage(killerid, TEAM_BLUE_COLOR, "Police Vehicle Bonus!");
			}
		}
		if (((gTeam[killerid]) == 1) || ((gTeam[killerid]) == 3 && civnokill) || (gTeam[killerid] == gTeam[playerid] && gTeam[playerid] != 4))
		{
			slice = 0;
		}
		if (((gTeam[killerid]) != 4) && ((gTeam[killerid]) == gTeam[playerid]))//no team kill
		{
			slice = 0;
		}
		if (playercash > 0)
		{
			if (gdebug){print("DEBUG Deathtest1");}
			GiveMoney(playerid, -slice);
		}
		else
		{
			if (gdebug){print("DEBUG Deathtest2");}
			slice = slice+500;
		}
		GiveMoney(killerid, slice);
		GameTextForPlayer(playerid, dmessage, 5000, 2);
		PlayerPlaySound(killerid, 1083, 0.0, 0.0, 0.0);
		if (((gTeam[killerid]) == 3) && reason != 49)
		{
			SetPlayerCriminal(killerid,255, "First Degree Murder",0,0);
			if(FlashTime[killerid] == 0){FlashTime[killerid] = 10;}
		}
		else if (((gTeam[killerid]) == 3) && reason == 49)
		{
			SetPlayerCriminal(killerid,255, "Hit And Run",0,0);
			if(FlashTime[killerid] == 0){FlashTime[killerid] = 10;}
		}
		if (gPublicEnemy == playerid)
		{
			//SendClientMessage(killerid, TEAM_BLUE_COLOR, "Police HQ: You Have Arrested Public Enemy No.1, $5000 Bonus PayCheck");
			GiveMoney(killerid, preward);
			GiveMoney(playerid, -preward);
			KillTimer(offhook);
			KillTimer(fugitimer);
			format(string, sizeof(string), "%s, %s Stole Your Last Payment $%d, Sender: 8 Ball (555)", name, killer,preward);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			RingTone[playerid] = 20;
			format(string, sizeof(string), "[=-Fugitive %s was killed by %s (%s) and lost $%d-=]", name, killer,  deathreason, slice);
			PlayerInfo[killerid][pFUG]++;
			gPublicEnemy=INVALID_PLAYER_ID;
			if(PlayerInfo[killerid][pFUG] >= 4)
			{
				PlayerInfo[killerid][pExp]++;
				PlayerInfo[killerid][pFUG] = 0;
				SendClientMessage(killerid, COLOR_DGREEN, "Your gaining expierience +1");
			}
			PlayerPlayMusic(killerid);
		}
		BroadCast(COLOR_RED, string);
		if (gPublicEnemy != playerid)
		{
			if(gPlayerFighter[killerid] != 1)
			{
				format(string, sizeof(string), "~g~$%d", slice);
				GameTextForPlayer(killerid, string, 5000, 1);
			}
		}
		else
		{
			format(string, sizeof(string), "~p~Fugitive ~w~Apprehended~n~You Take The ~g~$%d", preward);
			GameTextForPlayer(killerid, string, 5000, 1);
			gPublicEnemy = INVALID_PLAYER_ID;
			KillTimer(fugitimer);
		}
	}
	else if (victimteam == 2)
	{
		new killer[MAX_PLAYER_NAME];
		GetPlayerName(killerid, killer, sizeof(killer));
		// Cop kill
		if (gdebug){print("DEBUG test5");}
		PlayerInfo[playerid][pKills]--;
		if (gTeam[killerid] == 2)//cops kill cop
		{
			format(string,128,"[> Officer %s murdered Officer %s (%s) and was sued for $%d <]",killer,name,deathreason,suecost);
			PlayerInfo[killerid][pProb]--;
			if(PlayerInfo[killerid][pProb] <= 0)
			{
				SendClientMessage(killerid, COLOR_YELLOW, "POLICE: Youve Been Fired!");
            	PlayerInfo[killerid][pSP] = 0;
            	PlayerInfo[killerid][pExp]++;
	    	}
			PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
			GiveMoney(killerid, -suecost);
			GiveMoney(playerid, suecost+1000);//+100pays hospital bill
		}
		else
		{
			format(string,128,"[> %s murdered Officer %s (%s) <]",killer,name,deathreason);
	    }
		if (gTeam[killerid] == 3)
		{
			if(reason != 49)
			{
				SetPlayerCriminal(killerid,255, "First Degree Murder",0,0);
			}
			else if (reason == 49)
			{
				SetPlayerCriminal(killerid,255, "Hit And Run",0,0);
			}
			if(FlashTime[killerid] == 0){FlashTime[killerid] = 10;}
		}
		if(gTeam[killerid] >= 5 && SafeTime[playerid] <= 0)
		{
			if(GetPlayerState(killerid) == 1)
			{
				PlayerInfo[killerid][pKills] = PlayerInfo[killerid][pKills]+2;
			}
			else
			{
				PlayerInfo[killerid][pKills]++;
			}
			if(PlayerInfo[killerid][pKills] >= 30)
			{
				PlayerInfo[killerid][pExp]++;
				PlayerInfo[killerid][pKills] = 0;
				SendClientMessage(killerid, COLOR_DGREEN, "You are gaining Experience +1");
			}
		}
		BroadCast(COLOR_RED, string);
	}
	else if (victimteam == 3)
	{
		if (gdebug){print("DEBUG test6");}
		new killer[MAX_PLAYER_NAME];
		GetPlayerName(killerid, killer, sizeof(killer));
		// Civ kill
		if ((gTeam[killerid]) == 2)//cops kill civ
		{
			format(string,128,"[> Officer %s murdered %s (%s) and was sued for $%d <]",killer,name,deathreason,suecost);
			PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
			GiveMoney(killerid, -suecost);
			GiveMoney(playerid, suecost+100);//+100pays hospital bill
		}
		else
		{
			format(string,128,".: %s murdered %s (%s) :.",killer,name,deathreason);
	    }
		if (((gTeam[killerid]) == 3 || (gTeam[killerid]) == 1) && reason != 49)
		{
			SetPlayerCriminal(killerid,255, "First Degree Murder",0,0);
			if(FlashTime[killerid] == 0){FlashTime[killerid] = 10;}
		}
		else if (((gTeam[killerid]) == 3 || (gTeam[killerid]) == 1) && reason == 49)
		{
			SetPlayerCriminal(killerid,255, "Hit And Run",0,0);
			if(FlashTime[killerid] == 0){FlashTime[killerid] = 10;}
		}
	    BroadCast(COLOR_RED, string);
	}
	else if (victimteam == 1)
	{
		if (gdebug){print("DEBUG test6");}
		new killer[MAX_PLAYER_NAME];
		GetPlayerName(killerid, killer, sizeof(killer));
		// Civ kill
		if ((gTeam[killerid]) == 2)//cops kill civ
		{
			format(string,128,"[> Officer %s murdered Paramedic %s (%s) and was sued for $%d <]",killer,name,deathreason,suecost);
			PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
			GiveMoney(killerid, -suecost);
			GiveMoney(playerid, suecost+100);//+100pays hospital bill
		}
		else if ((gTeam[killerid]) == 1)//med kill civ
		{
			format(string,128,"[> Paramedic %s murdered %s (%s) and was sued for $%d <]",killer,name,deathreason,suecost);
			PlayerPlaySound(killerid, 1084, 0.0, 0.0, 0.0);
			GiveMoney(killerid, -suecost);
			GiveMoney(playerid, suecost+100);//+100pays hospital bill
		}
		else
		{
			format(string,128,"[> %s murdered %s (%s) <]",killer,name,deathreason);
	    }
		if (((gTeam[killerid]) == 4) && reason != 49)
		{
			SetPlayerCriminal(killerid,255, "First Degree Murder",0,0);
			if(FlashTime[killerid] == 0){FlashTime[killerid] = 10;}
		}
		else if (((gTeam[killerid]) == 3) && reason == 49)
		{
			SetPlayerCriminal(killerid,255, "Hit And Run",0,0);
			if(FlashTime[killerid] == 0){FlashTime[killerid] = 10;}
		}
	    BroadCast(COLOR_RED, string);
	}
	if (gSuperCop == playerid)
	{
		gSuperCop = INVALID_PLAYER_ID;
	}
	if(GetPlayerState(killerid) == 1)
	{
		lastkiller = killerid;
	}
	killerid = INVALID_PLAYER_ID;
	SetPlayerColor(playerid,COLOR_GRAD2);
	return 1;
}
//~~~~~~~~~>Chapter><~~~~~~~~~~~~~~~~~~~~~~~~~[Public On Player Spawn]~~~~~~~~~~~~~~~~~~~~~~~
public OnPlayerSpawn(playerid)
{//check for this
	SetPlayerMapIcon(playerid,0,BizzInfo[4][bEntrancex], BizzInfo[4][bEntrancey], BizzInfo[4][bEntrancez],52,0x0000FFFF);
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 0)
		{
			SetPlayerMapIcon(playerid, h+1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],31,0x0000FFFF);
		}
		if(HouseInfo[h][hOwned] == 1)
		{
		    if(PlayerInfo[playerid][pPhousekey]==h){
				SetPlayerMapIcon(playerid,h+1,HouseInfo[h][hEntrancex],HouseInfo[h][hEntrancey],HouseInfo[h][hEntrancez],35,0x0000FFFF);
			}
			else{
				SetPlayerMapIcon(playerid, h+1, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez],32,0x0000FFFF);
			}
		}
	}
	if(gPlayerFighter[playerid] == 1){SetPlayerVirtualWorld(playerid,1);}
	else{
	    if(PlayerInfo[playerid][pPhousekey]<34){SetPlayerVirtualWorld(playerid,1);}
		else if(PlayerInfo[playerid][pPhousekey]<68&&PlayerInfo[playerid][pPhousekey]>33){SetPlayerVirtualWorld(playerid,2);}
		else if(PlayerInfo[playerid][pPhousekey]>68&&PlayerInfo[playerid][pPhousekey]!=255){SetPlayerVirtualWorld(playerid,3);}
		else{SetPlayerVirtualWorld(playerid,0);}
	}
	GangZoneShowForPlayer(playerid,gJohnGangZone,0x3344FFAA);
	GangZoneShowForPlayer(playerid,aarea,0xFF0000AA);
	for(new i=0;i<MAX_VEHICLES;i++)
	{
	    if(IsAdminVehicle(i)){
			SetVehicleParamsForPlayer(i,playerid,0,1);
		}
	}
	SetTimer("StopMusic", 0, 0);
	if (gdebug >=1){printf("OnPlayerSpawn Playerid:%d", playerid);}
	if (teamcarlock)
	{
		TeamLockDoors(playerid);
	}
	if(gTeam[playerid]>3){SetPlayerWantedLevel(playerid,1);}
	InitLockDoors(playerid);
	if(accountplay)
	{
		if (gdebug >=1){printf("accountplay");}
		if (gPlayerAccount[playerid] == 0)
		{
			gTeam[playerid] = 0;
			GameTextForPlayer(playerid, "~w~Welcome.~n~In order to play you need to create an account, type ~n~~r~/register (password)~w~ to register", 20000, 3);
			//SetPlayerInterior(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
			SetPlayerPos(playerid,198.5,162.5,1003.0);
			// airport
			PlayJailSound(1153 , 1154, 2000,264.395200, 77.564040, 1001.039000);
			gPlayerSpawned[playerid] = 1;
    		return 1;
		}
		if (gPlayerLogged[playerid] == 0)
		{
			gTeam[playerid] = 0;
			GameTextForPlayer(playerid, "~w~In order to play you need to log in to your account, type ~n~~g~/login (password)~w~ to log in", 20000, 3);
			//SetPlayerInterior(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 3;
			SetPlayerPos(playerid,198.5,162.5,1003.0);
			// airport
			PlayJailSound(1153 , 1154, 2000,264.395200, 77.564040, 1001.039000);
			gPlayerSpawned[playerid] = 1;
    		return 1;
		}
	}
	if (gPlayerSpawned[playerid] == 0)
	{
		gTeam[playerid] = PlayerInfo[playerid][pTeam];
		if (gTeam[playerid] == 2 && forceteam && CopCheck(playerid))
		{
			gTeam[playerid] = 3;
			PlayerInfo[playerid][pTeam] = 3;
            SetPlayerRandomSpawn(playerid);
			SendClientMessage(playerid, COLOR_RED, "SERVER: You Have been Fired From the Police Dept.");
		}
  		if(gTeam[playerid] == 2 && PlayerInfo[playerid][pRank] < 1)
		{
			gTeam[playerid] = 3;
			PlayerInfo[playerid][pTeam] = 3;
            SetPlayerHealth(playerid, 0.0);
			SetPlayerRandomSpawn(playerid);
			SendClientMessage(playerid, COLOR_BLUE, "You Require a Badge to be on the Force");
			SendClientMessage(playerid, COLOR_WHITE, "Visit www.pen1sf.com or www.specialforcespd.com");
			SendClientMessage(playerid, COLOR_WHITE, "Apply And Join the San Fierro Police Dept!");
		}
  		if (gTeam[playerid] == 1 && forceteam && MedCheck(playerid))
		{
			gTeam[playerid] = 3;
			PlayerInfo[playerid][pTeam] = 3;
			SetPlayerRandomSpawn(playerid);
			SendClientMessage(playerid, COLOR_RED, "SERVER: Your are not allowed to be a paramedic.");
		}
		if (gTeam[playerid] == 4) //medic / criminal reset team
		{
			gTeam[playerid] = PlayerInfo[playerid][pTeam];
		}

		SetPlayerRandomSpawn(playerid);
		if (gdebug){printf("DEBUG id = %d gTeam = %d",playerid,gTeam[playerid]);}


	}
	return 1;
}
//==============Carl
//---------------------------------------CHECKPOINT----------------------------------------------------
PayLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("pay.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

BanLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("ban.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
VecLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("vec.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
PaydayLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("payday.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

AstatLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("astat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

/*CmdLog(string[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",string);
	new File:hFile;
	hFile = fopen("cmd.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}*/

public PrePlayerNewMission()
{
	if (gdebug >=1){printf("PrePlayerNewMission");}
	CheckpointReset();
	if (MissionActive == 12)
	{
		gFighters=0;
		gFightLeader=0;
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				DmScore[i] = 0;
				if(gPlayerFighter[i] == 1)
				{
					gPlayerFighter[i] = 0;
					TogglePlayerControllable(i, 1);
					SetPlayerRandomSpawn(i);
				}
			}
		}
	}
	if (MissionActive > 4 && MissionActive <= 7 )
	{
	    for(new i = 0; i <= MAX_PLAYERS; i++)
		{
		/*	if(IsPlayerConnected(i))
			{
				gPlayerLaps[i] = 0;
				gRaceStartTime[i] = 0;
				DisablePlayerRaceCheckpoint(i);
			}*/
		}
		if(gRaceStarted){
			EndRace();
		}
	}
	if (MissionActive > 8 && MissionActive < 12)
	{
		if(MissionActive != 0)
		{
			printf("DEBUG: Bad Hotwire: stealcar = %d, stealcardest = %d",stealcar,stealcardest);
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(stealcar != -1)
					{
						SetVehicleParamsForPlayer(stealcar,i,0,0);
						SetVehicleToRespawn(stealcar);
						stealcar = -1;
					}
				}
			}
		}
	}

	if (briefcase == 0 && hotwire == 0 && streetrace == 0 && deathmatch == 0)
	{
		MissionActive = 255;
		if (gdebug){print("DEBUG MissionActive = 255");}
		return 1;
	}
	if (briefcase == 0 && hotwire == 0 && streetrace == 1 && deathmatch == 0)
	{
		MissionActive = 4;
		if (gdebug){print("DEBUG MissionActive = 4");}
		SetPlayerNewMission();
		return 1;
	}
	if (briefcase == 0 && hotwire == 0 && streetrace == 0 && deathmatch == 1)
	{
		MissionActive = 12;
		if (gdebug){print("DEBUG MissionActive = 12");}
		SetPlayerNewMission();
		return 1;
	}
	if (MissionActive == 0)
	{
		if (briefcase == 0)
		{
			MissionActive = 4;
			if (gdebug){print("DEBUG MissionActive = 4");}
		}
		else
		{
			MissionActive = 0;
			if (gdebug){print("DEBUG MissionActive = 0");}
		}
		SetPlayerNewMission();
		return 1;
	}
	if (MissionActive > 0 && MissionActive <= 4)
	{
		if (streetrace == 0)
		{
			MissionActive = 8;
			if (gdebug){print("DEBUG MissionActive = 8");}
		}
		else
		{
			MissionActive = 4;
			if (gdebug){print("DEBUG MissionActive = 4");}
		}
		SetPlayerNewMission();
		return 1;
	}
	if (MissionActive > 4 && MissionActive <= 8 )
	{
		if (hotwire == 0)
		{
			MissionActive = 12;
			if (gdebug){print("DEBUG MissionActive = 12");}
		}
		else
		{
			MissionActive = 8;
			if (gdebug){print("DEBUG MissionActive = 8");}
		}
		SetPlayerNewMission();
		return 1;
	}
	if (MissionActive > 8 && MissionActive <= 12)
	{
		if (deathmatch == 0)
		{
			MissionActive = 0;
			if (gdebug){print("DEBUG MissionActive = 0");}
		}
		else
		{
			MissionActive = 12;
			if (gdebug){print("DEBUG MissionActive = 12");}
		}
		SetPlayerNewMission();
		return 1;
	}
	if (MissionActive == 13)
	{
		if (briefcase == 0)
		{
			MissionActive = 4;
			if (gdebug){print("DEBUG MissionActive = 4");}
		}
		else
		{
			MissionActive = 0;
			if (gdebug){print("DEBUG MissionActive = 0");}
		}
		SetPlayerNewMission();
		return 1;
	}
	return 1;
}
public SetPlayerNewMission()
{
	if (gdebug >=1){printf("SetPlayerNewMission");}
	if(Briefcasepickup){DestroyPickup(Briefcasepickup);}
	switch (MissionActive)
	{
		case 0:
		{
			new rando = random(11);
			if (rando == 1)
			{
				cwx = -2418.83;
				cwy = 969.51;
				cwz = 45.30;
				format(objstore, sizeof(objstore), "It's Payday at the Gas Station in Juniper Hill , Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-14 Juniper Hill Gas Station.");
			}
			else if(rando == 2)
			{
				cwx = -1498.02;
				cwy = 925.16;
				cwz = 7.19;
				format(objstore, sizeof(objstore), "It's Payday at the San Andreas Bank in Downtown, Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-10 at The San Andreas Bank.");
			}
			else if(rando == 3)
			{
				cwx = -2444.78;
				cwy = 753.17;
				cwz = 35.17;
				format(objstore, sizeof(objstore), "It's Payday at the Supa Save in Juniper Hill, Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-32 at Supa Save.");
			}
			else if(rando == 4)
			{
				cwx = -2453.94;
				cwy = 504.07;
				cwz = 30.08;
				format(objstore, sizeof(objstore), "It's Payday at San Andreas Federal Mint, Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-17 at San Andreas Fedral Mint.");
			}
			else if(rando == 5)
			{
				cwx = -2494.48;
				cwy = -29.11;
				cwz = 25.77;
				format(objstore, sizeof(objstore), "It's Payday at the Sub Urban in Hashbury, Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-94 at Hashbury Sub Urban.");
			}
			else if(rando == 6)
			{
				cwx = -2625.85;
				cwy = 209.14;
				cwz = 4.62;
				format(objstore, sizeof(objstore), "It's Payday at Ammu-Nation in Ocean Flats, Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-94 at Ammu-Nation");
			}
			else if(rando == 7)
			{
				cwx = -1689.99;
				cwy = 432.77;
				cwz = 7.19;
				format(objstore, sizeof(objstore), "It's Payday at Eastern Basin Gas Staion, Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-94 at Bay Gas Staion.");
			}
			else if(rando == 8)
			{
				cwx = -1422.02;
				cwy = -288.76;
				cwz = 14.15;
				format(objstore, sizeof(objstore), "It's Payday at Eastern Bay Airport, Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-94 at Eastern Bay Airport.");
			}
   			else if(rando == 9)
			{
				cwx = -2685.1;
				cwy = 819.5;
				cwz = 49.9;
				format(objstore, sizeof(objstore), "It's Payday outside T0$t3D_$aWn0fF's house in Juniper Hills, Sender: 8 Ball (555)"); //NO TOUCHEY LEAVE ALONE ON THIS LINE
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-94 Paradiso.");
			}
			else if(rando == 10)
			{
				cwx = -1055.1661;
				cwy = -696.3055;
				cwz = 32.3516;
				format(objstore, sizeof(objstore), "It's Payday at Eastern Bay Chemicals, Sender: 8 Ball (555)");
				format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-94 At Eastern Bay Chemicals.");
			}
			rx = cwx;//storing the store
			ry = cwy;
			rz = cwz;
			MissionActive = 1;
			if (gdebug){print("DEBUG MissionActive = 1;");}
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && gPlayerSpawned[i])
				{
					if (gTeam[i] >= 3)
					{
						if (automission)
						{
							JobGive(i);
						}
						else if (PlayerInfo[i][pPnumber] !=0)
						{
							SendClientMessage(i, COLOR_YELLOW, "I've Got a Job for You, Text Yes To 555 For More Info, Sender: 8 Ball (555)");
							SendClientMessage(i, COLOR_WHITE, "HINT: Type /sms 555 to display 8 ball's marker");
							RingTone[i] =20;
						}
					}
					else if (gPlayerSpawned[i] == 1 && (gTeam[i]) == 2)
					{
						SendClientMessage(i, COLOR_DBLUE, cbjstore);
						GameTextForPlayer(i, "~w~Waypoint set ~n~~r~Briefcase", 5000, 1);
						SetPlayerCheckpoint(i,cwx, cwy, cwz, 1.4);
					}
				}
			}
			Briefcasepickup=CreatePickup(1210,3,cwx,cwy,cwz);
			return 1;
		}
/*
		case 2:
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i) && i != gSuperCop && i != gPublicEnemy )
				{
						SetPlayerCheckpoint(i,cwx,cwy,cwz, 1.0);
						gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
						if (gdebug){print("DEBUG CHECKPOINT_NONE1");}
				}
			}
			return 1;
		}
		case 3:
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i))
				{
						SetPlayerCheckpoint(i,cwx,cwy,cwz, 1.0);
						gPlayerCheckpointStatus[i] = CHECKPOINT_PICKUP;
				}
			}
			return 1;
		}*/
		case 4:
		{
		    if(racelist > 0)
			{
			    new truesize;
				for(new i=0;i<sizeof(gRaces);i++){
					if(gRaces[i][0])
					{
						truesize++;
					}
				}
				new randa = random(truesize);
				LoadRace(255,gRaces[randa]);
				gRaceName=gRaces[randa];
			//	new string[256];
			//	format(string,sizeof(string),"Sent name %s",gRaces[randa]);
			//	SendClientMessageToAll(COLOR_BLUE,string);
			}
			MissionActive = 5;
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && (gPlayerSpawned[i] == 1))
				{
					if (gdebug){print("DEBUG Checkp4");}
					if (gTeam[i] >= 3)
					{
						if (automission)
						{
							JobGive(i);
						}
						else if (PlayerInfo[i][pPnumber] !=0)
						{
							SendClientMessage(i, COLOR_YELLOW, "I've Got a Job for You, Text Yes To 555 For More Info, Sender: 8 Ball (555)");
							SendClientMessage(i, COLOR_WHITE, "HINT: Type /sms 555 to display 8 ball's marker");
							RingTone[i] =20;
						}
					}
					else if((gTeam[i]) == 2 && RaceInfo[rLaps] == 0)
					{

						if (gdebug){print("DEBUG Checkp6");}
						format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-14 Set up a RoadBlock at the Red Marker.");
						GameTextForPlayer(i, "~w~Waypoint set ~n~~r~RoadBlock", 5000, 1);
						SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
						RingTone[i] = 20;
						SetPlayerCheckpoint(i,rm2x,rm2y,rm2z, 8.0);
					}
				}
			}
			return 1;
		}
		case 8:
		{
			if (gdebug){print("DEBUG test1");}
			stealcar = random(166)+88;
			GetVehiclePos(stealcar, scx, scy, scz);
			format(objstore, sizeof(objstore), "A Buyer is Interested in the Car Marked on your GPS, Sender: 8 Ball (555)");
			format(cbjstore, sizeof(cbjstore), "Police HQ: 911 10-64 Suspect Vehicle Spotted.");
			rx = scx;//storing the car pos
			ry = scy;
			rz = scz;
			if (gdebug){print("DEBUG TEST2");}
			stealcardest = random(166)+88;
			while (stealcardest == stealcar)
			{
				stealcardest = random(166)+88;
			}
			MissionActive = 9;
			if (gdebug){print("DEBUG MissionActive = 9;");}
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && (gPlayerSpawned[i] == 1))
				{
					if (gdebug){print("DEBUG test2");}
					if (gTeam[i] >= 3)
					{
						if (automission)
						{
							JobGive(i);
						}
						else if (PlayerInfo[i][pPnumber] !=0)
						{
							SendClientMessage(i, COLOR_YELLOW, "I've Got a Job for You, Text Yes To 555 For More Info, Sender: 8 Ball (555)");
							SendClientMessage(i, COLOR_WHITE, "HINT: Type /sms 555 to display 8ball's marker");
							RingTone[i] =20;
						}
					}
					else
					{
						if (gdebug){print("DEBUG test4");}
						SendClientMessage(i, COLOR_DBLUE, cbjstore);
						GameTextForPlayer(i, "~w~Waypoint set ~n~~y~Suspect Vehicle", 5000, 1);
						SetVehicleParamsForPlayer(stealcar,i,1,1);
					}
				}
			}
			if (gdebug){printf("DEBUG HOTWIRE mission started: TargetCar:%d",stealcar);}
			return 1;
		}
		case 12:
		{
			new rand = random(sizeof(DmGun));
			dmweapon = DmGun[rand];
			if(dmlist > 35)
			{
				dmlist = 1;
				//printf("racelist2 = %d",racelist);
			}
			new nextdm = random(sizeof(DeathMatches));
			LoadDM(255,DeathMatches[nextdm]);
			new sgun1[20];
			new winfo[256];
			if(DmGun[rand] > 0)
			{
				GetWeaponName(DmGun[rand], sgun1, 20);
				format(winfo, sizeof(winfo), "DM Weapon: %s",sgun1);
			}
			else
			{
				format(winfo, sizeof(winfo), "Weaponset: Bring Your Own Weapons");
			}
			SendClientMessageToAll(COLOR_GREEN, winfo);
			//dmlist++;
			//printf("racelist3 = %d",racelist);
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && gPlayerSpawned[i])
				{
					SendClientMessage(i, COLOR_YELLOW, "DeathMatch Starting Soon at the Red Marker, Sender: 8 Ball (555)");
					RingTone[i] = 20;
					SendClientMessage(i, COLOR_WHITE, "A DeathMatch is starting at the Red marker!.");
					SetPlayerCheckpoint(i,gRandomDMSpawns[0][0],gRandomDMSpawns[0][1],gRandomDMSpawns[0][2], 4.0);
					GameTextForPlayer(i, "~w~Waypoint set ~n~~r~DeathMatch", 5000, 1);
					gPlayerCheckpointStatus[i] = CHECKPOINT_DM;
				}
			}
			MissionActive = 13;
			return 1;
		}
/*
		case 10:
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if (!IsPlayerInVehicle(i, stealcar))
					{
						SetAllPlayerCheckpoint(cwx, cwy, cwz, 16.0, 255);
						SetVehicleParamsForPlayer(stealcar,i,1,0);
					}
				}
			}
			return 1;
		}
		case 101:
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if (!IsPlayerInVehicle(i, stealcar))
					{
						SetAllPlayerCheckpoint(scx, scx, scx, 16.0, 255);
						SetVehicleParamsForPlayer(stealcar,i,1,0);
					}
					//SetAllPlayerCheckpoint(scx, scy, scz, 16.0, 255);
				}
			}
			return 1;
		}
		case 102:
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if (!IsPlayerInVehicle(i, stealcar))
					{
						SetVehicleParamsForPlayer(stealcar,i,1,0);
					}
				}
			}
			return 1;
		}	*/
		default:
		{
			return 1;
		}
	}
	return 1;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[Player CheckPoint]~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
public OnPlayerEnterCheckpoint(playerid)
{
	if (gdebug >=1){printf("OnPlayerEnterCheckpoint %d",playerid);}
	new string[128];
	new name[MAX_PLAYER_NAME];
	switch (gPlayerCheckpointStatus[playerid])
	{
		case CHECKPOINT_PICKUP:
		    {
				if(GetPlayerState(playerid) != 1)
				{
					GameTextForPlayer(playerid, "~w~You must be~n~~r~on foot", 1000, 1);
					return 1;
				}
				if (gdebug){print("DEBUG CHECKPOINT_PICKUP");}
		  	    GetPlayerName(playerid, name, sizeof(name));
		  	    if (MissionActive == 1)
		  	    {
					RewardCalc(playerid,1000,10000);
					DropOff = random(sizeof(gCBdropoff));
				}
				if (gTeam[playerid] >= 3)
				{
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
					CheckpointReset();
					GameTextForPlayer(playerid, "~w~Now get to the~n~~r~Safehouse", 5000, 1);
					cwx = gCBdropoff[DropOff][0];
					cwy = gCBdropoff[DropOff][1];
					cwz = gCBdropoff[DropOff][2];
					SetAllPlayerCheckpoint(cwx, cwy, cwz, 1.4, 0);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_DROPOFF;
					if (gdebug){printf("DEBUG gpcs %d",gPlayerCheckpointStatus[playerid]);}
					format(string, sizeof(string), "%s Has Picked up the Briefcase Containing $%d.", name ,reward);
					BroadCast(COLOR_YELLOW, string);
					gSuperCop = playerid;
					SetPlayerCriminal(playerid,255, "Armed Robbery",0,0);
					MissionActive = 2;
					if (gdebug){print("DEBUG MissionActive = 2;");}
				}
				else if ((gTeam[playerid]) == 2)
				{
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
					CheckpointReset();
					GameTextForPlayer(playerid, "~w~Return the Briefcase~n~to the ~r~Store", 5000, 5);
					cwx = rx;//retrieving the store
					cwy = ry;
					cwz = rz;
					SetAllPlayerCheckpoint(cwx, cwy, cwz, 1.4, 0);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_DROPOFF;
					format(string, sizeof(string), "Officer %s Has Picked up the Briefcase Containing $%d.", name ,reward);
					BroadCast(COLOR_BLUE, string);
	            	gSuperCop = playerid;
	            	MissionActive = 2;
	            	if (gdebug){print("DEBUG MissionActive = 2;");}
				}
			}
		case CHECKPOINT_DROPOFF:
		    {
				if (gdebug){print("DEBUG CHECKPOINT_DROPOFF");}
				GetPlayerName(playerid, name, sizeof(name));
				GiveMoney(playerid, reward);
				preward = reward;
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				if ((gTeam[playerid]) >= 4)
				{
					format(string, sizeof(string), "~g~JOB COMPLETE~n~~w~Your cut was~n~~g~$%d", reward);
					GameTextForPlayer(playerid, string, 5000, 6);
					format(string, sizeof(string), "%s Just Cracked The Briefcase for $%d.", name,reward);
					gSuperCop = INVALID_PLAYER_ID;
					SetPlayerCriminal(playerid,255, "Armed Robbery",1,1);
					gPlayerMission[playerid] = 1;
					fugitimer = SetTimer("cd_fugitive", 1000, 1);
					fugitime = 300;
				}
				else
				{
					format(string, sizeof(string), "~b~BRIEFCASE RETURNED~n~~w~Bonus Paycheck~n~~g~$%d", reward);
					GameTextForPlayer(playerid, string, 5000, 4);
					format(string, sizeof(string), "%s Just Returned the Briefcase for $%d.", name,reward);
					SetPlayerToTeamColor(playerid);
					gSuperCop = INVALID_PLAYER_ID;
					if(PlayerInfo[playerid][pCB] >= 4)
					{
						PlayerInfo[playerid][pExp]++;
						PlayerInfo[playerid][pCB] = 0;
						SendClientMessage(playerid, COLOR_DGREEN, "You are getting stronger Exp +1");
					}
				}
				PlayerPlayMusic(playerid);
				BroadCast(COLOR_YELLOW, string);
				CheckpointReset();
				MissionActive = 4;//srace
				if (gdebug){print("DEBUG MissionActive = 4;");}
		    }
		case CHECKPOINT_CARDROP:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				GameTextForPlayer(playerid, "~w~Get out of the ~n~~y~Car", 5000, 5);
				MissionActive = 11;
				if (gdebug){print("DEBUG MissionActive = 11");}
		    }
		case CHECKPOINT_HOME:
		    {
				PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				GameTextForPlayer(playerid, "~w~You are~n~~y~Home", 5000, 1);
		    }
		case CHECKPOINT_DM:
		    {
				gFightLeader++;
				gFighters++;
				gPlayerFighter[playerid] = 1;
				DisablePlayerCheckpoint(playerid);
				gTeam[playerid] = 4;
				SetPlayerToTeamColor(playerid);
				SetSpawnInfo(playerid, 1, PlayerInfo[playerid][pModel], gRandomDMSpawns[1][0], gRandomDMSpawns[1][1], gRandomDMSpawns[1][2], 1.0, -1, -1, -1, -1, -1, -1);
				if(gFighters >= 21)
				{
					gFighters = 2;
				}
				else
				{
					SetPlayerPos(playerid, gRandomDMSpawns[gFighters][0], gRandomDMSpawns[gFighters][1], gRandomDMSpawns[gFighters][2]); // Warp the player
				}
				if(dmweapon > 0)
				{
					ResetPlayerWeapons(playerid);
					GivePlayerWeapon(playerid, dmweapon, 999);
				}
				//SetPlayerWorldBounds(playerid,gDMWbounds[0],gDMWbounds[1],gDMWbounds[2],gDMWbounds[3]);
				SetPlayerFacingAngle(playerid, 270.0);
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				TogglePlayerControllable(playerid, 0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
				format(string, sizeof(string), "~r~DeathMatch~n~~w~Waiting for more players");
				GameTextForPlayer(playerid, string, 5000, 3);
				if (gFightLeader == 2)
				{
					SetTimer("DMDelay", racedelay, 0);
					format(string, sizeof(string), "%d Seconds Until the DeathMatch Starts, Sender: 8 Ball (555)",racedelay/1000);
					RingTone[playerid] = 20;
					BroadCast(COLOR_YELLOW, string);
				}
				SetPlayerVirtualWorld(playerid,1);
		    }
  		default:
	        {
				if ((gTeam[playerid]) != 2)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "~w~Defend This ~n~Position");
					GameTextForPlayer(playerid, string, 5000, 4);
					if (gdebug){print("DEBUG crims protect");}
			    }
				if ((gTeam[playerid]) == 2)
				{
					PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "~b~Patrol this Area~n~ For~R~Suspects");
					GameTextForPlayer(playerid, string, 5000, 4);
					if (gdebug){print("DEBUG cops protect");}
			    }
	        }
	}
	return 1;
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~[Race System]~~~~~~~~~~~~~~~~~~~~~~~~~~


public DMDelay()
{
	if (gdebug >=1){printf("DMDelay ");}
	new string[32];
	gFightLeader = 1000;
	format(string, sizeof(string), "~r~Ready");
	new gdelay=1000;
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		DisablePlayerCheckpoint(i);
		if(IsPlayerConnected(i))
		{
			if (gPlayerFighter[i] == 1)
			{
				GameTextForPlayer(i, string, gdelay, 6);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("DMDelayr", gdelay, 0);
	return 1;
}
public DMDelayr()
{
	if (gdebug >=1){printf("DMDelayr");}
	new string[32];
	format(string, sizeof(string), "~y~Set");
	new hdelay=1000;
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (gPlayerFighter[i] == 1)
			{
				GameTextForPlayer(i, string, hdelay, 6);
				PlayerPlaySound(i, 1056, 0.0, 0.0, 0.0);
			}
		}
	}
	SetTimer("DMDelayg", hdelay, 0);
	return 1;
}
public DMDelayg()
{
	if (gdebug >=1){printf("DMDelayg");}
	new rdelay=1000;
	new string[32];
	format(string, sizeof(string), "~g~FIGHT");
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if (gPlayerFighter[i] == 1)
			{
				GameTextForPlayer(i, string, rdelay, 6);
				PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				TogglePlayerControllable(i, 1);
			}
		}
	}
	MissionActive = 13;
	if (gdebug){print("DEBUG MissionActive = 13");}
	return 1;
}

public DMDetect()
{
	if(gFightLeader == 1000)
	{
		dmtimer++;
		PlayerInArena();
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) == 1 && gPlayerFighter[i] == 1)
			{
				if(dmtime-dmtimer == 60)
				{
					GameTextForPlayer(i, "~r~One Minute Remaining", 5000, 4);
				}
			}
		}
		if(dmtimer == dmtime)
		{
			new ename[MAX_PLAYER_NAME];
			new string[256];
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1 && gPlayerFighter[i] == 1 || IsPlayerConnected(i) == 1 && TVMode[i]>11 && TVMode[i]<20)
				{
					if(TVMode[i]>11 && TVMode[i]<20)
					{
						TVMode[i] = 0;
						Spectate[i] = 300;
					}
					TogglePlayerControllable(i, 0);
					if(IsPlayerConnected(DmHiPlayer) == 1)
					{
						GetPlayerPos(DmHiPlayer, DmeCam[0], DmeCam[1], DmeCam[2]);
						DmeCam[3] = DmeCam[0];
						DmeCam[4] = DmeCam[1]+2;
						DmeCam[5] = DmeCam[2]+0.2;
						DmeCam[2] = DmeCam[2]+0.6;
						SetPlayerFacingAngle(DmHiPlayer, 0.0);
						RewardCalc(DmHiPlayer,1000,10000);
						GetPlayerName(DmHiPlayer, ename, sizeof(ename));
						format(string, sizeof(string), "~r~DeathMatch Over~n~~b~Winner~n~~w~%s~n~kills:%d~n~~g~Prize:$%d", ename,DmHiScore, reward);
					}
					else
					{
						format(string, sizeof(string), "~r~DeathMatch Over~n~~b~No Winner");
						DmeCam[0] = gRandomDMSpawns[1][0];
						DmeCam[1] = gRandomDMSpawns[1][1];
						DmeCam[2] = gRandomDMSpawns[1][2];
						DmeCam[3] = DmeCam[0];
						DmeCam[4] = DmeCam[1];
						DmeCam[5] =DmeCam[2]+30;
					}
					DMEndCam(i,string);
				}
			}
		}
		if(dmtimer == dmtime+10)
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1)
				{
					if(Spectate[i] == 300)
					{
						Spectate[i] = 253;
					}
					if(gPlayerFighter[i] == 1)
					{
						if(PlayerInfo[i][pTeam] != 3)
						{
							gTeam[i] = PlayerInfo[i][pTeam];
							SetPlayerToTeamColor(i);
						}
						gPlayerFighter[i] = 0;
						DmScore[i] = 0;
						TogglePlayerControllable(i, 1);
						SpawnPlayer(i);
						SetPlayerVirtualWorld(i,0);
						SetPlayerRandomSpawn(i);
					}
				}
			}
		}
		if(dmtimer == dmtime+11)
		{
			if(IsPlayerConnected(DmHiPlayer) == 1)
			{
				new ename[MAX_PLAYER_NAME];
				new string[256];
				PlayerPlaySound(DmHiPlayer, 1058, 0.0, 0.0, 0.0);
				GetPlayerName(DmHiPlayer, ename, sizeof(ename));
				GiveMoney(DmHiPlayer, reward);
				format(string, sizeof(string), "~g~JOB COMPLETE~n~~w~Your cut was~n~~g~$%d", reward);
				PlayerPlayMusic(DmHiPlayer);
				GameTextForPlayer(DmHiPlayer, string, 5000, 6);
				format(string, sizeof(string), "%s Won A Deathmatch With A Total Of %d Kills For $%d", ename,DmHiScore, reward);
				BroadCast(COLOR_GREEN, string);
				PlayerInfo[DmHiPlayer][pDMz] = PlayerInfo[DmHiPlayer][pDMz]+1;
				//PlayerInfo[DmHiPlayer][pRank] = PlayerInfo[DmHiPlayer][pRank]+750;
				PlayerInfo[DmHiPlayer][pTmpRank] = PlayerInfo[DmHiPlayer][pTmpRank]+750;
				PlayerInfo[DmHiPlayer][pTmpMission] = PlayerInfo[DmHiPlayer][pTmpMission]+1;
				//SetPlayerPos(DmHiPlayer,gRandomDMSpawns[0][0],gRandomDMSpawns[0][1],gRandomDMSpawns[0][2]);
				if(PlayerInfo[DmHiPlayer][pTeam] != 1 && PlayerInfo[DmHiPlayer][pTeam] != 2)
				{
					SetPlayerCriminal(DmHiPlayer,255, "Mass Murder",1,1);
					gPlayerMission[DmHiPlayer] = 4;
					fugitimer = SetTimer("cd_fugitive", 1000, 1);
					fugitime = 300;
				}
				else
				{
				    //PlayerInfo[DmHiPlayer][pRank] = PlayerInfo[DmHiPlayer][pRank]+750;
				    //PlayerInfo[DmHiPlayer][pDMz] = PlayerInfo[DmHiPlayer][pDMz]+1;
					//PlayerInfo[DmHiPlayer][pWA] = PlayerInfo[DmHiPlayer][pWA]+5; narf?
					PlayerInfo[DmHiPlayer][pWAz] = PlayerInfo[DmHiPlayer][pWAz]+5;
				/*	if(PlayerInfo[DmHiPlayer][pWA] >= 20)
					{
						PlayerInfo[DmHiPlayer][pExp]++;
						PlayerInfo[DmHiPlayer][pWA] = PlayerInfo[DmHiPlayer][pWA]-20;
						PlayerInfo[DmHiPlayer][pWAz] = PlayerInfo[DmHiPlayer][pWAz]-20;
						SendClientMessage(DmHiPlayer, COLOR_YELLOW, "Expirience Gained +1");
					} */
     				if(PlayerInfo[DmHiPlayer][pTmpMission] >= 10)
					{
						PlayerInfo[DmHiPlayer][gPupgrade] = PlayerInfo[DmHiPlayer][gPupgrade]+1;
						PlayerInfo[DmHiPlayer][pTmpMission] = 0;
						SendClientMessage(DmHiPlayer, COLOR_YELLOW, "Upgrades + 1");
					}
				}
				BetWinner(DmHiPlayer,2);
			}
			gFighters = 0;
			gFightLeader = 0;
			MissionActive = 0;
			if (gdebug){print("DEBUG MissionActive = 0");}
			DmHiScore = 0;
			DmHiPlayer = 255;
			dmtimer = 0;
		}
	}
}

DMEndCam(playerid,string[])
{
	GameTextForPlayer(playerid, string, 5000, 6);
	SetPlayerCameraPos(playerid,DmeCam[3], DmeCam[4], DmeCam[5]);
	SetPlayerCameraLookAt(playerid,DmeCam[0], DmeCam[1], DmeCam[2]);
}

/*public DMScoreCalc() Umm, This does nothing, WTF?
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && gPlayerFighter[i] == 1)
		{
			if(gPlayerFighter[i] == 1)
			{
				new tmp1 = DmScore[i];
				if(tmp1 > DmHiScore)
				{
					DmHiScore = tmp1;
					DmHiPlayer = i;
				}
			}
		}
	}
	return 1;
}*/


public OnPlayerDropBriefCase(playerid)
{
	if (gdebug >=1){printf("OnPlayerDropBriefCase %d",playerid);}
	new string[128];
	new dname[MAX_PLAYER_NAME];
	GetPlayerName(playerid, dname, sizeof(dname));
	format(string, sizeof(string), ":. %s Dropped The Briefcase! .:", dname);
	BroadCast(COLOR_RED, string);
	GetPlayerPos(playerid, cwx, cwy, cwz);
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i))
		{
				SetPlayerCheckpoint(i,cwx,cwy,cwz, 1.0);
				gPlayerCheckpointStatus[i] = CHECKPOINT_PICKUP;
		}
	}
	Briefcasepickup=CreatePickup(1210,3,cwx,cwy,cwz);
	MissionActive = 3;
	if (gdebug){print("DEBUG MissionActive = 3;");}
	return 1;
}

public RewardCalc(playerid,min,max)
{
	reward = (min + (random(max-min)) + ((numplayers + PlayerInfo[playerid][pLevel]) *1000)); //minimum 1000 max 10000 + activeplayers x 1000
	printf("DEBUG RewardCalc = (Random(min=%d)(max=%d))(numplayers=%d)(PlayerInfo[playerid][pLevel]=%d) Total =%d",min,max,numplayers,PlayerInfo[playerid][pLevel],reward);
}

public CheckpointReset()
{
	if (gdebug >= 1){printf("DEBUG CheckpointReset()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			DisablePlayerCheckpoint(i);
			gPlayerLapStatus[i] = 0;
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
		}
	}

}

JobGive(playerid)
{
	if (gdebug >= 1){printf("DEBUG JobGive (%d)",playerid);}
	if(MissionActive == 1)
	{

		SendClientMessage(playerid, COLOR_YELLOW, objstore);
		SetPlayerCheckpoint(playerid,cwx, cwy, cwz, 1.4);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_PICKUP;
		RingTone[playerid] = 20;
		SendClientMessage(playerid, COLOR_WHITE, "8 Ball: Go steal the Briefcase at the red mark.");
		GameTextForPlayer(playerid, "~b~Steal the~n~~r~Briefcase", 5000, 5);
		return 1;
	}
	else if(MissionActive==5)
	{
		format(objstore, sizeof(objstore), "Yo! Streetrace at the red mark, Sender: 8 Ball (555)");
		SendClientMessage(playerid, COLOR_YELLOW, objstore);
		//RingTone[playerid] = 20;
		if(gRaceStarted==0&&gRaceStarting==0){
	    	StartRace();
	    }
	    else{SendClientMessage(playerid,COLOR_GRAD1,"Race started already");}
	    SendClientMessage(playerid, COLOR_WHITE, "8 Ball: Go to the Race start and wait.");
		GameTextForPlayer(playerid, "~G~Street Race", 5000, 1);
	    return 1;
	}
	else if(MissionActive == 9)
	{
		SendClientMessage(playerid, COLOR_YELLOW, objstore);
		RingTone[playerid] = 20;
		SetVehicleParamsForPlayer(stealcar,playerid,1,0);
		SendClientMessage(playerid, COLOR_WHITE, "8 Ball: Go To The Yellow Marker And Jack The Car.");
		GameTextForPlayer(playerid, "~y~Carjacking", 5000, 1);
		return 1;
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "I aint got shit now, check back later, Sender: 8 Ball (555)");
		RingTone[playerid] = 20;
	}
	return 1;
}

public SetAllPlayerCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi, num)
{
	if (gdebug >= 1){printf("DEBUG SetAllPlayerCheckpoint()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			SetPlayerCheckpoint(i,allx,ally,allz, radi);
			if (num != 255)
			{
				gPlayerCheckpointStatus[i] = num;
			}
		}
	}

}

public SetAllCopCheckpoint(Float:allx, Float:ally, Float:allz, Float:radi)
{
	if (gdebug >= 1){printf("DEBUG SetAllCopCheckpoint()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			if(gTeam[i] == 2)
			{
				SetPlayerCheckpoint(i,allx,ally,allz, radi);
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if (gdebug >=1) printf("OnPlayerStateChange %d %d %d",playerid, newstate, oldstate);
	if(newstate == 2)
	{
		new v = GetPlayerVehicleID(playerid);
		for(new i=0; i<MAX_PLAYERS; i++)
		{
		    if(PlayerInfo[i][vehicle] == v && Alarm[v] == 1)
			{
		        GameTextForPlayer(playerid,"~r~Alarm System ~g~Activated",1000,1);
				SendClientMessage(playerid,COLOR_GREY,"* This vehicle has an active lock system and cannot be used.");
		        RemovePlayerFromVehicle(playerid);
				return 1;
			}
	    	PlayerInfo[playerid][vehicle] = GetPlayerVehicleID(playerid);
		}
	}
	if((newstate == 2 || newstate == 3) && nocarcash)
	{
		if (gPlayerCheckpointStatus[playerid] == CHECKPOINT_DROPOFF)
		{
			if (gdebug){print("DEBUG test6");}
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			new check = gPlayerCheckpointStatus[playerid];
			if (gdebug){printf("DEBUG check %d" ,check);}
			OnPlayerDropBriefCase(playerid);
		}
	}
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		if(gRacing[playerid]&&gRaceStarted)
		{
			new count;
			new string[256];
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && gTeam[i] == 2 && CrimInRange(50.0, playerid,i))
				{
					count = 1;
					format(string, sizeof(string), "~r~Racer ~w~Apprehended~n~Bonus Paycheck ~n~~g~$%d", 10000);
					GameTextForPlayer(i, string, 5000, 4);
					GiveMoney(i, 10000);
					PlayerPlaySound(i, 1058, 0.0, 0.0, 0.0);
					PlayerInfo[i][pSP] = PlayerInfo[i][pSP]+2;
					if(PlayerInfo[i][pSP] >= 20)
					{
						PlayerInfo[i][pExp]++;
						PlayerInfo[i][pSP] = 0;
						SendClientMessage(i, COLOR_DGREEN, "You are getting stronger Exp +1");
					}
				}
			}
			if(count == 1)
			{
				new name [MAX_PLAYER_NAME];
				GetPlayerName(playerid, name, sizeof(name));
				format(string, sizeof(string), ":::Race::News::: %s Has Been Apprehended by Police.", name);
				BroadCast(COLOR_WHITE, string);
				SetPlayerInterior(playerid,6);
				LapCount[playerid] = 0;
				PlayerInfo[playerid][pInt] = 6;
				SetPlayerPos(playerid,264.395200,77.564040,1001.039000);
				SendClientMessage(playerid, COLOR_GRAD1,"You have been jailed for street racing (type /time).");
				PlayJailSound(1153 , 1154, 2000,264.395200, 77.564040, 1001.039000);
				JailTime[playerid] = 60;
			}
		}
	}
	if(newstate == PLAYER_STATE_DRIVER) //buggy dont finish
	{
		new newcar = GetPlayerVehicleID(playerid);
		new oldcar = gLastCar[playerid];
		new housecar = PlayerInfo[playerid][pPhousekey]+1;
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		if (gdebug >=1){printf("oldcar %d, newcar %d",oldcar,newcar);}
		new vehid = GetVehicleModel(newcar);
        if(IsATaxi(newcar))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "Taxi: You can Transport Passengers");
			SendClientMessage(playerid, COLOR_WHITE, "Commands: /Driver /Driveroff /payfare");
		}
		if(IsATruck(newcar))
		{
			new string[256];
			if(vehid==440){PlayerHaul[newcar][pCapasity]=10;}
			if(vehid==456){PlayerHaul[newcar][pCapasity]=20;}
			format(string, sizeof(string), "Components: %d/%d", PlayerHaul[newcar][pLoad],PlayerHaul[newcar][pCapasity]);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
			SendClientMessage(playerid, COLOR_WHITE, "Delivery: You can deliver components to business");
			SendClientMessage(playerid, COLOR_WHITE, "Commands: are /load /buycomp /sellcomp /bestsale");
		}
		if(newcar==RentCar1||newcar==RentCar2||newcar==RentCar3)
		{
			if (HireCar[playerid] != newcar)
			{
				new string[128];
				new hirefee = HireCost(vehid);
				format(string, sizeof(string), "~w~Rental Car~n~Cost:~y~$%d~n~~w~ Type ~w~/rentcar~w~~n~to get out type ~r~/exit",hirefee);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
			}

		}
  		if(newcar==RentCar4||newcar==RentCar5||newcar==RentCar6)
		{
			if (HireCar[playerid] != newcar)
			{
				new string[128];
				new hirefee = HireCost(vehid);
				format(string, sizeof(string), "~w~Rental Car~n~Cost:~y~$%d~n~~w~ Type ~w~/rentcar~w~~n~to get out type ~r~/exit",hirefee);
				TogglePlayerControllable(playerid, 0);
				GameTextForPlayer(playerid, string, 5000, 3);
			}

		}
		/*for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(GetPlayerState(i) == 2 && GetPlayerVehicleID(i) == newcar)
				{
					RemovePlayerFromVehicle(i);
					print("Yep, found why it was kicking me out");
					TogglePlayerControllable(i, 1); //hirecar bug
				}
			}
		}*/
		/*
		if (HireCar[playerid] != 999 && gTeam[playerid] <= 2) //works on lock command now
		{
			if(newcar != housecar && oldcar != 301)
			{
				gLastDriver[oldcar] = 300;
				gCarLock[oldcar] = 0;
				UnLockCar(oldcar);
				HireCar[playerid] = newcar;
			}
		}
		*/
		if(oldcar != 301)
		{
			if((housecar != oldcar && oldcar != 0) && (HireCar[playerid] != oldcar && newcar != housecar))
			{
				if(gLastDriver[oldcar] == playerid && oldcar != newcar)
				{
					gLastDriver[oldcar] = 300;
					gCarLock[oldcar] = 0;
					UnLockCar(oldcar);
				}
			}
		}
		if(gTeamCarLock[newcar] == 1)
		{
			gTeamCarLock[newcar] = 0;
			UnLockCar(newcar);
		}
		gLastCar[playerid] = newcar;
		if (gdebug >=1){printf("gLastCar[playerid](%d)",gLastCar[playerid]);}
		gLastDriver[newcar] = playerid;
		if ((newcar == stealcar) && (MissionActive == 9))
		{
			RewardCalc(playerid,1000,10000);
		}
		if((newcar == stealcar) && (MissionActive >= 9))
		{
			if (gdebug){print("DEBUG TEST3");}
			if (gTeam[playerid] >= 3 && MissionActive >= 9)
			{
				if (gdebug){print("DEBUG TEST4");}
				new name[MAX_PLAYER_NAME];
				new string[256];
				GetPlayerName(playerid, name, sizeof(name));
				GetVehiclePos(stealcardest, cwx, cwy, cwz);
				GameTextForPlayer(playerid, "~w~Now get the ~y~Car~n~~w~to the ~r~Buyer", 5000, 4);
				format(string, sizeof(string), "%s Has Stolen A Car Worth $%d", name,reward);
				BroadCast(COLOR_YELLOW, string);
				SetAllPlayerCheckpoint(cwx, cwy, cwz, 16.0, 0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_CARDROP;
				MissionActive = 10;
				if (gdebug){print("DEBUG MissionActive = 10;");}
				if (gTeam[playerid] == 3)
				{
					SetPlayerCriminal(playerid,255, "Grand Theft Auto",0,0);
				}
				gSuperCop = playerid;
				OpenDoors();
			}
			if (gTeam[playerid] == 2 && MissionActive >= 10)
			{
				if (gdebug){print("DEBUG TEST6");}
				new name[MAX_PLAYER_NAME];
				new string[256];
				GetPlayerName(playerid, name, sizeof(name));
				cwx = -1630.6892;
				cwy = 662.5108;
				cwz = -5.5092;
				GameTextForPlayer(playerid, "~w~Return the ~y~car ~n~~w~to the ~r~Pound", 5000, 1);
				format(string, sizeof(string), "Officer %s Has Seized A Stolen Car Worth $%d", name,reward);
				BroadCast(COLOR_YELLOW, string);
				SetAllPlayerCheckpoint(cwx, cwy, cwz, 16.0, 0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_CARDROP;
				gSuperCop = playerid;
				MissionActive = 10;
				if (gdebug){print("DEBUG MissionActive = 10;");}
			}
		}
	}
	if(newstate == PLAYER_STATE_SPAWNED)
	{
		new Float: lwx, Float:lwy, Float:lwz;
		GetPlayerPos(playerid, lwx, lwy, lwz);
		if (gdebug >=1){printf("z =%f int =%d",lwz,PlayerInfo[playerid][pInt]);}
		if((lwz > 530.0 && PlayerInfo[playerid][pInt] == 0) || PlayerToPoint(1000.0, playerid, -1041.9,-1868.4,79.1)) //the highest land point in sa = 526.8
		{
			SetPlayerRandomSpawn(playerid);
			print("overhight or ob");
		}
		//SetPlayerInterior(playerid,0);
		if(dmweapon > 0 && gPlayerFighter[playerid] != 0)
		{
			GivePlayerWeapon(playerid, dmweapon, 999);
			if(PlayerInfo[playerid][pSHealth] < 85.0)
			{
				SetPlayerHealth(playerid, 100.0);
			}
			else
			{
				SetPlayerHealth(playerid, 85.0+PlayerInfo[playerid][pSHealth]);
			}
			SetPlayerArmour(playerid, PlayerInfo[playerid][pSArmour]);
		}
		else
		{
			SetPlayerWeapons(playerid);
			SetPlayerHealth(playerid, 50+PlayerInfo[playerid][pSHealth]);
			SetPlayerArmour(playerid, PlayerInfo[playerid][pSArmour]);
		}
		TelePos[playerid][0] = 0.0;
		TelePos[playerid][1] = 0.0;
		gPlayerSpawned[playerid] = 1;
		SafeTime[playerid] = 60;
		//if(gDerby[playerid]!=0){gDerby[playerid]=0;SpawnPlayer(playerid);}
		//OnPlayerUpdate(playerid); //spawnsave
	}
	if(gDerby[playerid]==1){PutPlayerInVehicle(playerid,HireCar[playerid],0);}
	return 1;
}

HireCost(carid)
{
	switch (carid)
	{
		case 541:
		{
			return 900; //bullet
		}
		case 415:
		{
			return 1300; //Cheetah
		}
		case 451:
		{
			return 1000; //turismo
		}
		case 429:
		{
			return 800; //banshee
		}
		case 480:
		{
			return 500; //Comet
		}
		/*case 82:
		{
			return 60000;
		}*/
	}
	return 0;
}

public CarCheck()
{
	if (gdebug >= 3){printf("DEBUG CarCheck()");}
	//new foundowner = -1;
	for(new c = 1; c < 254; c++)
	{
		/*
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				if(HireCar[i] == c && foundowner == -1)
				{
					foundowner = i;
				}
			}
		}
		if(foundowner == -1 && c > 34 && gCarLock[c] == 1)
		{
			gCarLock[c] = 0;
			UnLockCar(c);
		}
		*/
		if (gLastDriver[c] == 301)
		{
			CarRespawn(c);
		}
		if (gLastDriver[c] >= 300)
		{
			gLastDriver[c]++;
		}
		//foundowner = -1;
	}
	return 1;
}

CarInit()
{
	if (gdebug >= 3){printf("DEBUG CarCheck()");}
	for(new c = 1; c < 254; c++)
	{
 		gLastDriver[c] = 299;
		gTeamCarLock[c] = 0;
		//gCarLock[c] = 0;
	}
	gLastDriver[301]=255;
	return 1;
}

CarTow(carid)
{
	if (gdebug >= 1){printf("DEBUG CarRespawn(%d)",carid);}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid))// || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	// 		CreateVehicle(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
	// 				SetVehiclePos(plo,plocx,plocy+4, plocz);
	SetVehiclePos(carid,HouseCarSpawns[carid-1][0], HouseCarSpawns[carid-1][1], HouseCarSpawns[carid-1][2]);
	SetVehicleZAngle(carid, HouseCarSpawns[carid-1][3]);
	return 1;
}

CarRespawn(carid)
{
	if (gdebug >= 1){printf("DEBUG CarRespawn(%d)",carid);}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(IsPlayerInVehicle(i, carid))// || HireCar[i] == carid)
			{
				gLastDriver[carid] = 255;
				return 0;
			}
		}
	}
	SetVehicleToRespawn(carid);
	gLastDriver[carid] = 299;
	TeamLockReset(carid);
	return 1;
}

LockCar(carid)
{
	if (gdebug >= 1){printf("DEBUG LockCar(%d)",carid);}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(stealcar == carid)
			{
				SetVehicleParamsForPlayer(carid,i,1,1);
			}
			else
			{
				SetVehicleParamsForPlayer(carid,i,0,1);
			}
		}
	}
}

UnLockCar(carid)
{
	if (gdebug >= 1){printf("DEBUG UnLockCar(%d)",carid);}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(stealcar == carid)
			{
				SetVehicleParamsForPlayer(carid,i,1,0);
			}
			else
			{
				if(!IsAPlane(carid))
				{
					SetVehicleParamsForPlayer(carid,i,0,0);
				}
			}
		}
	}
}

public OpenDoors()
{
	if (gdebug >= 1){printf("DEBUG OpenDoors()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			SetVehicleParamsForPlayer(stealcar,i,1,0);
		}
	}
}

TeamCarLockInit()
{
	if (gdebug >= 1){printf("DEBUG TeamCarLockInit()");}
	for(new c = 0; c <= 200; c++)
	{
		if ((c >= 23) && (c <= 48))
		{
			gTeamCarLock[c] = 2;
		}
		if ((c >= 49) && (c <= 51))
		{
			gTeamCarLock[c] = 4;
		}
		if ((c >= 52) && (c <= 200))
		{
			gTeamCarLock[c] = 1;
		}
		gCarLock[c] = 0;
	}
	return 1;
}

TeamLockReset(carid)
{
	if (gdebug >= 3){printf("DEBUG TeamLockReset(carid)",carid);}
	if (!teamcarlock)
	{
		return 0;
	}
	//DebugPrint("TeamLockReset()",0,0,1);
	if ((carid >= 35) && (carid <= 89))
	{
		gTeamCarLock[carid] = 2;
	}
	/*if ((carid >= 49) && (carid <= 51))
	{
		gTeamCarLock[carid] = 4;
	}*/
	if ((carid >= 90) && (carid <= 92))
	{
		gTeamCarLock[carid] = 1;
	}
	gCarLock[carid] = 0;
	return 1;
}

InitLockDoors(playerid)
{
	if (gdebug >= 1){printf("DEBUG1 InitLockDoors(%d)",playerid);}
	new c;
	while (c < 254)
	{
		c++;
		if (gCarLock[c] == 1)
		{
			if (gdebug >= 1){printf("DEBUG3 InitLockDoors(%d)car(%d)",playerid,c);}
			SetVehicleParamsForPlayer(c,playerid,0,1);
		}
	}
	if(PLicence[playerid] != 1)//planelicense and police shit
	{
		SetVehicleParamsForPlayer(76,playerid,0,1);
		SetVehicleParamsForPlayer(75,playerid,0,1);
		SetVehicleParamsForPlayer(74,playerid,0,1);
		SetVehicleParamsForPlayer(73,playerid,0,1);
		SetVehicleParamsForPlayer(72,playerid,0,1);
		SetVehicleParamsForPlayer(71,playerid,0,1);
	}
	else
	{
		SetVehicleParamsForPlayer(76,playerid,0,0);
		SetVehicleParamsForPlayer(75,playerid,0,0);
		SetVehicleParamsForPlayer(74,playerid,0,0);
		SetVehicleParamsForPlayer(73,playerid,0,0);
		SetVehicleParamsForPlayer(72,playerid,0,0);
		SetVehicleParamsForPlayer(71,playerid,0,0);
	}
 	return 1;
}
TeamLockDoors(playerid)
{
	if (gdebug >= 1){printf("DEBUG TeamLockDoors(%d)",playerid);}
	new c =0;
	while (c <= 200)
	{
		c++;
		if (gCarLock[c] == 1)
		{
			SetVehicleParamsForPlayer(c,playerid,0,1);
		}
		if (gTeamCarLock[c] == 1)
		{
			if(gTeam[playerid] != 1 && gTeam[playerid] != 3)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
			else
			{
				SetVehicleParamsForPlayer(c,playerid,0,0);
			}
		}
		if (gTeamCarLock[c] == 2)
		{
			if(gTeam[playerid] != 2)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
			else
			{
				SetVehicleParamsForPlayer(c,playerid,0,0);
			}
		}
		if (gTeamCarLock[c] == 4)
		{
			if(gTeam[playerid] != 4)
			{
				SetVehicleParamsForPlayer(c,playerid,0,1);
			}
			else
			{
				SetVehicleParamsForPlayer(c,playerid,0,0);
			}
		}
		if (gTeamCarLock[c] == 0)
		{
				SetVehicleParamsForPlayer(c,playerid,0,0);
		}
	}
	return 1;
}

/*DebugPrint(string[],value1,value2,type)
{
	new formated[256];
	if (gdebug >= 2 && type == 1)
	{
		format(formated, sizeof(formated), "Debug:(%d) %s: %d",value1,string,value2);
		printf("%s",formated);
		SendClientMessageToAll(COLOR_WHITE, formated);
	}
	return 1;
}*/


public OnPlayerExitVehicle(playerid, vehicleid)
{
	if (gdebug >= 1){printf("DEBUG OnPlayerExitVehicle(%d, %d)", playerid, vehicleid);}
	if (GetPlayerState(playerid) == 1)
	{
		return 1;
	}
	new string[256];
	new ename[MAX_PLAYER_NAME];
	if (vehicleid == stealcar && (MissionActive == 10 || MissionActive == 101))
	{
		GameTextForPlayer(playerid, "~w~Get back in the ~n~~r~Car", 5000, 4);
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				SetVehicleParamsForPlayer(stealcar,i,1,0);
			}
		}
		if (playerid == gSuperCop)
		{
			gSuperCop = 255;
		}
		CheckpointReset();
		MissionActive = 101;
		if (gdebug){print("DEBUG MissionActive = 101");}
	}
	else if (gTeam[playerid] >= 4 && vehicleid == stealcar && MissionActive == 11 && gSuperCop == playerid)
	{
		if (gdebug){print("DEBUG CHECKPOINT_CARDROP");}
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		GetPlayerName(playerid, ename, sizeof(ename));
		GiveMoney(playerid, reward);
		preward = reward;
		format(string, sizeof(string), "~g~CAR DELIVERED~n~~w~Your were paid ~n~~g~$%d", reward);
		PlayerPlayMusic(playerid);
		GameTextForPlayer(playerid, string, 5000, 4);
		format(string, sizeof(string), "%s Just Sold A Hot Car For $%d.", ename,reward);
		BroadCast(COLOR_RED, string);
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				SetVehicleParamsForPlayer(stealcar,i,0,0);
			}
		}
		if (playerid != gPublicEnemy)
		{
			gPlayerMission[playerid] = 3;
			gTeam[playerid]=4;
			SetPlayerCriminal(playerid,255, "Grand Theft Auto",1,1);
			fugitimer = SetTimer("cd_fugitive", 1000, 1);
			fugitime = 300;			
		}
		CheckpointReset();
		SetVehicleToRespawn(stealcar);
		stealcar = -1;
		MissionActive = 12;
		if (gdebug){print("DEBUG MissionActive = 12");}
	}
	else if (gTeam[playerid] == 2 && vehicleid == stealcar && MissionActive == 11 && gSuperCop == playerid)
	{
		if (gdebug){print("DEBUG CHECKPOINT_CARDROP");}
		PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
		GetPlayerName(playerid, ename, sizeof(ename));
		GiveMoney(playerid, reward);
		PlayerInfo[playerid][pHW]++;
		PlayerInfo[playerid][pHWz]++;
		PlayerInfo[playerid][pTmpMission]++;
		if(PlayerInfo[playerid][pHW] >= 3)
		{
			PlayerInfo[playerid][pExp]++;
			PlayerInfo[playerid][pHW] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "You are getting stronger Exp +1");
		}
		if(PlayerInfo[playerid][pTmpMission] >= 10)
		{
			PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+1;
			PlayerInfo[playerid][pTmpMission] = 0;
			SendClientMessage(playerid, COLOR_YELLOW, "Upgrades + 1");
		}
		format(string, sizeof(string), "~g~CAR RETURNED~n~~w~Bonus Paycheck ~n~~g~$%d", reward);
		PlayerPlayMusic(playerid);
		GameTextForPlayer(playerid, string, 5000, 4);
		format(string, sizeof(string), "Officer %s Just Returned A Stolen Car For $%d.", ename,reward);
		BroadCast(COLOR_BLUE, string);
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i))
			{
				SetVehicleParamsForPlayer(stealcar,i,0,0);
			}
		}
		CheckpointReset();
		SetVehicleToRespawn(stealcar);
		stealcar = -1;
		MissionActive = 12;
		if (gdebug){print("DEBUG MissionActive = 12");}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	new string[128];
	/*
	if (gPlayerAccount[playerid] == 0)
	{
		GameTextForPlayer(playerid, "~w~Welcome.~n~In order to play you need to create an account, type ~n~~r~/register (password)~w~ to register", 20000, 3);
		SetPlayerCameraPos(playerid,1460.0, -1324.0, 287.2);
		SetPlayerCameraLookAt(playerid,1374.5, -1291.1, 239.0);
		return 1;
	}
	*/
	PlayerInfo[playerid][pModel] = Peds[classid][0];
	//printf("pppm = %d classid == %d Peds[classid][0]= %d",PlayerInfo[playerid][pModel],classid,Peds[classid][0]);
 	if(classid >= 260)
	{
		format(string, sizeof(string), "~b~Law Enforcement ");
		GameTextForPlayer(playerid,string,3500,5);
		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	}
	else if (classid >= 255 && classid <= 259)
	{
			format(string, sizeof(string), "~g~PARAMEDIC~n~~r~Objective~w~: Save Life");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 1 && classid <= 3)
	{
			format(string, sizeof(string), "~p~BALLAS~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 4 && classid <= 6)
	{
			format(string, sizeof(string), "~p~GROVE~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 7 && classid <= 9)
	{
			format(string, sizeof(string), "~p~VAGOS~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 10 && classid <= 12)
	{
			format(string, sizeof(string), "~p~AZTECAS~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 13 && classid <= 15)
	{
			format(string, sizeof(string), "~p~NANG~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 16 && classid <= 18)
	{
			format(string, sizeof(string), "~p~RIFA~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 19 && classid <= 22)
	{
			format(string, sizeof(string), "~p~MAFIA~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 23 && classid <= 25)
	{
			format(string, sizeof(string), "~p~RUSSIAN MAFIA~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 26 && classid <= 28)
	{
			format(string, sizeof(string), "~p~TRIADS~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else if (classid >= 29 && classid <= 31)
	{
			format(string, sizeof(string), "~p~BIKERS~n~~r~Objective~w~: Chaos");
			GameTextForPlayer(playerid,string,3500,4);
	}
	else
	{
		format(string, sizeof(string), "~g~CIVILIAN~n~~r~Objective~w~: Live Life");
		GameTextForPlayer(playerid,string,3500,4);
    }
	SetPlayerTeamFromClass(playerid,classid);
	SetupPlayerForClassSelection(playerid);
	return 1;
}

public SetupPlayerForClassSelection(playerid)
{
	switch (gTeam[playerid])
	{
		case TEAM_BLUE:
		{
			SetPlayerInterior(playerid,5);
			SetPlayerPos(playerid,323.4,305.6,999.1);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,323.4-1.5,305.6,999.1+0.7);
			SetPlayerCameraLookAt(playerid,323.4,305.6,999.1+0.7);

		}
		case TEAM_CYAN:
		{
			SetPlayerInterior(playerid,2);
			SetPlayerPos(playerid,1216.699000,-6.416779,1001.328000);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,1216.699000-1.5,-6.416779,1001.328000+0.7);
			SetPlayerCameraLookAt(playerid,1216.699000,-6.416779,1001.328000+0.7);
		}
		case TEAM_GREEN:
		{
			SetPlayerInterior(playerid,2);
			SetPlayerPos(playerid,1216.699000,-6.416779,1001.328000);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,1216.699000-1.5,-6.416779,1001.328000+0.7);
			SetPlayerCameraLookAt(playerid,1216.699000,-6.416779,1001.328000+0.7);
		}
		default:
		{
			/*SetPlayerInterior(playerid,2);
			SetPlayerPos(playerid,1216.699000,-6.416779,1001.328000);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,1216.699000-1.5,-6.416779,1001.328000+0.7);
			SetPlayerCameraLookAt(playerid,1216.699000,-6.416779,1001.328000+0.7);

			SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,-2654.4,1424.2,912.4);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,-2654.4-1.5,1424.2,912.4+0.7);
			SetPlayerCameraLookAt(playerid,-2654.4,1424.2,912.4+0.7);
			*/
   			/*SetPlayerInterior(playerid,17);
			SetPlayerPos(playerid,485.08,-12.59,1000.68);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,481.52,-11.53,1000.68+0.7);
			SetPlayerCameraLookAt(playerid,485.19,-12.59,1000.68+0.7);
			
			SetPlayerInterior(playerid,2);//Strip Club LS
			SetPlayerPos(playerid,1208.11,-6.98,1001.33);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,1208.11-1.5,-6.98,1001.33+0.7);
			SetPlayerCameraLookAt(playerid,1208.11,-6.98,1001.33+0.7);

			SetPlayerInterior(playerid,17);
			SetPlayerPos(playerid,485.08,-12.59,1000.68);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,481.52,-11.53,1000.68+0.7);
			SetPlayerCameraLookAt(playerid,485.19,-12.59,1000.68+0.7);*/
			
			SetPlayerInterior(playerid,1);
			SetPlayerPos(playerid,450.7622,-20.1152,1001.1328);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,445.7622,-20.1152,1001+0.7);
			SetPlayerCameraLookAt(playerid,445.7622,-20.1152,1001+0.7);
		}
	}
}

//---------------------------------------------------------

public SetPlayerTeamFromClass(playerid,classid)
{
	if (gdebug >= 2){printf("DEBUG SetPlayerTeamFromClass(%d, %d)", playerid, classid);}
	if(classid >= 260)
	{
		gTeam[playerid] = TEAM_BLUE;
		PlayerInfo[playerid][pTeam] = 2;
	}
	else if (classid >= 164 && classid <= 166)
	{
		gTeam[playerid] = TEAM_FBI;
		PlayerInfo[playerid][pTeam] = 15;
	}
	else if (classid >= 255 && classid <= 259)
	{
		gTeam[playerid] = TEAM_CYAN;
		PlayerInfo[playerid][pTeam] = 1;
	}
	else if (classid >= 1 && classid <= 3)
	{
		gTeam[playerid] = TEAM_BALLAS;
		PlayerInfo[playerid][pTeam] = 5;
	}
	else if (classid >= 4 && classid <= 6)
	{
		gTeam[playerid] = TEAM_GROVE;
		PlayerInfo[playerid][pTeam] = 6;
	}
	else if (classid >= 7 && classid <= 9)
	{
		gTeam[playerid] = TEAM_VAGOS;
		PlayerInfo[playerid][pTeam] = 7;
	}
	else if (classid >= 10 && classid <= 12)
	{
		gTeam[playerid] = TEAM_AZTECAS;
		PlayerInfo[playerid][pTeam] = 8;
	}
	else if (classid >= 13 && classid <= 15)
	{
		gTeam[playerid] = TEAM_NANG;
		PlayerInfo[playerid][pTeam] = 9;
	}
	else if (classid >= 16 && classid <= 18)
	{
		gTeam[playerid] = TEAM_RIFA;
		PlayerInfo[playerid][pTeam] = 10;
	}
	else if (classid >= 19 && classid <= 22)
	{
		gTeam[playerid] = TEAM_MAFIA;
		PlayerInfo[playerid][pTeam] = 11;
	}
	else if (classid >= 23 && classid <= 25)
	{
		gTeam[playerid] = TEAM_RMAFIA;
		PlayerInfo[playerid][pTeam] = 12;
	}
	else if (classid >= 26 && classid <= 28)
	{
		gTeam[playerid] = TEAM_TRIADS;
		PlayerInfo[playerid][pTeam] = 13;
	}
	else if (classid >= 29 && classid <= 31)
	{
		gTeam[playerid] = TEAM_BIKERS;
		PlayerInfo[playerid][pTeam] = 14;
	}
	else
	{
	    gTeam[playerid] = TEAM_GREEN;
	    PlayerInfo[playerid][pTeam] = 3;
	}
}

//---------------------------------------------------------

public SetPlayerCriminal(playerid,declare,reason[],pe,flash)
{
	if (gdebug >= 1){printf("DEBUG SetPlayerCriminal(%d, %d ,%s ,%d ,%d)", playerid,declare,reason,pe,flash);}
	new turned[MAX_PLAYER_NAME];
	new turner[MAX_PLAYER_NAME];
	new turnmes[128];
	//new tmpstring[32];
	//format(tmpstring, sizeof(tmpstring), reason);
	strmid(PlayerCrime[playerid][pAccusedof], reason, 0, strlen(reason), 255);
	GetPlayerName(playerid, turned, sizeof(turned));
	if (declare == 255)
	{
		//print("DEBUG: 4");
		format(turner, sizeof(turner), "Unknown");
		strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
	}
	else
	{
		//print("DEBUG: 5");
		GetPlayerName(declare, turner, sizeof(turner));
		strmid(PlayerCrime[playerid][pVictim], turner, 0, strlen(turner), 255);
		strmid(PlayerCrime[declare][pBplayer], turned, 0, strlen(turned), 255);
		strmid(PlayerCrime[declare][pAccusing], reason, 0, strlen(reason), 255);
	}
	if (pe == 1)
	{
		if (gPublicEnemy != INVALID_PLAYER_ID && gPublicEnemy != playerid)
		{
			OffTheHook();
			KillTimer(offhook);
	    }
		gPublicEnemy = playerid;
		SetPlayerWantedLevel(playerid,6);
		format(turnmes, sizeof(turnmes), "%s, You Are Now a Fugitive For %s. Evade Death For %d minutes, Sender: 8 Ball (555)",turned,reason,petime/60000);
		RingTone[playerid] = 20;
		SendClientMessage(playerid, COLOR_YELLOW, turnmes);
		format(cbjstore, sizeof(cbjstore), "Police HQ: All Units, 10-83 Be On The Lookout For Wanted Fugitive %s",turned);
		SendTeamBeepMessage(2, TEAM_BLUE_COLOR, cbjstore);
		format(turnmes, sizeof(turnmes), "Police HQ: Wanted For %s, You have %d minutes.",reason,petime/60000);
		format(objstore, sizeof(objstore), "Kill That Sucker %s, And Take His Last Payment, Sender: 8 Ball (555)",turned);
		SendTeamMessage(2, TEAM_BLUE_COLOR, turnmes);
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && gPublicEnemy != i && gTeam[i] >= 3)
			{
				SendClientMessage(i, COLOR_YELLOW, objstore);
				RingTone[i] = 20;
			}
		}
		SendTeamMessage(2, COLOR_WHITE, "Apprehend the Fugitive Dead or Alive for a Reward.");
		offhook = SetTimer("OffTheHook", petime, 0);

	}
    else
    {
		if ((gTeam[playerid]) == 1)//med kill criminal
		{
			format(turnmes, sizeof(turnmes), "Warning: %s, The Cops Are After You For %s Paramedic Privs Removed Reporter: %s",turned,reason,turner);
			if(GetPlayerWantedLevel(playerid)<=1){SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);}
		}
		else
		{
			format(turnmes, sizeof(turnmes), "Warning: %s, The Cops Are After You For %s. Reporter: %s",turned,reason,turner);
			if(GetPlayerWantedLevel(playerid)<=1){SetPlayerWantedLevel(playerid,GetPlayerWantedLevel(playerid)+1);}
		}
		gTeam[playerid] = 4;//lawbreaker
		if (flash)
		{
			FlashTime[playerid] = 10;
		}
		else
		{
			SetPlayerToTeamColor(playerid);
		}
		SendClientMessage(playerid, COLOR_RED, turnmes);
	}
	print("DEBUG: 5");
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && (gTeam[i]) == 2 && gPublicEnemy != playerid)
		{
			format(cbjstore, sizeof(turnmes), "Police HQ: All Units APB: Reporter: %s",turner);
			SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
			format(cbjstore, sizeof(turnmes), "Police HQ: Crime: %s, Suspect: %s",reason,turned);
			SendClientMessage(i, TEAM_BLUE_COLOR, cbjstore);
		}
	}
}
//---------------------------------------------------------

public SetPlayerFree(playerid,declare,reason[],pe,flash)
{
	if (gdebug >= 1){printf("DEBUG SetPlayerFree(%d, %d ,%d ,%d)", playerid,declare,pe,flash);}
	ClearCrime(playerid);
	new turned[MAX_PLAYER_NAME];
	new turner[MAX_PLAYER_NAME];
	new turnmes[128];
	new crbjstore[128];
	if (declare == 255)
	{
		format(turner, sizeof(turner), "911");
	}
	else
	{
		GetPlayerName(declare, turner, sizeof(turner));
	}
	GetPlayerName(playerid, turned, sizeof(turned));
	if (PlayerInfo[playerid][pTeam] == 1)
	{
		gTeam[playerid] = 1;
	}
	else
	{
		gTeam[playerid] = 3;
	}
	if (flash)
	{
		FlashTime[playerid] = 10;
	}
	else
	{
		SetPlayerToTeamColor(playerid);
	}
	format(turnmes, sizeof(turnmes), "%s, Because You %s, You Are No Longer A Criminal, Sender: 8 Ball (555)",turned,reason);
	RingTone[playerid] = 20;
	SendClientMessage(playerid, COLOR_YELLOW, turnmes);
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) && (gTeam[i]) == 2)
		{
			format(crbjstore, sizeof(crbjstore), "Officer %s Has Released A Suspect, He is no longer wanted.",turner);
			SendClientMessage(i, TEAM_BLUE_COLOR, crbjstore);
			format(crbjstore, sizeof(crbjstore), "Police HQ: %s Has Been Released, %s",turned,reason);
			SendClientMessage(i, TEAM_BLUE_COLOR, crbjstore);
		}
	}
}
public OffTheHook()
{
	if (gdebug >= 1){printf("DEBUG OffTheHook()");}
	new hookoff[128];
	new offhookn[MAX_PLAYER_NAME];
	new mission = gPlayerMission[gPublicEnemy];
	if(mission == 4)
	{
		mission = random(3)+1;
	}
	switch (mission)
	{
		case 1:
		{
			PlayerInfo[gPublicEnemy][pCB]++;
			//PlayerInfo[gPublicEnemy][pRank] = PlayerInfo[gPublicEnemy][pRank]+750;
		    PlayerInfo[gPublicEnemy][pTmpRank] = PlayerInfo[gPublicEnemy][pTmpRank]+750;
			PlayerInfo[gPublicEnemy][pCBz]++;
			PlayerInfo[gPublicEnemy][pTmpMission]++;
			if(PlayerInfo[gPublicEnemy][pCB] >= 4)
			{
				PlayerInfo[gPublicEnemy][pExp]++;
				PlayerInfo[gPublicEnemy][pCB] = 0;
				SendClientMessage(gPublicEnemy, COLOR_YELLOW, "You are getting stronger Exp +1");
			}
		}
		case 2:
		{
			PlayerInfo[gPublicEnemy][pSR]++;
			if(PlayerInfo[gPublicEnemy][pSR] >= 4)
			{
				PlayerInfo[gPublicEnemy][pExp]++;
				PlayerInfo[gPublicEnemy][pSR] = 0;
				SendClientMessage(gPublicEnemy, COLOR_YELLOW, "You are getting stronger Exp +1");
			}
		}
		case 3:
		{
			PlayerInfo[gPublicEnemy][pHW]++;
			if(PlayerInfo[gPublicEnemy][pHW] >= 4)
			{
				PlayerInfo[gPublicEnemy][pExp]++;
				PlayerInfo[gPublicEnemy][pHW] = 0;
				SendClientMessage(gPublicEnemy, COLOR_YELLOW, "You are getting stronger Exp +1");
			}
			if(PlayerInfo[gPublicEnemy][pTmpMission] >= 10)
			{
				PlayerInfo[gPublicEnemy][gPupgrade] = PlayerInfo[gPublicEnemy][gPupgrade]+1;
				PlayerInfo[gPublicEnemy][pTmpMission] = 0;
				SendClientMessage(gPublicEnemy, COLOR_YELLOW, "Upgrades + 1");
			}
		}
		case 4:
		{
		    //PlayerInfo[gPublicEnemy][pRank] = PlayerInfo[gPublicEnemy][pRank]+500;
		    PlayerInfo[gPublicEnemy][pTmpRank] = PlayerInfo[gPublicEnemy][pTmpRank]+500;
			PlayerInfo[gPublicEnemy][pSR]++;
			PlayerInfo[gPublicEnemy][pSRz]++;
			PlayerInfo[gPublicEnemy][pTmpMission]++;
			if(PlayerInfo[gPublicEnemy][pSR] >= 4)
			{
				PlayerInfo[gPublicEnemy][pExp]++;
				PlayerInfo[gPublicEnemy][pSR] = 0;
				SendClientMessage(gPublicEnemy, COLOR_YELLOW, "Experience Gained +1");
			}
			if(PlayerInfo[gPublicEnemy][pTmpMission] >= 10)
			{
				PlayerInfo[gPublicEnemy][gPupgrade] = PlayerInfo[gPublicEnemy][gPupgrade]+1;
				PlayerInfo[gPublicEnemy][pTmpMission] = 0;
				SendClientMessage(gPublicEnemy, COLOR_YELLOW, "Upgrades + 1");
			}
		}
		case 5:
		{
		    //PlayerInfo[gPublicEnemy][pRank] = PlayerInfo[gPublicEnemy][pRank]+500;
		    PlayerInfo[gPublicEnemy][pTmpRank] = PlayerInfo[gPublicEnemy][pTmpRank]+500;
			PlayerInfo[gPublicEnemy][pHW]++;
			PlayerInfo[gPublicEnemy][pHWz]++;
			PlayerInfo[gPublicEnemy][pTmpMission]++;
			if(PlayerInfo[gPublicEnemy][pHW] >= 4)
			{
				PlayerInfo[gPublicEnemy][pExp]++;
				PlayerInfo[gPublicEnemy][pHW] = 0;
				SendClientMessage(gPublicEnemy, COLOR_YELLOW, "Eperience Gained +1");
			}
			if(PlayerInfo[gPublicEnemy][pTmpMission] >= 10)
			{
				PlayerInfo[gPublicEnemy][gPupgrade] = PlayerInfo[gPublicEnemy][gPupgrade]+1;
				PlayerInfo[gPublicEnemy][pTmpMission] = 0;
				SendClientMessage(gPublicEnemy, COLOR_YELLOW, "Upgrades + 1");
			}
		}
		default:
		{
		}
	}
	SetPlayerToTeamColor(gPublicEnemy);
	GetPlayerName(gPublicEnemy, offhookn, sizeof(offhookn));
	format(hookoff, sizeof(hookoff), "::News:: %s , Evaded the San Fierro Police.",offhookn);
	RingTone[gPublicEnemy] = 20;
	SendClientMessageToAll(COLOR_YELLOW, hookoff);
	SetPlayerWantedLevel(gPublicEnemy,0);
	gPublicEnemy = INVALID_PLAYER_ID;
	return 1;
}

public CellPhoneTimer()
{
	if (gdebug >= 3){printf("DEBUG CellPhoneTimer()");}
	new string[64];
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(CellTime[i] > 0)
			{
				if (CellTime[i] == cchargetime)
				{
					CellTime[i] = 1;
					if(Mobile[Mobile[i]] == i)
					{
						CallCost[i] = CallCost[i]+callcost;
					}
				}
				//printf("CellTime %d %d",i,CellTime[i]);
				CellTime[i] = CellTime[i] +1;
				//printf("callers line %d called %d caller %d",Mobile[Mobile[i]],Mobile[i],i);
				if (Mobile[Mobile[i]] == 255 && CellTime[i] == 5)
				{
					new called[MAX_PLAYER_NAME];
					GetPlayerName(Mobile[i], called, sizeof(called));
					format(string, sizeof(string), "* %s's phone rings.", called);
					RingTone[Mobile[i]] = 10;
					ProxDetector(30.0, Mobile[i], string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
			}
			if(CellTime[i] == 0 && CallCost[i] > 0)
			{
				format(string, sizeof(string), "~w~The call cost~n~~r~$%d",CallCost[i]);
				GiveMoney(i, -CallCost[i]);
				BizzInfo[8][bTakings] += CallCost[i];
				GameTextForPlayer(i, string, 5000, 1);
				CallCost[i] = 0;
			}

		}
	}
}

public SetPlayerFlash()
{
	if (gdebug >= 2){printf("DEBUG SetPlayerFlash()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if (gPublicEnemy == i || gSuperCop == i)
		{
			FlashTime[i] = 3;
		}
		if(IsPlayerConnected(i) == 1 && FlashTime[i] > 0)
		{
			//printf("flashtime %d %d",i,FlashTime[i]);
			FlashTime[i]--;
			SetPlayerToTeamColorFlash(i);
		}
	}
	SetTimer("SetPlayerFlashRev", 1000, 0);
	return 1;
}

public SetPlayerFlashRev()
{
	if (gdebug >= 2){printf("DEBUG SetPlayerFlashRev()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && FlashTime[i] > 1)
		{
			FlashTime[i]--;
			//printf("flashtime %d %d",i,FlashTime[i]);
			SetPlayerColor(i,COLOR_INVIS); // invisibil
		}
	}
	SetTimer("SetPlayerFlash", 1000, 0);
	return 1;
}


public RingToner()
{
	if (gdebug >= 2){printf("DEBUG RingToner()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && RingTone[i] != 6 && RingTone[i] != 0 && RingTone[i] < 11)
		{
			//printf("RingTone %d %d",i,RingTone[i]);
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1138, 0.0, 0.0, 0.0);
		}
		if(IsPlayerConnected(i) == 1 && RingTone[i] == 6)
		{
			RingTone[i] = RingTone[i] -1;
		}
		if(IsPlayerConnected(i) == 1 && RingTone[i] == 20)
		{
			//printf("RingTone %d %d",i,RingTone[i]);
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
		}
	}
	//RingTonerRev();
	SetTimer("RingTonerRev", 200, 0);
	return 1;
}

public RingTonerRev()
{
	if (gdebug >= 2){printf("DEBUG SetPlayerFlashRev()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1  && RingTone[i] != 5 && RingTone[i] != 0 && RingTone[i] < 10)
		{
			RingTone[i] = RingTone[i] -1;
			PlayerPlaySound(i, 1137, 0.0, 0.0, 0.0);
		}
		if(IsPlayerConnected(i) == 1 && RingTone[i] == 5)
		{
			RingTone[i] = RingTone[i] -1;
		}
		if(IsPlayerConnected(i) == 1 && RingTone[i] == 19)
		{
			//printf("RingTone %d %d",i,RingTone[i]);
			PlayerPlaySound(i, 1139, 0.0, 0.0, 0.0);
			RingTone[i] = 0;
		}
	}
	SetTimer("RingToner", 500, 0);
	return 1;
}

public SetPlayerUnjail()
{
	if (gdebug >= 3){printf("DEBUG SetPlayerUnjail()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && JailTime[i] < 0)
		{
			JailTime[i]++;
			//printf("JailTime %d %d",i,JailTime[i]);
		}
		if(IsPlayerConnected(i) == 1 && JailTime[i] > 0)
		{
			JailTime[i]--;
			//printf("JailTime %d %d",i,JailTime[i]);
		}
		if(IsPlayerConnected(i) == 1 && JailTime[i] == 10)
		{
			new string[128];
			//printf("JailTime %d %d",i,JailTime[i]);
			FlashTime[i] = 0;
		//	SetPlayerPos(i,268.3,77.4,1001.0);
			SendClientMessage(i, COLOR_GRAD1,"   You have paid your debt to society.");
			format(string, sizeof(string), "~g~Freedom~n~~w~Try to be a better citizen");
			GameTextForPlayer(i, string, 5000, 5);
			PlayJailSound(1165 , 1166, 1000,264.395200, 77.564040, 1001.039000);
			SetPlayerInterior(i,0);
			SetPlayerPos(i,-1605.51,712.34,13.87);
			gCuffed[i]=0;
			TogglePlayerControllable(i,1);
		}
	}
}

public VoteKickTimer()
{
	if (gdebug >= 3){printf("DEBUG VoteKickTimer()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && VoteKick[i] > 0)
		{
			VoteKick[i]++;
			//printf("VoteKick %d VoteKick[%d] KickVote[%d]",i,VoteKick[i],KickVote[i]);
			if(IsPlayerConnected(i) == 1 && VoteKick[i] == 20)
			{
				if(KickVote[i] >= numplayers/4)
				{
					new string[128];
					new accused[MAX_PLAYER_NAME];
					GetPlayerName(i, accused, sizeof(accused));
					format(string, sizeof(string), "VOTE SUCCESS: %s has been voted out of the server",accused);
					BroadCast(COLOR_RED,string);
					ClearVote(i);
					Kick(i);
				}
				else
				{
					new string[128];
					new accused[MAX_PLAYER_NAME];
					GetPlayerName(i, accused, sizeof(accused));
					format(string, sizeof(string), "VOTE FAILED: %s will not be Pawned",accused);
					BroadCast(COLOR_RED,string);
					ClearVote(i);
				}
			}
		}
	}
}

ClearVote(kickedid)
{
	KickVote[kickedid] = 0;
	VoteKick[kickedid] = 0;
	for(new j = 0; j <= MAX_PLAYERS; j++)
	{
		if(IsPlayerConnected(j) == 1 && LastVote[j] == kickedid)
		{
			LastVote[j] = 255;
		}
	}
}



public SetPlayerWeapons(playerid)
{
	if (gdebug >= 1){printf("DEBUG SetPlayerWeapons(%d)",playerid);}
	//ResetPlayerWeapons(playerid);
	if(PlayerInfo[playerid][pGun1] == 0)
	{
		PlayerInfo[playerid][pGun1] = 23;
	}
	if (PlayerInfo[playerid][pGun1] > 0)
	{
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun1], PlayerInfo[playerid][pAmmo1]);
	}
	if(gTeam[playerid] == 1)
	{
		GivePlayerWeapon(playerid, 4, 0);
	}
	if(gTeam[playerid] == 2)
	{
		GivePlayerWeapon(playerid, 3, 0);
		GivePlayerWeapon(playerid, 41, 500); //spray
	}
	if(gTeam[playerid] >= 3)
	{
		GivePlayerWeapon(playerid, 5, 0);
	}
	if (PlayerInfo[playerid][pGun2] > 0)
	{
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun2], PlayerInfo[playerid][pAmmo2]);
	}
	if (PlayerInfo[playerid][pGun3] > 0)
	{
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun3], PlayerInfo[playerid][pAmmo3]);
	}
	if (PlayerInfo[playerid][pGun4] > 0)
	{
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun4], PlayerInfo[playerid][pAmmo4]);
	}
	if (PlayerInfo[playerid][pGun5] > 0)
	{
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun5], PlayerInfo[playerid][pAmmo5]);
	}
	if (PlayerInfo[playerid][pGun6] > 0)
	{
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun6], PlayerInfo[playerid][pAmmo6]);
	}
	if (PlayerInfo[playerid][pGun7] > 0)
	{
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun7], PlayerInfo[playerid][pAmmo7]);
	}
	if (PlayerInfo[playerid][pGun8] > 0)
	{
		GivePlayerWeapon(playerid, PlayerInfo[playerid][pGun8], PlayerInfo[playerid][pAmmo8]);
	}
}

PrintSBizInfo(playerid,targetid)
{
	new coordsstring[256];
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	format(coordsstring, sizeof(coordsstring),"*** %s ***",SBizzInfo[targetid][sbDiscription]);
	SendClientMessage(playerid, COLOR_WHITE,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Locked: %d EntryFee: $%d Till: $%d", SBizzInfo[targetid][sbLock], SBizzInfo[targetid][sbEntcost], SBizzInfo[targetid][sbTakings]);
	SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Product: %d/%d Components: %d/%d", SBizzInfo[targetid][sbProd],SBizzInfo[targetid][sbProdCap],SBizzInfo[targetid][sbComp],SBizzInfo[targetid][sbCompCap]);
	SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Products Per Component: %d Paying $%d",SBizzInfo[targetid][sbProdCost],SBizzInfo[targetid][sbPayComp]);
	SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Product Cost $%d",(SBizzInfo[targetid][sbPayComp]/SBizzInfo[targetid][sbProdCost]));
	SendClientMessage(playerid, COLOR_GRAD4,coordsstring);
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
}

PrintBizInfo(playerid,targetid)
{
	new coordsstring[256];
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	format(coordsstring, sizeof(coordsstring),"*** %s ***",BizzInfo[targetid][bDiscription]);
	SendClientMessage(playerid, COLOR_WHITE,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Locked: %d EntryFee: $%d Till: $%d", BizzInfo[targetid][bLock], BizzInfo[targetid][bEntcost], BizzInfo[targetid][bTakings]);
	SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Product: %d/%d Components: %d/%d", BizzInfo[targetid][bProd],BizzInfo[targetid][bProdCap],BizzInfo[targetid][bComp],BizzInfo[targetid][bCompCap]);
	SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Products Per Component: %d Paying $%d",BizzInfo[targetid][bProdCost],BizzInfo[targetid][bPayComp]);
	SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Product Cost $%d PriceMod %d%",(BizzInfo[targetid][bPayComp]/BizzInfo[targetid][bProdCost]), BizzInfo[targetid][bPriceMod]);
	SendClientMessage(playerid, COLOR_GRAD4,coordsstring);
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
}

public PrintKillStats(playerid,targetid)
{
	new pdildo = PlayerInfo[targetid][pDildoK];
	new pflower = PlayerInfo[targetid][pFlowerK];
	new pcane = PlayerInfo[targetid][pCaneK];
	new pgrenade = PlayerInfo[targetid][pGrenadeK];
	//new pgas = PlayerInfo[targetid][pGasK];
	new pmolotov = PlayerInfo[targetid][pMolotovK];
	new pcolt = PlayerInfo[targetid][pColtK];
	new psp = PlayerInfo[targetid][pSPK];
	new pdeagle = PlayerInfo[targetid][pDeagleK];
	new ppshot = PlayerInfo[targetid][pPShotK];
	new psawn = PlayerInfo[targetid][pSawnK];
	new pspas = PlayerInfo[targetid][pSpas12K];
	new puzi = PlayerInfo[targetid][pUziK];
	new pmp5 = PlayerInfo[targetid][pMP5K];
	new pak47 = PlayerInfo[targetid][pAK47K];
	new pm4 = PlayerInfo[targetid][pM4K];
	new ptec9 = PlayerInfo[targetid][pTec9K];
	new prifle = PlayerInfo[targetid][pRifleK];
	new prpg = PlayerInfo[targetid][pRPGK];
	//new phsrl = PlayerInfo[targetid][pHSRLK];
	new pflame = PlayerInfo[targetid][pFlameK];
	new pmini = PlayerInfo[targetid][pMiniK];
	//new psatchel = PlayerInfo[targetid][pSatchelK];
	new pspray = PlayerInfo[targetid][pSprayK];
	new pfist = PlayerInfo[targetid][pFistK];
	//new pbrass = PlayerInfo[targetid][pBrassK];
	new pgolf = PlayerInfo[targetid][pGolfK];
	new pnights = PlayerInfo[targetid][pNightSK];
	new pbat = PlayerInfo[targetid][pBatK];
	new pshovel = PlayerInfo[targetid][pShovelK];
	new ppoolc = PlayerInfo[targetid][pPoolCK];
	new pkatana = PlayerInfo[targetid][pKatanaK];
	new pchainsaw = PlayerInfo[targetid][pChainsawK];
	new pintim = PlayerInfo[targetid][pIntimK];
	new pknife = PlayerInfo[targetid][pKnifeK];
	new pfire = PlayerInfo[targetid][pFireEK];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(targetid, name, sizeof(name));
	new coordsstring[256];
 	format(coordsstring, sizeof(coordsstring),"*** Killing Statistics For %s",name);
	SendClientMessage(playerid, COLOR_WHITE,coordsstring);
	format(coordsstring, sizeof(coordsstring),"Intimidation:[%d] Fist:[%d] Golf-Club:[%d] Night-Stick:[%d] Knife:[%d] Bat:[%d] Shovel:[%d] Pool-Cue:[%d].",pintim,pfist,pgolf,pnights,pknife,pbat,pshovel,ppoolc);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring),"Katana:[%d] Chainsaw:[%d] Dildo:[%d] Flowers:[%d] Cane:[%d] Colt45:[%d] Silencer: [%d] Deagle:[%d].",pkatana,pchainsaw,pdildo,pflower,pcane,pcolt,psp,pdeagle);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring),"Pump-Shotty:[%d] Sawn-Off:[%d] Spas12:[%d] Mac10:[%d] Mp5:[%d] Tec9:[%d] AK-47:[%d] M4:[%d] Rifle:[%d].",ppshot,psawn,pspas,puzi,pmp5,ptec9,pak47,pm4,prifle);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring),"Flame-Thrower:[%d] Minigun:[%d] Pepper-Spray:[%d] Fire-Ex:[%d] Grenade:[%d] Molotov:[%d] Rpg:[%d]",pflame,pmini,pspray,pfire,pgrenade,pmolotov,prpg);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	}

public PrintDeathStats(playerid,targetid)
{
	new pdildo = PlayerInfo[targetid][pDildoD];
	new pflower = PlayerInfo[targetid][pFlowerD];
	new pcane = PlayerInfo[targetid][pCaneD];
	new pgrenade = PlayerInfo[targetid][pGrenadeD];
	new pmolotov = PlayerInfo[targetid][pMolotovD];
	new pcolt = PlayerInfo[targetid][pColtD];
	new psp = PlayerInfo[targetid][pSPD];
	new pdeagle = PlayerInfo[targetid][pDeagleD];
	new ppshot = PlayerInfo[targetid][pPShotD];
	new psawn = PlayerInfo[targetid][pSawnD];
	new pspas = PlayerInfo[targetid][pSpas12D];
	new puzi = PlayerInfo[targetid][pUziD];
	new pmp5 = PlayerInfo[targetid][pMP5D];
	new pak47 = PlayerInfo[targetid][pAK47D];
	new pm4 = PlayerInfo[targetid][pM4D];
	new ptec9 = PlayerInfo[targetid][pTec9D];
	new prifle = PlayerInfo[targetid][pRifleD];
	//new psrifle = PlayerInfo[targetid][pSrifleD];
	new prpg = PlayerInfo[targetid][pRPGD];
	//new phsrl = PlayerInfo[targetid][pHSRLD];
	new pflame = PlayerInfo[targetid][pFlameD];
	new pmini = PlayerInfo[targetid][pMiniD];
	//new psatchel = PlayerInfo[targetid][pSatchelD];
	new pspray = PlayerInfo[targetid][pSprayD];
	new pfist = PlayerInfo[targetid][pFistD];
	//new pbrass = PlayerInfo[targetid][pBrassD];
	new pgolf = PlayerInfo[targetid][pGolfD];
	new pnights = PlayerInfo[targetid][pNightSD];
	new pbat = PlayerInfo[targetid][pBatD];
	new pshovel = PlayerInfo[targetid][pShovelD];
	new ppoolc = PlayerInfo[targetid][pPoolCD];
	new pkatana = PlayerInfo[targetid][pKatanaD];
	new pchainsaw = PlayerInfo[targetid][pChainsawD];
	new pintim = PlayerInfo[targetid][pIntimD];
	new pknife = PlayerInfo[targetid][pKnifeD];
	new pfire = PlayerInfo[targetid][pFireED];
	new name[MAX_PLAYER_NAME];
	GetPlayerName(targetid, name, sizeof(name));
	new coordsstring[256];
 	format(coordsstring, sizeof(coordsstring),"*** Death Statistics For %s",name);
	SendClientMessage(playerid, COLOR_GRAD1, coordsstring);
	format(coordsstring, sizeof(coordsstring),"Intimidation:[%d] Fist:[%d] Golf-Club:[%d] Night-Stick:[%d] Knife:[%d] Bat:[%d] Shovel:[%d] Pool-Cue:[%d].",pintim,pfist,pgolf,pnights,pknife,pbat,pshovel,ppoolc);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring),"Katana:[%d] Chainsaw:[%d] Dildo:[%d] Flowers:[%d] Cane:[%d] Colt45:[%d] Silencer:[%d] Deagle:[%d].",pkatana,pchainsaw,pdildo,pflower,pcane,pcolt,psp,pdeagle);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring),"Pump-Shotty:[%d] Sawn-Off:[%d] Spas12:[%d] Mac10:[%d] Mp5:[%d] Tec9:[%d] AK-47:[%d] M4:[%d] Rifle:[%d].",ppshot,psawn,pspas,puzi,pmp5,ptec9,pak47,pm4,prifle);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring),"Flame-Thrower:[%d] Minigun:[%d] Pepper-Spray:[%d] Fire-Ex:[%d] Grenade:[%d] Molotov:[%d] Rpg:[%d]",pflame,pmini,pspray,pfire,pgrenade,pmolotov,prpg);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	}

public PrintPersonalWeapons(playerid,targetid)
{
	new wanted = PlayerInfo[targetid][pWantedlevel];
	new plevel = PlayerInfo[targetid][pLevel];
	new pkillz = PlayerInfo[targetid][pKillz];
	new pcbz = PlayerInfo[targetid][pCBz];
	new phwz = PlayerInfo[targetid][pHWz];
	new psrz = PlayerInfo[targetid][pSRz];
	new pwaz = PlayerInfo[targetid][pWAz];
	new ppenz = PlayerInfo[targetid][pPENz];
	new pdeathz = PlayerInfo[targetid][pDeathz];
	new pdmz = PlayerInfo[targetid][pDMz];
	new drowned = PlayerInfo[targetid][pDrowned];
	new fallen = PlayerInfo[targetid][pFell];
	new busted = PlayerInfo[targetid][pBusted];
	new dmd = PlayerInfo[targetid][pDMDeath];
	new dmk = PlayerInfo[targetid][pDMKill];
	new copk = PlayerInfo[targetid][pCopkill];
	new crimk = PlayerInfo[targetid][pCrimkill];
	new gangk = PlayerInfo[targetid][pGangkill];
	//new logs = PlayerInfo[targetid][pLogs];
	new mp = PlayerInfo[targetid][pCBz] + PlayerInfo[targetid][pSRz] + PlayerInfo[targetid][pHWz] + PlayerInfo[targetid][pPENz] + PlayerInfo[targetid][pDMz];
	new Float:ratio;
	new Float:killy;
	new Float:deathy;
	killy = PlayerInfo[targetid][pKillz];
	deathy = PlayerInfo[targetid][pDeathz];
 	ratio = killy / deathy;
	new name[MAX_PLAYER_NAME];
	GetPlayerName(targetid, name, sizeof(name));
	new Float:Shealth;
	GetPlayerHealth(targetid,Shealth);
	//new hp = Shealth;
	new coordsstring[256];
 	format(coordsstring, sizeof(coordsstring),"*** Statistics For %s - Level %d",name,plevel);
	SendClientMessage(playerid, COLOR_WHITE,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Missions Passed:[%d]  Ratio:[%.2f] ",mp,ratio);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Kills:[%d] Deaths:[%d] Current HP:[%.1f]",pkillz,pdeathz,Shealth);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Times Drowned:[%d] Times Splattered:[%d] Times Busted:[%d] Times Been Most Wanted:[%d]",drowned,fallen,busted,wanted);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Most Wanted Kills:[%d] MoneyBags:[%d] HotWires:[%d] StreetRaces:[%d]  ServicePoints:[%d] DeathMatches:[%d]",ppenz,pcbz,phwz,psrz,pwaz,pdmz);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "DM Kills:[%d] DM Deaths:[%d] Cops Wasted:[%d] Criminals Wasted:[%d] Gangs Members Wasted:[%d]",dmk,dmd,copk,crimk,gangk);
	SendClientMessage(playerid,COLOR_GRAD1,coordsstring);
	}

public PrintPlayerWeapons(playerid,targetid)
{
	if (gdebug >= 1){printf("DEBUG PrintPlayerWeapons(%d %d)",playerid,targetid);}
	new cash =  GetPlayerMoney(targetid);
	//new admin = PlayerInfo[targetid][pAdmin];//[DIAMOND3]
    new rank = PlayerInfo[targetid][pRank];
	new level = PlayerInfo[targetid][pLevel];
	new exp = PlayerInfo[targetid][pExp];
	new gun1 = PlayerInfo[targetid][pGun1];
	new gun2 = PlayerInfo[targetid][pGun2];
	new gun3 = PlayerInfo[targetid][pGun3];
	new gun4 = PlayerInfo[targetid][pGun4];
	new gun5 = PlayerInfo[targetid][pGun5];
	new gun6 = PlayerInfo[targetid][pGun6];
	new ammo1 = PlayerInfo[targetid][pAmmo1];
	new ammo2 = PlayerInfo[targetid][pAmmo2];
	new ammo3 = PlayerInfo[targetid][pAmmo3];
	new ammo4 = PlayerInfo[targetid][pAmmo4];
	new ammo5 = PlayerInfo[targetid][pAmmo5];
	new ammo6 = PlayerInfo[targetid][pAmmo6];
	new kills = PlayerInfo[targetid][pKills];
	new pcb = PlayerInfo[targetid][pCB];
	new phw = PlayerInfo[targetid][pHW];
	new psr = PlayerInfo[targetid][pSR];
	new psp = PlayerInfo[targetid][pSP];
	//new pbd = PlayerInfo[targetid][pBD];
	//new pdb = PlayerInfo[targetid][pDB];
	new dmkills = PlayerInfo[playerid][pTmpDMkill];
	new logs = PlayerInfo[playerid][pLogs];
	new tmpmiss = PlayerInfo[playerid][pTmpMission];
	new pfug = PlayerInfo[targetid][pFUG];
	new pnumber = PlayerInfo[targetid][pPnumber];
	new account = PlayerInfo[targetid][pAccount];
	new nxtlevel = PlayerInfo[targetid][pLevel]+1;
	new expamount = nxtlevel*levelexp;
	new costlevel = nxtlevel*levelcost;//10k for testing purposes
	new housekey = PlayerInfo[targetid][pPhousekey];
	new bizkey = PlayerInfo[targetid][pPbiskey];
	new pwarnl = PlayerInfo[targetid][pWarnL]; // changed from player to target
	new intir = PlayerInfo[targetid][pInt]; // changed from player to target
	new local = PlayerInfo[targetid][pLocal]; // changed from player to target
	new Float:armour=PlayerInfo[targetid][pSArmour];
	new Float:shealth = PlayerInfo[targetid][pSHealth];
	new Float:health;
	new name[MAX_PLAYER_NAME];
	new sgun1[20];
	new sgun2[20];
	new sgun3[20];
	new sgun4[20];
	new sgun5[20];
	new sgun6[20];
	GetWeaponName(gun1, sgun1, 20);
	GetWeaponName(gun2, sgun2, 20);
	GetWeaponName(gun3, sgun3, 20);
	GetWeaponName(gun4, sgun4, 20);
	GetWeaponName(gun5, sgun5, 20);
	GetWeaponName(gun6, sgun6, 20);
	GetPlayerName(targetid, name, sizeof(name));
	GetPlayerHealth(targetid,health);
	new Float:px,Float:py,Float:pz;
	GetPlayerPos(targetid, px, py, pz);
	new coordsstring[256];
	//format(coordsstring, sizeof(coordsstring), "%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%.1f,%.1f,%.1f,%.1f,%.1f", PlayerInfo[playerid][pPassword], cash, admin, level,gun1,gun2,gun3,gun4,gun5,gun6,ammo1,ammo2,ammo3,ammo4,ammo5,ammo6,shealth,health, px, py, pz);
	//SendClientMessage(playerid, TEAM_BLUE_COLOR, coordsstring);
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	format(coordsstring, sizeof(coordsstring),"*** %s ***",name);
	SendClientMessage(playerid, COLOR_WHITE,coordsstring);
	format(coordsstring, sizeof(coordsstring), "PlayerLevel: [%d] SpawnHealth: %.1f SpawnArmour: %.1f Cash: [$%d] Bank: [$%d] Ph: [%d]", level, shealth+50, armour, cash, account, pnumber);
	SendClientMessage(playerid, COLOR_GRAD1,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Weapons: %s %s %s %s %s %s", sgun1,sgun2,sgun3,sgun4,sgun5,sgun6);
	SendClientMessage(playerid, COLOR_GRAD2,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Ammo1: [%d] Ammo2: [%d] Ammo3: [%d] Ammo4: [%d] Ammo5: [%d] Ammo6: [%d]", ammo1,ammo2,ammo3,ammo4,ammo5,ammo6);
	SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
	format(coordsstring, sizeof(coordsstring), "Logs:[%d] Mission:[%d/10] DM Kills:[%d/100] Warnings[%d] ",logs,tmpmiss,dmkills,pwarnl);
	SendClientMessage(playerid, COLOR_GRAD3,coordsstring);
	if (stats)
	{
		format(coordsstring, sizeof(coordsstring), "Briefcase: [%d/4] HotWire: [%d/4] StreetRace: [%d/4] Service: [%d/20] ",pcb,phw,psr,psp);
		SendClientMessage(playerid, COLOR_GRAD4,coordsstring);
		format(coordsstring, sizeof(coordsstring), "Kills: [%d/30] Fugitive Kills: [%d/4]  NextLevel: [$%d] Exp: [%d/%d] Rank:[%d]",kills,pfug,costlevel,exp,expamount,rank);
		SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		/*
		if(expamount <= exp)
		{
			SendClientMessage(playerid, COLOR_RED,coordsstring);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD5,coordsstring);
		}
		*/
	}
	if (IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin] >= 101  || FugitiveCore[playerid] == 1)
	{
		format(coordsstring, sizeof(coordsstring), "House key [%d] Business key [%d] HireKey [%d] int:[%d] local[%d]", housekey,bizkey,HireCar[targetid],intir,local);
		SendClientMessage(playerid, COLOR_GRAD6,coordsstring);
	}
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
}
SetPlayerToTeamColor(playerid)
{
	if(gTeam[playerid] == TEAM_GREEN)
	{
		SetPlayerColor(playerid,TEAM_GREEN_COLOR); // red
	}
	else if(gTeam[playerid] == TEAM_BLUE)
	{
	    SetPlayerColor(playerid,TEAM_BLUE_COLOR); // blue
	}
	else if(gTeam[playerid] == TEAM_ORANGE)
	{
	    SetPlayerColor(playerid,TEAM_ORANGE10_COLOR); // blue
	}
	else if(gTeam[playerid] == TEAM_BALLAS)
	{
	    SetPlayerColor(playerid,TEAM_BALLAS10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_GROVE)
	{
	    SetPlayerColor(playerid,TEAM_GROVE10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_VAGOS)
	{
	    SetPlayerColor(playerid,TEAM_VAGOS10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_AZTECAS)
	{
	    SetPlayerColor(playerid,TEAM_AZTECAS10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_NANG)
	{
	    SetPlayerColor(playerid,TEAM_NANG10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_RIFA)
	{
	    SetPlayerColor(playerid,TEAM_RIFA10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_MAFIA)
	{
	    SetPlayerColor(playerid,TEAM_MAFIA10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_RMAFIA)
	{
	    SetPlayerColor(playerid,TEAM_RMAFIA10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_TRIADS)
	{
	    SetPlayerColor(playerid,TEAM_TRIADS10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_BIKERS)
	{
	    SetPlayerColor(playerid,TEAM_BIKERS10_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_SMITH)
	{
	    SetPlayerColor(playerid,TEAM_SMITH_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_CYAN)
	{
	    SetPlayerColor(playerid,TEAM_CYAN_COLOR); // blue
	}
}

SetPlayerToTeamColorFlash(playerid)
{
	if(gTeam[playerid] == TEAM_GREEN)
	{
		SetPlayerColor(playerid,TEAM_GREEN_COLOR); // red
	}
	else if(gTeam[playerid] == TEAM_BLUE)
	{
	    SetPlayerColor(playerid,TEAM_BLUE_COLOR); // blue
	}
	else if(gTeam[playerid] == TEAM_ORANGE)
	{
	    SetPlayerColor(playerid,TEAM_ORANGE_COLOR); // blue
	}
	else if(gTeam[playerid] == TEAM_BALLAS)
	{
	    SetPlayerColor(playerid,TEAM_BALLAS_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_GROVE)
	{
	    SetPlayerColor(playerid,TEAM_GROVE_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_VAGOS)
	{
	    SetPlayerColor(playerid,TEAM_VAGOS_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_AZTECAS)
	{
	    SetPlayerColor(playerid,TEAM_AZTECAS_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_NANG)
	{
	    SetPlayerColor(playerid,TEAM_NANG_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_RIFA)
	{
	    SetPlayerColor(playerid,TEAM_RIFA_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_MAFIA)
	{
	    SetPlayerColor(playerid,TEAM_MAFIA_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_RMAFIA)
	{
	    SetPlayerColor(playerid,TEAM_RMAFIA_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_TRIADS)
	{
	    SetPlayerColor(playerid,TEAM_TRIADS_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_BIKERS)
	{
	    SetPlayerColor(playerid,TEAM_BIKERS_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_SMITH)
	{
	    SetPlayerColor(playerid,TEAM_SMITH_COLOR); // purple
	}
	else if(gTeam[playerid] == TEAM_CYAN)
	{
	    SetPlayerColor(playerid,TEAM_CYAN_COLOR); // blue
	}
}

//---------------------------------------------------------

public GameModeInitExitFunc()
{
	if (gdebug >= 1){printf("DEBUG GameModeInitExitFunc()");}
	new string[128];
	format(string, sizeof(string), "-= Restarting =-");
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			DisablePlayerCheckpoint(i);
			gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			if (gdebug){print("DEBUG CHECKPOINT_NONE3");}
			GameTextForPlayer(i, string, 4000, 5);
			if (gdebug){printf("DEBUG %s", string);}
			SetPlayerCameraPos(i,-1475.0519,656.1857,176.8777);
			SetPlayerCameraLookAt(i,-1737.6381,868.3925,157.4400);
			OnPlayerUpdate(i);
			gPlayerLogged[i] = 0;
		}
	}
	SetTimer("GameModeExitFunc", 4000, 0);
	return 1;
}

public GameModeExitFunc()
{
	KillTimer(synctimer);
	KillTimer(newmistimer);
	KillTimer(unjailtimer);
	KillTimer(playertimer);
	KillTimer(cartimer);
	KillTimer(celltimer);
	GameModeExit();
}

//--------------------------------Config--------------------------------------------------------------
public LoadConfig()
{
	print(" ");
	print("Loading Config......");
	if (gdebug){print("DEBUG is on");}
	new valtmp[128];
	new File: file = fopen("fugitive.cfg", io_read);
	fread(file, valtmp);strmid(motd, valtmp, 0, strlen(valtmp)-1, 255);
	fread(file, valtmp);GetVal(valtmp);fow = RetVal;
	fread(file, valtmp);GetVal(valtmp);radardist = RetVal;
	fread(file, valtmp);GetVal(valtmp);radarfreq = RetVal;
	fread(file, valtmp);GetVal(valtmp);addtimer = RetVal*1000;
	fread(file, valtmp);GetVal(valtmp);stats = RetVal;
	fread(file, valtmp);GetVal(valtmp);dollah = RetVal;
	fread(file, valtmp);GetVal(valtmp);realtime = RetVal;
	fread(file, valtmp);GetVal(valtmp);timeshift = RetVal;
	fread(file, valtmp);GetVal(valtmp);wtime = RetVal;
	fread(file, valtmp);GetVal(valtmp);gRoundTime = RetVal*60000;
	fread(file, valtmp);GetVal(valtmp);briefcase = RetVal;
	fread(file, valtmp);GetVal(valtmp);streetrace = RetVal;
	fread(file, valtmp);GetVal(valtmp);hotwire = RetVal;
	fread(file, valtmp);GetVal(valtmp);levelcost = RetVal;
	fread(file, valtmp);GetVal(valtmp);basedcost = RetVal;
	fread(file, valtmp);GetVal(valtmp);deathcost = RetVal;
	fread(file, valtmp);GetVal(valtmp);suecost = RetVal;
	fread(file, valtmp);GetVal(valtmp);paycheck = RetVal;
	fread(file, valtmp);GetVal(valtmp);jobdelay = RetVal;
	fread(file, valtmp);GetVal(valtmp);petime = RetVal*60000;
	fread(file, valtmp);GetVal(valtmp);realchat = RetVal;
	fread(file, valtmp);GetVal(valtmp);forceteam = RetVal;
	fread(file, valtmp);GetVal(valtmp);cchargetime = RetVal;
	fread(file, valtmp);GetVal(valtmp);callcost = RetVal;
	fread(file, valtmp);GetVal(valtmp);txtcost = RetVal;
	fread(file, valtmp);GetVal(valtmp);jailtime = RetVal;
	fread(file, valtmp);GetVal(valtmp);intrate = RetVal;
	fread(file, valtmp);GetVal(valtmp);teamcarlock = RetVal;
	fread(file, valtmp);GetVal(valtmp);levelexp = RetVal;
	fread(file, valtmp);GetVal(valtmp);nocasino = RetVal;
	fread(file, valtmp);GetVal(valtmp);automission = RetVal;
	fread(file, valtmp);GetVal(valtmp);civnokill = RetVal;
	fread(file, valtmp);GetVal(valtmp);accountplay = RetVal;
	fread(file, valtmp);GetVal(valtmp);mediccharge = RetVal;
	fclose(file);
	print(".....Config Settings Loaded");
	printf("%s %d %d %d %d %d %d %d %d %d %d %d %d %d %d %d",motd,dollah,realtime,timeshift,wtime,gRoundTime,briefcase,streetrace,hotwire,levelcost,deathcost,paycheck,jobdelay,petime,realchat,forceteam);
}
//------------------------------------------------------------------------------------------------------
public GetVal(string[])
{
	new tmp[32];
	new idx;
	tmp = strtok(string, idx);
	tmp = strtok(string, idx);
	RetVal = strval(tmp);
	strmid(string, string, 0, strlen(string)-1, 255);
	printf("%s",string);
}

/*SaveRace(playerid,name[])
{
		new coordsstring[256];
		new racename[64];
		new makername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, makername, sizeof(makername));
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%s,%s,%d,%d",
		RaceInfo[rStartx],
		RaceInfo[rStarty],
		RaceInfo[rStartz],
		RaceInfo[rMidx],
		RaceInfo[rMidy],
		RaceInfo[rMidz],
		RaceInfo[rMid2x],
		RaceInfo[rMid2y],
		RaceInfo[rMid2z],
		RaceInfo[rEndx],
		RaceInfo[rEndy],
		RaceInfo[rEndz],
		makername,
		"none",
		0,
		RaceInfo[rLaps]);
		format(racename, sizeof(racename), "%s.race",name);
		new File: file2 = fopen(racename, io_write);
		fwrite(file2, coordsstring);
		fclose(file2);
		format(coordsstring, sizeof(coordsstring), "%s Race Saved",name);
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
//		return 1;
}*/

/*BestTime(name[])
{
		print("BestTime");
		new coordsstring[256];
		new racename[64];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%f,%s,%s,%d,%d",
		RaceInfo[rStartx],
		RaceInfo[rStarty],
		RaceInfo[rStartz],
		RaceInfo[rMidx],
		RaceInfo[rMidy],
		RaceInfo[rMidz],
		RaceInfo[rMid2x],
		RaceInfo[rMid2y],
		RaceInfo[rMid2z],
		RaceInfo[rEndx],
		RaceInfo[rEndy],
		RaceInfo[rEndz],
		RaceInfo[rName],
		RaceInfo[rBest],
		RaceInfo[rBestms],
		RaceInfo[rLaps]);
		format(racename, sizeof(racename), "%s.race",name);
		new File: file2 = fopen(racename, io_write);
		fwrite(file2, coordsstring);
		fclose(file2);
//		return 1;
}*/

LoadTmp()
{
	new arrCoords[4][64];
	new strFromFile2[64];
	new File: file = fopen("tmppos.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(Teletmp))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			Teletmp[idx][pTmpposx] = floatstr(arrCoords[0]);
			Teletmp[idx][pTmpposy] = floatstr(arrCoords[1]);
			Teletmp[idx][pTmpposz] = floatstr(arrCoords[2]);
			Teletmp[idx][pTmpint] = strval(arrCoords[3]);
			idx++;
		}
	}
	fclose(file);
//	return 1;
}


/*LoadRace(playerid,name[])
{
	if (gdebug >= 1){printf("DEBUG Loadrace(%d,%s)",playerid,name);}
	new arrCoords[16][64];
	new strFromFile2[256];
	new racename[64];
	strmid(CurrentRace, name, 0, strlen(name), 255);
	format(racename, sizeof(racename), "%s.race",name);
	new File: file = fopen(racename, io_read);
	if (file)
	{
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		RaceInfo[rStartx] = floatstr(arrCoords[0]);
		RaceInfo[rStarty] = floatstr(arrCoords[1]);
		RaceInfo[rStartz] = floatstr(arrCoords[2]);
		RaceInfo[rMidx] = floatstr(arrCoords[3]);
		RaceInfo[rMidy] = floatstr(arrCoords[4]);
		RaceInfo[rMidz] = floatstr(arrCoords[5]);
		RaceInfo[rMid2x] = floatstr(arrCoords[6]);
		RaceInfo[rMid2y] = floatstr(arrCoords[7]);
		RaceInfo[rMid2z] = floatstr(arrCoords[8]);
		RaceInfo[rEndx] = floatstr(arrCoords[9]);
		RaceInfo[rEndy] = floatstr(arrCoords[10]);
		RaceInfo[rEndz] = floatstr(arrCoords[11]);
		strmid(RaceInfo[rName], arrCoords[12], 0, strlen(arrCoords[12]), 255);
		strmid(RaceInfo[rBest], arrCoords[13], 0, strlen(arrCoords[13]), 255);
		RaceInfo[rBestms] = strval(arrCoords[14]);
		RaceInfo[rLaps] = strval(arrCoords[15]);
		rsx = RaceInfo[rStartx];rsy = RaceInfo[rStarty];rsz =RaceInfo[rStartz];
		rmx = RaceInfo[rMidx];rmy = RaceInfo[rMidy];rmz = RaceInfo[rMidz];
		rm2x = RaceInfo[rMid2x];rm2y = RaceInfo[rMid2y];rm2z = RaceInfo[rMid2z];
		rex = RaceInfo[rEndx];rey = RaceInfo[rEndy];rez = RaceInfo[rEndz];
		fclose(file);
		format(strFromFile2, sizeof(strFromFile2), "%s Race Loaded",name);
		ConvertTicks(RaceInfo[rBestms]);
		SendClientMessage(playerid, COLOR_GREEN,strFromFile2);
		if(RaceInfo[rLaps] > 0)
		{
			format(strFromFile2, sizeof(strFromFile2), "Next Race: %s, By : %s | BestTime: %s : %d:%d:%d Laps: %d",name,RaceInfo[rName],RaceInfo[rBest],cmins,csecs,cmils,RaceInfo[rLaps]);
		}
		else
		{
			format(strFromFile2, sizeof(strFromFile2), "Next Race: %s, By : %s | BestTime: %s : %d:%d:%d",name,RaceInfo[rName],RaceInfo[rBest],cmins,csecs,cmils);
		}
		SendEnemyMessage(COLOR_GREEN, strFromFile2);
		randomrace = 0;
	}
	else
	{
		if(playerid != 255)
		{
			SendClientMessage(playerid, COLOR_GREEN,"File not found");
		}
	}
//	return 1;
}*/

LoadProperty()
{
	new arrCoords[31][64];
	new strFromFile2[256];
	new File: file = fopen("property.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(HouseInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			HouseInfo[idx][hEntrancex] = floatstr(arrCoords[0]);
			HouseInfo[idx][hEntrancey] = floatstr(arrCoords[1]);
			HouseInfo[idx][hEntrancez] = floatstr(arrCoords[2]);
			HouseInfo[idx][hExitx] = floatstr(arrCoords[3]);
			HouseInfo[idx][hExity] = floatstr(arrCoords[4]);
			HouseInfo[idx][hExitz] = floatstr(arrCoords[5]);
			HouseInfo[idx][hHealthx] = strval(arrCoords[6]);
			HouseInfo[idx][hHealthy] = strval(arrCoords[7]);
			HouseInfo[idx][hHealthz] = strval(arrCoords[8]);
			HouseInfo[idx][hArmourx] = strval(arrCoords[9]);
			HouseInfo[idx][hArmoury] = strval(arrCoords[10]);
			HouseInfo[idx][hArmourz] = strval(arrCoords[11]);
			//printf("HouseInfo hEntrancez %f",HouseInfo[idx][hEntrancez]);
			strmid(HouseInfo[idx][hOwner], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			strmid(HouseInfo[idx][hDiscription], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			HouseInfo[idx][hValue] = strval(arrCoords[14]);
			HouseInfo[idx][hHel] = strval(arrCoords[15]);
			HouseInfo[idx][hArm] = strval(arrCoords[16]);
			HouseInfo[idx][hInt] = strval(arrCoords[17]);
			HouseInfo[idx][hLock] = strval(arrCoords[18]);
			HouseInfo[idx][hOwned] = strval(arrCoords[19]);
			HouseInfo[idx][hRooms] = strval(arrCoords[20]);
			HouseInfo[idx][hRent] = strval(arrCoords[21]);
			HouseInfo[idx][hRentabil] = strval(arrCoords[22]);
			HouseInfo[idx][hTakings] = strval(arrCoords[23]);
			HouseInfo[idx][hVec] = strval(arrCoords[24]);
			if(HouseInfo[idx][hVec] == 411)
			{
				HouseInfo[idx][hVec] = 411;
			}
			HouseInfo[idx][hVcol1] = strval(arrCoords[25]);
			HouseInfo[idx][hVcol2] = strval(arrCoords[26]);
			HouseInfo[idx][hDate] = strval(arrCoords[27]);
			HouseInfo[idx][hStartLevel] = strval(arrCoords[28]); //This should read the old "hLevel" hLevel is now temp.
			HouseInfo[idx][hLevel] = strval(arrCoords[29]);
			HouseInfo[idx][hRC] = strval(arrCoords[30]);
			//strmid(HouseInfo[idx][hPlate], arrCoords[31], 0, strlen(arrCoords[31]), 255);
			//HouseInfo[idx]
			printf("HouseInfo:%d Owner:%s hTakings %d hVec %d",idx,HouseInfo[idx][hOwner],HouseInfo[idx][hTakings],HouseInfo[idx][hVec]);
			idx++;
		}
	}
	fclose(file);
//	return 1;
}

LoadDM(playerid,name[])
{
	new arrCoords[4][64];
	new strFromFile2[256];
	new dmname[64];
	format(dmname, sizeof(dmname), "%s.dm",name);
	new File: file = fopen(dmname, io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(gRandomDMSpawns))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			gRandomDMSpawns[idx][0] = floatstr(arrCoords[0]);
			gRandomDMSpawns[idx][1] = floatstr(arrCoords[1]);
			gRandomDMSpawns[idx][2] = floatstr(arrCoords[2]);
			idx++;
		}
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		gDMWbounds[0] = floatstr(arrCoords[0]);
		gDMWbounds[1] = floatstr(arrCoords[1]);
		gDMWbounds[2] = floatstr(arrCoords[2]);
		gDMWbounds[3] = floatstr(arrCoords[3]);
		fclose(file);
		format(strFromFile2, sizeof(strFromFile2), "Next DM: %s",name);
		SendClientMessageToAll(COLOR_GREEN, strFromFile2);
	}
	else
	{
		if(playerid != 255)
		{
			SendClientMessage(playerid, COLOR_GREEN,"File not found");
		}
	}
//	return 1;
}

SaveDM(playerid,name[])
{
		new coordsstring[256];
		new racename[64];
		format(racename, sizeof(racename), "%s.dm",name);
		new File: file2 = fopen(racename, io_write);
		new idx;
		while (idx < sizeof(gRandomDMSpawns))
		{
			format(coordsstring, sizeof(coordsstring), "%f,%f,%f\n",gRandomDMSpawns[idx][0],gRandomDMSpawns[idx][1],gRandomDMSpawns[idx][2]);
			fwrite(file2, coordsstring);
			idx++;
		}
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f\n",gDMWbounds[0],gDMWbounds[1],gDMWbounds[2],gDMWbounds[3]);
		fwrite(file2, coordsstring);
		fclose(file2);
		format(coordsstring, sizeof(coordsstring), "%s DM Saved",name);
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
//		return 1;
}

/*LoadRaceList(playerid,name[])
{
	new arrCoords[4][64];
	new strFromFile2[256];
	new dmname[64];
	format(dmname, sizeof(dmname), "%s.dm",name);
	new File: file = fopen(dmname, io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(gRandomDMSpawns))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			gRandomDMSpawns[idx][0] = floatstr(arrCoords[0]);
			gRandomDMSpawns[idx][1] = floatstr(arrCoords[1]);
			gRandomDMSpawns[idx][2] = floatstr(arrCoords[2]);
			idx++;
		}
		fread(file, strFromFile2);
		split(strFromFile2, arrCoords, ',');
		gDMWbounds[0] = floatstr(arrCoords[0]);
		gDMWbounds[1] = floatstr(arrCoords[1]);
		gDMWbounds[2] = floatstr(arrCoords[2]);
		gDMWbounds[3] = floatstr(arrCoords[3]);
		fclose(file);
		format(strFromFile2, sizeof(strFromFile2), "Next DM: %s",name);
		SendClientMessageToAll(COLOR_GREEN, strFromFile2);
	}
	else
	{
		if(playerid != 255)
		{
			SendClientMessage(playerid, COLOR_GREEN,"File not found");
		}
	}
//	return 1;
}*/

/*SaveRaceList(playerid,name[])
{
		new coordsstring[256];
		new racename[64];
		format(racename, sizeof(racename), "%s.dm",name);
		new File: file2 = fopen(racename, io_write);
		new idx;
		while (idx < sizeof(gRandomDMSpawns))
		{
			format(coordsstring, sizeof(coordsstring), "%f,%f,%f\n",gRandomDMSpawns[idx][0],gRandomDMSpawns[idx][1],gRandomDMSpawns[idx][2]);
			fwrite(file2, coordsstring);
			idx++;
		}
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f\n",gDMWbounds[0],gDMWbounds[1],gDMWbounds[2],gDMWbounds[3]);
		fwrite(file2, coordsstring);
		fclose(file2);
		format(coordsstring, sizeof(coordsstring), "%s DM Saved",name);
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
		return 1;
}*/


LoadBizz()
{
	new arrCoords[31][64];
	new strFromFile2[256];
	new File: file = fopen("bizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(BizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			BizzInfo[idx][bEntrancex] = floatstr(arrCoords[0]);
			BizzInfo[idx][bEntrancey] = floatstr(arrCoords[1]);
			BizzInfo[idx][bEntrancez] = floatstr(arrCoords[2]);
			BizzInfo[idx][bExitx] = floatstr(arrCoords[3]);
			BizzInfo[idx][bExity] = floatstr(arrCoords[4]);
			BizzInfo[idx][bExitz] = floatstr(arrCoords[5]);
			BizzInfo[idx][bHealthx] = strval(arrCoords[6]);
			BizzInfo[idx][bHealthy] = strval(arrCoords[7]);
			BizzInfo[idx][bHealthz] = strval(arrCoords[8]);
			BizzInfo[idx][bArmourx] = strval(arrCoords[9]);
			BizzInfo[idx][bArmoury] = strval(arrCoords[10]);
			BizzInfo[idx][bArmourz] = strval(arrCoords[11]);
			strmid(BizzInfo[idx][bOwner], arrCoords[12], 0, strlen(arrCoords[12]), 255);
			strmid(BizzInfo[idx][bDiscription], arrCoords[13], 0, strlen(arrCoords[13]), 255);
			BizzInfo[idx][bValue] = strval(arrCoords[14]);
			BizzInfo[idx][bHel] = strval(arrCoords[15]);
			BizzInfo[idx][bArm] = strval(arrCoords[16]);
			BizzInfo[idx][bInt] = strval(arrCoords[17]);
			BizzInfo[idx][bLock] = strval(arrCoords[18]);
			BizzInfo[idx][bOwned] = strval(arrCoords[19]);
			BizzInfo[idx][bEntcost] = strval(arrCoords[20]);
			BizzInfo[idx][bTakings] = strval(arrCoords[21]);
			BizzInfo[idx][bDate] = strval(arrCoords[22]);
			BizzInfo[idx][bLevel] = strval(arrCoords[23]);
			BizzInfo[idx][bProd] = strval(arrCoords[24]);
			BizzInfo[idx][bProdCap] = strval(arrCoords[25]);
			BizzInfo[idx][bComp] = strval(arrCoords[26]);
			BizzInfo[idx][bCompCap] = strval(arrCoords[27]);
			BizzInfo[idx][bProdCost] = strval(arrCoords[28]);
			BizzInfo[idx][bPayComp] = strval(arrCoords[29]);
			BizzInfo[idx][bPriceMod] = strval(arrCoords[30]);

			printf("BizzInfo:%d [%s] Owner:%s Entfee:%d Takings:%d Products:%d/%d Components: %d/%d",
			idx,
			BizzInfo[idx][bDiscription],
			BizzInfo[idx][bOwner],
			BizzInfo[idx][bEntcost],
			BizzInfo[idx][bTakings],
			BizzInfo[idx][bProd],
			BizzInfo[idx][bProdCap],
			BizzInfo[idx][bComp],
			BizzInfo[idx][bCompCap]);
			idx++;
		}
	}
	fclose(file);
//	return 1;
}


LoadSBizz()
{
	new arrCoords[21][64];
	new strFromFile2[256];
	new File: file = fopen("sbizz.cfg", io_read);
	if (file)
	{
		new idx;
		while (idx < sizeof(SBizzInfo))
		{
			fread(file, strFromFile2);
			split(strFromFile2, arrCoords, ',');
			SBizzInfo[idx][sbEntrancex] = floatstr(arrCoords[0]);
			SBizzInfo[idx][sbEntrancey] = floatstr(arrCoords[1]);
			SBizzInfo[idx][sbEntrancez] = floatstr(arrCoords[2]);
			//printf("HouseInfo hEntrancez %f",HouseInfo[idx][hEntrancez]);
			strmid(SBizzInfo[idx][sbOwner], arrCoords[3], 0, strlen(arrCoords[3]), 255);
			strmid(SBizzInfo[idx][sbDiscription], arrCoords[4], 0, strlen(arrCoords[4]), 255);
			SBizzInfo[idx][sbValue] = strval(arrCoords[5]);
			SBizzInfo[idx][sbHel] = strval(arrCoords[6]);
			SBizzInfo[idx][sbArm] = strval(arrCoords[7]);
			SBizzInfo[idx][sbInt] = strval(arrCoords[8]);
			SBizzInfo[idx][sbLock] = strval(arrCoords[9]);
			SBizzInfo[idx][sbOwned] = strval(arrCoords[10]);
			SBizzInfo[idx][sbEntcost] = strval(arrCoords[11]);
			SBizzInfo[idx][sbTakings] = strval(arrCoords[12]);
			SBizzInfo[idx][sbDate] = strval(arrCoords[13]);
			SBizzInfo[idx][sbLevel] = strval(arrCoords[14]);
			SBizzInfo[idx][sbProd] = strval(arrCoords[15]);
			SBizzInfo[idx][sbProdCap] = strval(arrCoords[16]);
			SBizzInfo[idx][sbComp] = strval(arrCoords[17]);
			SBizzInfo[idx][sbCompCap] = strval(arrCoords[18]);
			SBizzInfo[idx][sbProdCost] = strval(arrCoords[19]);
			SBizzInfo[idx][sbPayComp] = strval(arrCoords[20]);
			printf("SmallBizzInfo:%d [%s] Owner:%s Entfee:%d Takings:%d Products:%d/%d Components: %d/%d",
			idx,
			SBizzInfo[idx][sbDiscription],
			SBizzInfo[idx][sbOwner],
			SBizzInfo[idx][sbEntcost],
			SBizzInfo[idx][sbTakings],
			SBizzInfo[idx][sbProd],
			SBizzInfo[idx][sbProdCap],
			SBizzInfo[idx][sbComp],
			SBizzInfo[idx][sbCompCap]);
			idx++;
		}
	}
	fclose(file);
//	return 1;
}

//------------------------------------------------------------------------------------------------------
public OnGameModeInit()
{
	LoadConfig();
	LoadTmp();
	LoadProperty();
	LoadBizz();
	LoadSBizz();
	SetGameModeText("SF:Fugitive v2.0.3b"); //version
	format(objstore, sizeof(objstore), "8 Ball: I ain't got shit, Check Back Later.");
	format(cbjstore, sizeof(cbjstore), "Police HQ: Officer There is Nothing in Your Vicinity, Out.");
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	if(!realtime)
	{
		SetWorldTime(wtime);
	}
	// Player Class's
	for(new i = 0; i <= sizeof(Peds)-1; i++)
	{
		AddPlayerClass(Peds[i][0],1958.3783,1343.1572,1100.3746,269.1425,-1,-1,-1,-1,-1,-1);
		//if (gdebug){printf("DEBUG ped (%d) added", i);}
	}
	// Car Spawns
	//cops cars
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if (gdebug >= 1){printf("HouseInfo[%d][hVec] %d",h,HouseInfo[h][hVec]);}
		CreateVehicle(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], -1);
		gCarLock[h+1] = 1;
	}//34
//    SetTimer("amsgt",1800000,1); //1800000 = 30 min
//	SetTimer("CashCheck",5000,1);
//	SetTimer("Deplete_Fuel",20000,1);
//	SetTimer("i1111",10000,1);
	//===================================================================================================================
	CreateVehicle(420,-1940.3328,-1085.7573,30.5571,358.0876, -1, -1, -1);//-----------------------Taxi1---------------35
	CreateVehicle(420,-1945.1967,-1085.8687,30.5551,1.0777, -1, -1, -1);//-------------------------Taxi2---------------36
	CreateVehicle(420,-1949.1129,-1086.6688,30.5531,358.9458,-1, -1, -1);//------------------------Taxi3---------------37
	//----------------LOS SANTOS POLICE DEPARTMENT---------------------------------------------------------------------[]
	CreateVehicle(596,1529.1714,-1683.9900,5.6112,88.8727,0,1,-1);  //------------SQUAD-CAR--------LSPD7---------------38
	CreateVehicle(596,1529.1714,-1683.9900,5.6112,88.8727,0,1,-1);  //------------SQUAD-CAR--------LSPD6---------------39
	CreateVehicle(599,1583.6359,-1711.9208,6.0814,358.9333,0,1,-1); //------------RANGER-----------LSPD1---------------40
	CreateVehicle(599,1603.0741,-1687.7096,6.0757,89.0178,0,1,-1);  //------------RANGER-----------LSPD2---------------41
	CreateVehicle(596,1552.5000,-1614.0000,13.0140,155.5000,0,1,-1);//------------SQUAD-CAR--------LSPD1---------------42
	CreateVehicle(596,1559.5000,-1614.0000,13.0140,155.5000,0,1,-1);//------------SQUAD-CAR--------LSPD2---------------43
	CreateVehicle(596,1565.5000,-1614.0000,13.0140,155.5000,0,1,-1);//------------SQUAD-CAR--------LSPD3---------------44
	CreateVehicle(596,1571.5000,-1710.0000,13.0140,155.5000,0,1,-1);//------------SQUAD-CAR--------LSPD4---------------45
	CreateVehicle(596,1591.7330,-1710.7257,5.6118,358.9970,0,1,-1); //------------SQUAD-CAR--------LSPD5---------------46
	CreateVehicle(426,1535.7567,-1677.2284,13.1260,0.8001,0,0,-1);  //------------UCPREMIER--------LSPD1---------------47
	CreateVehicle(426,1586.1150,-1671.7395,5.6138,269.3427,0,0,-1); //------------UCPREMIER--------LSPD2---------------48
	CreateVehicle(596,1535.7745,-1669.4576,13.0172,359.3297,0,1,-1);//------------SQUAD-CAR--------LSPD8---------------49
	CreateVehicle(427,1530.6553,-1645.2074,6.0225,179.4389,0,1,-1); //------------Enforcer---------LSDP1---------------50
	CreateVehicle(523,1565.0000,-1710.0000,5.4220,0.1774,0,0,-1);   //------------POLICE-BIKE------LSPD1---------------51
	CreateVehicle(523,1570.0000,-1710.0000,5.4220,0.1774,0,0,-1);   //------------POLICE-BIKE------LSPD2---------------52
	CreateVehicle(523,1574.0000,-1710.0000,5.4220,0.1774,0,0,-1);   //------------POLICE-BIKE------LSPD3---------------53
	CreateVehicle(497,1564.5809,-1651.1412,31.6726,85.6896,0,0,-1); //------------POLICE-CHOPPER---LSPD1---------------54
	//----------------SAN FIERRO POLICE DEPARTMENT---------------------------------------------------------------------[-]
	CreateVehicle(597,-1599.0653,725.0287,10.5545,271.2214,0,1,-1);//-------------SQUAD-CAR--------SFPD1---------------55
	CreateVehicle(597,-1615.5948,724.9976,13.5466,271.4470,0,1,-1);//-------------SQUAD-CAR--------SFPD2---------------56
	CreateVehicle(597,-1588.7072,707.5540,-5.4217,269.8506,0,1,-1);//-------------SQUAD-CAR--------SFPD3---------------57
	CreateVehicle(597,-1572.9307,710.1265,-5.4297,88.4036,0,1,-1); //-------------SQUAD-CAR--------SFPD4---------------58
	CreateVehicle(597,-1573.5582,718.2743,-5.4409,88.4036,0,1,-1); //-------------SQUAD-CAR--------SFPD5---------------59
	CreateVehicle(597,-1573.3203,726.8171,-5.4432,88.4036,0,1,-1); //-------------SQUAD-CAR--------SFPD6---------------60
	CreateVehicle(597,-1600.1639,693.1484,-5.4283,179.8634,0,1,-1);//-------------SQUAD-CAR--------SFPD7---------------61
	CreateVehicle(599,-1612.2847,673.1733,7.2109,179.9114,0,1,-1); //-------------RANGER-----------SFPD1---------------62
	CreateVehicle(599,-1605.9832,673.1637,7.2333,179.9114,0,1,-1); //-------------RANGER-----------SFPD2---------------63
	CreateVehicle(601,-1622.7893,653.8341,-5.4834,91.0745,0,1,-1); //-------------SWAT-TANK--------SFPD1---------------64
	CreateVehicle(497,-1678.8632,705.5103,30.7783,90.4279,0,1,-1); //-------------POLICE-CHOPPER---SFPD1---------------65
	CreateVehicle(426,-1612.7196,733.1217,-5.5330,359.2215,0,1,-1);//-------------UC-UNMARKED------SFPD1---------------66
	CreateVehicle(523,-1589.0111,714.3198,-5.6722,267.6744,0,1,-1);//-------------POLICE-BIKE------SFPD1---------------67
	CreateVehicle(523,-1588.9630,717.2958,-5.6783,269.7199,0,1,-1);//-------------POLICE-BIKE------SFPD2---------------68
	CreateVehicle(523,-1607.7274,677.0552,-5.6724,359.1073,0,1,-1);//-------------POLICE-BIKE------SFPD3---------------69
	CreateVehicle(490,-1600.2423,676.2061,-5.1137,0.7369,0,1,-1);  //-------------FBI-RANCHER------SFPD1---------------70
	//----------------LAS VENTURAS POLICE DEPARTMENT-------------------------------------------------------------------[-]
	CreateVehicle(598,2256.1851,2442.7864,10.5669,359.9028,0,1,-1);//-------------SQUAD-CAR--------LVPD1---------------71
	CreateVehicle(598,2277.9302,2459.9653,10.5645,181.6193,0,1,-1);//-------------SQUAD-CAR--------LVPD2---------------72
	CreateVehicle(598,2277.9666,2478.3086,10.5673,177.7626,0,1,-1);//-------------SQUAD-CAR--------LVPD3---------------73
	CreateVehicle(598,2256.2334,2477.8916,10.5697,179.4609,0,1,-1);//-------------SQUAD-CAR--------LVPD4---------------74
	CreateVehicle(598,2314.8162,2475.1870,3.0200,90.1660,0,1,-1);  //-------------SQUAD-CAR--------LVPD5---------------75
	CreateVehicle(598,2315.3079,2460.3230,3.0181,89.8454,0,1,-1);  //-------------SQUAD-CAR--------LVPD6---------------76
	CreateVehicle(598,2290.8540,2418.9138,10.4987,88.6808,0,1,-1); //-------------SQUAD-CAR--------LVPD7---------------77
	CreateVehicle(426,2273.5417,2478.0164,10.5635,179.0142,0,0,-1);//-------------UC-UNMARKED------LVPD1---------------78
	CreateVehicle(523,2273.2332,2460.0239,10.3895,182.3213,0,0,-1);//-------------POLICE-BIKE------LVPD1---------------79
	CreateVehicle(523,2296.0859,2460.3694,2.8433,272.6897,0,0,-1); //-------------POLICE-BIKE------LVPD2---------------80
	CreateVehicle(523,2296.8635,2451.5232,2.8430,262.3963,0,0,-1); //-------------POLICE-BIKE------LVPD3---------------81
	CreateVehicle(490,2297.2568,2456.1060,3.4012,269.1111,0,0,-1); //-------------FBI--------------LVPD1---------------82
	CreateVehicle(427,2279.2441,2444.0510,3.4053,270.3125,0,1,-1); //-------------Enforcer---------LVPD1---------------83
	CreateVehicle(426,2285.7871,2431.1169,3.0165,1.9397,1,1,-1); //---------------UCPREMIER--------LVPD2---------------84
	CreateVehicle(497,2306.4216,2494.3201,18.7272,92.7495,0,1,-1); //-------------POLICE-CHOPPER---LVPD1---------------85
	CreateVehicle(599,2273.3604,2442.6956,11.0117,359.8847,0,1,-1);//-------------RANGER-----------LVPD1---------------86
	CreateVehicle(599,2277.9875,2442.7642,11.0119,358.4539,0,1,-1);//-------------RANGER-----------LVPD2---------------87
	CreateVehicle(430,2300.2378,-2421.5461,-0.2946,314.2880,0,0,-1);//------------PREDATOR---------LSPD1---------------88
	CreateVehicle(430,-1447.1804,494.0102,-0.2327,87.0404,0,0,-1);//--------------PREDATOR---------SFPD1---------------89
	//-----------------------------------------------------------------------------------------------------------------[-]
	CreateVehicle(416,-2705.0908,590.6293,14.6025,269.0996, -1, -1, -1);//---------Ambulance-------START HOSPITOL------90
	CreateVehicle(416,-2705.7268,605.4840,14.6022,267.9313, -1, -1, -1);//---------Ambulance---------------------------91
	CreateVehicle(416,-2704.4333,623.6321,14.6027,268.9781, -1, -1, -1);//---------Ambulance--------END HOSPITOL-------92
	CreateVehicle(407,-2022.1149,74.8335,28.3593,273.6936, -1, -1, -1);//----------------------------FIRE START--------93
	CreateVehicle(407,-2021.0100,92.2096,28.2162,270.7992, -1, -1, -1);//----------------------------FIRE END1---------94
	CreateVehicle(476,1935.763794,-2416.733887,13.846451,89.0,-1, -1, -1);//------LS Rustler----------PLANES START-----95
	CreateVehicle(511,-1629.3032,-473.9138,23.4622,44.8810,-1, -1, -1);//---------LS AirBeagle-------------------------96
	CreateVehicle(476,-1297.811279,-457.169250,14.448013,89.0,-1, -1, -1);//------LV Rustler---------------------------97
	CreateVehicle(511,-1286.913696,-394.913086,14.448013,89.0,-1, -1, -1);//------LV AirBeagle-------------------------98
	CreateVehicle(553,-1330.0503,-215.0640,14.4963,315.0847,-1, -1, -1);//--------SF Nevada----------------------------99
	CreateVehicle(476,1586.432007,1615.842651,11.119888,89.0,-1, -1, -1);//-------SF Rustler---------------------------100
	CreateVehicle(511,1634.947388,1555.917969,11.109032,89.0,-1, -1, -1);//-------SF AirBeagle--------PLANES END-------101
	RentCar1=CreateVehicle(541,-1958.8317,258.7843,35.1486,88.4536,-1, -1, -1);//----------Bullet-------------HIRE CARS END-----102
	RentCar2=CreateVehicle(429,-1958.1268,284.8932,35.1485,88.4536,-1, -1, -1);//----------Cheetah-----------------Hire1--------103
	RentCar3=CreateVehicle(451,-1957.6605,302.1757,35.1484,88.4536,-1, -1, -1);//----------Turismo-----------------Hire1--------104
	RentCar4=CreateVehicle(429,-1659.3331,1212.8494,6.8750,293.1686,-1, -1, -1);//---------banshee-----------------Hire2--------105
	RentCar5=CreateVehicle(415,-1658.8856,1212.3367,13.3000,241.9084,-1, -1, -1);//--------Cheetah-----------------Hire2--------106
	RentCar6=CreateVehicle(480,-1650.8331,1208.1707,13.3135,241.9083,-1, -1, -1);//--------Comet--------------HIRECAR END-------107
	CreateVehicle(409,-2753.6304,370.7530,3.9536,180.0748,-1, -1, -1);//----------Strechlimo---------------------------108
	//----------------------------------CompSystem---------------------------------------------------------------------[-]
	CreateVehicle(456,-1823.4,-97.6,15.2,180.7,-1,-1,-1);//------------------------------------------Yankee------------109
	CreateVehicle(456,-1828.8,-97.7,15.2,180.7,-1,-1,-1);//------------------------------------------Yankee------------110
	CreateVehicle(440,-1835.0,-97.8,15.2,180.7,-1,-1,-1);//------------------------------------------Rumpo-------------111
	CreateVehicle(440,-1841.2,-97.9,15.2,180.7,-1,-1,-1);//------------------------------------------Rumpo-------------112
	//-----------------------------------------------------------------------------------------------------------------[-]
	CreateVehicle(470,-1529.7246,478.6212,7.1800,269.6468,-1, -1, -1);//-----------------------------Patriot-----------113
	CreateVehicle(481,-2292.7292,-1637.3317,483.2101,297.1172,0, 1, -1);//----------------------------BMX--------------114
	CreateVehicle(481,-2237.9141,-1712.6495,480.3843,96.3798,1, 0, -1);//-----------------------------BMX--------------115
	CreateVehicle(481,-2237.6160,-1741.9160,480.3469,54.6870,-1, -1, -1);//---------------------------BMX--------------116
	CreateVehicle(594,-1510.4495,1974.5774,48.4219,292.7784,-1, -1, -1);//----------------Flower pot car---------------116
	CreateVehicle(487,-2227.1909,2328.6729,7.7244,359.3678,0,0,-1);//--------------------------Crazy mafia chopper-----117
	CreateVehicle(430,-1438.5739,509.1901,-0.3074,90.6081,0,0,-1);//------------------------------Teting1Boat----------118
	CreateVehicle(409,-2725.5920,-312.1441,6.9097,314.2239,1,1,-1);//------------------------------HoodzLimo-----------119
	CreateVehicle(521,-2710.4163,-305.4151,6.7700,351.8437,0,0,-1);//------------------------------HoodzNrg-50---------120
	CreateVehicle(521,-2741.8262,-299.0256,6.5662,225.7370,0,0,-1);//------------------------------HoodzSultan---------121
	CreateVehicle(541,-2699.4719,-295.8469,6.7983,314.6024,0,1,-1);//------------------------------HoodzBullet---------122
	CreateVehicle(487,-2777.6243,-353.3600,7.3653,270.4147,0,0,-1);//------------------------------HoodzHeli-----------123
	CreateVehicle(510,-1592.3320,717.6263,9.1953,298.4752,-1,-1,-1);//---------------------------Police MTbike---------124
	CreateVehicle(493,-2580.5334,1422.7592,-0.1630,1.9087,-1,-1,-1);//------------------------------Jetmaxx------------125
	CreateVehicle(493,-1161.2593,381.5369,-0.1863,307.3457,-1,-1,-1);//-----------------------------Jetmaxx------------126
	CreateVehicle(493,-1361.4926,427.6994,-0.2684,267.7429,-1,-1,-1);//-----------------------------Jetmaxx------------127
	CreateVehicle(493,-1535.2273,166.0796,-0.2575,313.3478,-1,-1,-1);//-----------------------------Jetmaxx------------128
	CreateVehicle(493,-1803.4594,1424.1892,-0.0036,359.7756,-1,-1,-1);//----------------------------Jetmaxx------------129
	CreateVehicle(493,-1469.9752,1090.6681,-0.0263,274.1201,-1,-1,-1);//----------------------------Jetmaxx------------130

//	for(new h = 0; h < sizeof(HouseInfo); h++)
//	{
		/*
		if(HouseInfo[h][hHel] == 1)
		{
			AddStaticPickup(1240, 2, HouseInfo[h][hHealthx], HouseInfo[h][hHealthy], HouseInfo[h][hHealthz]);
			pickups++;
		}
		if(HouseInfo[h][hArm] == 1)
		{
			AddStaticPickup(1242, 2, HouseInfo[h][hArmourx], HouseInfo[h][hArmoury], HouseInfo[h][hArmourz]);
			pickups++;
		}
		*/
	/*	if(HouseInfo[h][hOwned] == 0)
		{
			AddStaticPickup(1273, 2, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
		if(HouseInfo[h][hOwned] == 1)
		{
			AddStaticPickup(1239, 2, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]);
			pickups++;
		}
	}*/
	for(new h = 0; h < sizeof(BizzInfo); h++)
	{
		/*
		if(BizzInfo[h][bHel] == 1)
		{
			AddStaticPickup(1240, 2, BizzInfo[h][bHealthx], BizzInfo[h][bHealthy], BizzInfo[h][bHealthz]);
			pickups++;
		}
		if(BizzInfo[h][bArm] == 1)
		{
			AddStaticPickup(1242, 2, BizzInfo[h][bArmourx], BizzInfo[h][bArmoury], BizzInfo[h][bArmourz]);
			pickups++;
		}
		*/
		if(BizzInfo[h][bOwned] == 0)
		{
			AddStaticPickup(1272, 2, BizzInfo[h][bEntrancex], BizzInfo[h][bEntrancey], BizzInfo[h][bEntrancez]);
			pickups++;
		}
		if(BizzInfo[h][bOwned] == 1)
		{
			AddStaticPickup(1239, 2, BizzInfo[h][bEntrancex], BizzInfo[h][bEntrancey], BizzInfo[h][bEntrancez]);
			pickups++;
		}
	}
	for(new h = 0; h < sizeof(SBizzInfo); h++)
	{
		/*
		if(BizzInfo[h][bHel] == 1)
		{
			AddStaticPickup(1240, 2, BizzInfo[h][bHealthx], BizzInfo[h][bHealthy], BizzInfo[h][bHealthz]);
			pickups++;
		}
		if(BizzInfo[h][bArm] == 1)
		{
			AddStaticPickup(1242, 2, BizzInfo[h][bArmourx], BizzInfo[h][bArmoury], BizzInfo[h][bArmourz]);
			pickups++;
		}
		*/
		if(SBizzInfo[h][sbOwned] == 0)
		{
			AddStaticPickup(1272, 2, SBizzInfo[h][sbEntrancex], SBizzInfo[h][sbEntrancey], SBizzInfo[h][sbEntrancez]);
			pickups++;
		}
		if(SBizzInfo[h][sbOwned] == 1)
		{
			AddStaticPickup(1239, 2, SBizzInfo[h][sbEntrancex], SBizzInfo[h][sbEntrancey], SBizzInfo[h][sbEntrancez]);
			pickups++;
		}
	}
	AddStaticPickup(1274, 2, BizzInfo[4][bEntrancex], BizzInfo[4][bEntrancey], BizzInfo[4][bEntrancez]);pickups++; //thebank
	//56
	//Rooftop 1

/*	AddStaticPickup(371, 2, 1544.2,-1353.4,329.4); //ls towertop
	AddStaticPickup(371, 2, -1753.6,885.2,295.8);// sf towertop
	AddStaticPickup(370, 2, 1536.0, -1360.0, 1150.0);
	AddStaticPickup(1242, 2, 1527.5,-12.1,1002.0); //binco armor
	AddStaticPickup(1240, 2, -2316.2,-1209.5,1049.8); //tosted house
    AddStaticPickup(370, 2, -2733.7,835.7,59.6); //hidden jetpack
	AddStaticPickup(1242, 2, -2316.2,-1209.5,1049.8);
    AddStaticPickup(1249, 2, -1497.66,914.92,7.19); // Bank Mailbox
    AddStaticPickup(1596, 1, -2654.53,873.97,84.37); //satilite dish
    AddStaticPickup(1216, 1, -2619.87,1414.35,7.09); // phone
    AddStaticPickup(1240, 2, -2649.56,636.61,14.45); // hospitol
    AddStaticPickup(1550, 2, -2446.74,522.57,30.26); // money federal reserve
    AddStaticPickup(1269, 1, -1520.38,915.79,7.19); // Parking meter bank
    AddStaticPickup(1269, 1, -1519.90,934.66,7.19); // Parking meter bank2
    AddStaticPickup(1247, 2, -1605.53,712.46,13.87); //Police Station SFPD
    AddStaticPickup(1240, 2, 229.28,166.50,1003.02); //Police Health
    AddStaticPickup(1242, 2, 229.34,168.39,1003.02); //Police Armor
    AddStaticPickup(1247, 2, 238.66,141.05,1003.02); //SFPD interior
    AddStaticPickup(1247, 2, -2586.23,552.99,14.61); //SFPD 2nd Precint
    AddStaticPickup(1210, 2, -1055.1661,-696.3055,32.3516); //eastern bay chemicals
    AddStaticPickup(354, 2, -1480.50,920.10,71.35);//flare
	AddStaticPickup(353, 2, -214.72,181.66,1003.02);//mp5 PD
    AddStaticPickup(350, 2, -216.97,181.66,1003.02);//spazshotgun PD
    AddStaticPickup(349, 2, -221.72,188.22,1003.02);//shotgun PD
	AddStaticPickup(348, 2, -221.72,183.26,1003.02);//Deagle PD
 	AddStaticPickup(346, 2, -221.72,184.99,1003.02);//Pistol PD
	AddStaticPickup(372, 2, -2625.4,725.0,27.9);
	AddStaticPickup(355, 2, -2681.7,719.5,29.9);
	AddStaticPickup(350, 2, -2767.5,741.0,48.0);
	AddStaticPickup(348, 2, -2775.4,797.4,52.0);
	AddStaticPickup(355, 2, -2771.2,841.0,54.1);
	AddStaticPickup(350, 2, -2795.5,1188.4,20.2);
	AddStaticPickup(350, 2, -2892.1,1245.5,7.1);
	AddStaticPickup(352, 2, -2819.6,1312.3,7.1);
	AddStaticPickup(352, 2, -2434.8,1258.0,30.3);*/
	
//	pickups=pickups+9;

	printf("Pickups Max = 100, Current Pickups = %d",pickups);
	new randa = random(sizeof(RandCars));
	randa = random(sizeof(RandCars));carselect[0] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[1] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[2] = RandCars[randa][0];
	randa = random(sizeof(RandLow));carselect[3] = RandLow[randa][0];
	randa = random(sizeof(RandCars));carselect[4] = RandCars[randa][0];
	randa = random(sizeof(RandAngles));carselect[5] = RandAngles[randa][0];
	randa = random(sizeof(RandCars));carselect[6] = RandCars[randa][0];
	randa = random(sizeof(RandLow));carselect[7] = RandLow[randa][0];
	randa = random(sizeof(RandCars));carselect[8] = RandCars[randa][0];
	randa = random(sizeof(RandAngles));carselect[9] = RandAngles[randa][0];
	randa = random(sizeof(RandCars));carselect[10] = RandCars[randa][0];
	randa = random(sizeof(RandCars));carselect[11] = RandCars[randa][0];
	randa = random(sizeof(RandBikes));carselect[12] = RandBikes[randa][0];
	randa = random(sizeof(RandBikes));carselect[13] = RandBikes[randa][0];
	randa = random(sizeof(RandLCars));carselect[14] = RandLCars[randa][0];
	CreateVehicle(carselect[14],-2038.4915,484.3313,35.2692,359.0161,-1, -1, -1);//long
		//CreateObject(6280,-5035.5737,1863.3632,0.7030,0,0,0);
	CreateObject(9241,1564.84, -1651.49, 29.1,0.0,0,0);//helip
	LSPDGate = CreateObject(971,1587.9, -1638.4, 16.1, 0, 0, 0);//gate
	Tollgate3 = CreateObject(971,-2677.0117, 1274.2617, 55.32, 0, 0, 0);
	//Gate = CreateObject(971,747,-3214.2,11,0,0,-8);//fence south GATE
	//CreateObject(modelid, Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ)
	//CreateObject(1535, 1577.2, -1635.8, 12.6, 0, 0, 0);
//---------------------------------------------------------------------------
	//Gate = CreateObject(971,1587.9, -1638.4, 16.1, 0, 0, 0);//gate
	//printf("DEBUG: Random Cars %d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,",carselect[0],carselect[1],carselect[2],carselect[3],carselect[4],carselect[5],carselect[6],carselect[7],carselect[8],carselect[9],carselect[10],carselect[11],carselect[12],carselect[13],carselect[14]);
	if (gRoundTime > 0)
	{
		SetTimer("GameModeInitExitFunc", gRoundTime, 0);
	}
	if (realtime)
	{
		new tmphour;
		new tmpminute;
		new tmpsecond;
		gettime(tmphour, tmpminute, tmpsecond);
		FixHour(tmphour);
		tmphour = shifthour;
		SetWorldTime(tmphour);
	}
	if (fow)
	{
		SetTimer("CopScanner", radarfreq, 1);
	}
	synctimer = SetTimer("SyncUp", 60000, 1);
	newmistimer = SetTimer("PrePlayerNewMission", jobdelay, 1);
	unjailtimer = SetTimer("SetPlayerUnjail", 1000, 1);
	playertimer = SetTimer("PlayerInArea", 1000, 1);
	cartimer = SetTimer("CarCheck", 30000, 1);
	celltimer = SetTimer("CellPhoneTimer", 1000, 1);
	SetTimer("CheckLinux", 250, 0);
	SetTimer("RingToner", 500, 0);
	SetTimer("SetPlayerFlash", 1000, 0);
	SetTimer("CustomPickups", 1000, 1);
	SetTimer("InHouse", 1000, 1);
	SetTimer("GameTicks", 500, 1);
	SetTimer("VoteKickTimer", 1000, 1);
	SetTimer("DMDetect", 1000, 1);
	SetTimer("Spectator", 2000, 1);
	SetTimer("PenInArea", 2000, 1);
//	SetTimer("IdleKick", idletime, 1);
//	SetTimer("Idleafk",idleafkt, 1);
	SetTimer("AntiTeleport", 1000, 1);
	SetTimer("AntiCamp", 1000, 1);
	SetTimer("SkyDive", 1000, 1);
	SetTimer("Production", 300000, 1); //5 mins
	SetTimer("LottoTime",60000,1);
	SetTimer("PingKick",1000,1);
	if(derbyon){SetTimer("DerbyTime",60000,1);}
	//for(new i = 0; i < sizeof(CarSpawns); i++)
	for(new i = 0; i < sizeof(CarSpawns); i++)
	{
		AddCar(i);
		if (gdebug){printf("DEBUG car (%d) spawned", i);}
	}
	//for(new v=0; v<MAX_VEHICLES; v++) vFuel[v] = 100;
	CarInit();
	TeamCarLockInit();
	SetTimer("SecTimer",1000,true);
	SetTimer("ClearHack",60000,true);
	UsePlayerPedAnims(); //NO MORE GAY WALKS
	CreateVehicle(537,-1943.3127,158.0254,27.0006,357.3614,121,1,-1); //This is the train
//	AddStaticVehicle(569,-1943.3127,158.0254,27.0006,357.3614,121,1,-1); //These 3 are the cars behind?
//	AddStaticVehicle(569,-1943.3127,158.0254,27.0006,357.3614,121,1,-1);
//	AddStaticVehicle(569,-1943.3127,158.0254,27.0006,357.3614,121,1,-1);
	CreateVehicle(420,-866.1874,1566.6075,24.5800,89.9928,6,1,-1); // rspawn
	CreateVehicle(420,-821.0815,1506.2688,19.7104,177.9390,6,1,-1); // rcar
	CreateVehicle(445,-865.5794,1549.3817,23.2693,84.9048,35,35,-1); //
	CreateVehicle(535,-818.5805,1444.4136,13.5529,350.3256,97,1,-1); //
	CreateVehicle(444,-720.3179,1442.2744,18.8546,177.4994,32,42,-1); //
	CreateVehicle(483,-688.6160,967.5546,12.1444,264.5061,1,31,-1); //
	CreateVehicle(521,-302.0575,1120.1185,19.3193,351.1245,92,3,-1); //
	CreateVehicle(445,148.1090,-172.0595,1.4531,86.3086,39,39,-1); //
	CreateVehicle(562,197.8755,-148.0522,1.2396,180.6050,35,1,-1); //
	CreateVehicle(555,266.2333,-143.8029,1.2616,92.6715,58,1,-1); //
	CreateVehicle(424,210.6153,-7.5134,2.3213,263.8653,2,2,-1); //
	CreateVehicle(557,-29.3683,44.7762,3.4922,242.6297,1,1,-1); //
	CreateVehicle(500,767.1014,346.2958,20.1170,18.8986,13,119,-1); //
/*	AddStaticVehicle(520,-2087.6042,1426.1233,7.8325,181.1620,0,0); // hydra
	AddStaticVehicle(447,-2091.0139,1392.4863,7.1132,181.0029,0,0); // seasparow
	AddStaticVehicle(432,-2066.7285,1426.5265,7.1135,178.7392,0,0); // tank
	AddStaticVehicle(425,-2069.6953,1392.3184,7.6570,180.4098,0,0); // hunter*/
	CreateVehicle(449,-1711.6061,706.1787,25.1223,0.0860,1,74,-1); // TRAM



	EnableTirePopping(1);
	AllowInteriorWeapons(1);
	AllowAdminTeleport(1);
	EnableZoneNames(1);
	aarea=GangZoneCreate(-2095.4624,1381.4850,-2060.9939,1436.3890);
	gJohnGangZone=GangZoneCreate(-2003.6871,-238.5464,-1791.7373,344.5797);
	SetupMenus();
	LoadRaces();
	CNN=TextDrawCreate(150.0, 120.0, " ");
	timetext=TextDrawCreate(545.0, 20.0, " ");
	RaceStartTime=TextDrawCreate(550.0,200.0," ");
	MainInfo=TextDrawCreate(180.0,400.0," ");
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		gVecSpawn[i]=INVALID_VEHICLE_ID;
	}
	//---Nextek's Island
	Elevator = CreateObject(3885,-2080.1521,886.0850,1006.9355,0,0,0);
	NiElevator = CreateObject(3885,-2239.9553,818.0469,49,0,0,0);
	Gate = CreateObject(971,-2083,877.8,1009,0,0,-8);//fence south GATE
	CreateObject(6280,-2141.5491,808.4315,1000.9809,0,0,0); // island
 	CreateObject(987,-2092,877.6134,1005.3479,0,0,90);//fence west
 	CreateObject(987,-2092,885.6134,1005.3479,0,0,90);//fence west
 	CreateObject(987,-2092,898,1005.3479,0,0,0);//fence north
 	CreateObject(987,-2080,898,1005.3479,0,0,0);//fence north
	CreateObject(987,-2068,897,1005.3479,0,0,270);//fence east
 	CreateObject(987,-2068,886,1005.3479,0,0,270);//fence east
 	CreateObject(987,-2098,877.3,1005.3479,0,0,2);//fence south
	CreateObject(987,-2080,876.5,1005.3479,0,0,-9);//fence south
	//end of nex-island
	
	CreateObject(1290,-2071.0554,1381.1781,6.0000,0,0,0);
	CreateObject(987,-2096.2874,1381.1781,6.0000,0,0,0);
	Agate = CreateObject(987,-2084.4080,1381.1781,6.0000,0,0,0);
	CreateObject(987,-2072.0554,1381.1781,6.0000,0,0,0);
	
	SetDisabledWeapons(WEAPON_SAWEDOFF,44,45);//44=nightvision, 45=thermal
	for(new i=0;i<sizeof(LSCars);i++)
	{
	/*model_id,
	Float:pos_x,
	Float:pos_y,
	Float:pos_z,
	Float:z_angle,
	ecolor1,
	ecolor2,
	respawn*/
	    CreateVehicle(LSCars[i][model_id]+1,LSCars[i][pos_x],LSCars[i][pos_y],LSCars[i][pos_z],LSCars[i][z_angle],LSCars[i][ecolor1],LSCars[i][ecolor2],LSCars[i][respawn]);
 	}
 	for(new i=0;i<sizeof(DerbyCar);i++)
	{
	    new car=CreateVehicle(DerbyCar[i][model_id],DerbyCar[i][pos_x],DerbyCar[i][pos_y],DerbyCar[i][pos_z],DerbyCar[i][z_angle],DerbyCar[i][ecolor1],DerbyCar[i][ecolor2],DerbyCar[i][respawn]);
		LinkVehicleToInterior(car,15);
	}
	return 1;
}


public SyncUp()
{
	if (gdebug >= 3){printf("DEBUG SyncUp()");}
	SyncTime();
	DollahScoreUpdate();
}

public SyncTime()
{
	if (gdebug >= 3){printf("DEBUG SyncTime()");}
	new string[64];
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;
	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
		format(string, sizeof(string), "SERVER: The Time Is Now %d:00 Hours",tmphour);
		BroadCast(COLOR_WHITE,string);
		if (numplayers == 0)
		{
			GameModeInitExitFunc();
		}
		if (gdebug){printf("DEBUG tmphour=%d ghour=%d",tmphour,ghour);}
		ghour = tmphour;
		PayDay();
		if (realtime)
		{
			SetWorldTime(tmphour);
		}
	}
	//Delete these if it fucks up
	TextDrawHideForAll(timetext);
	TextDrawDestroy(timetext);
	new hour,minute,second;
	gettime(hour,minute,second);
	FixHour(hour);
	hour = shifthour;
  //  new string[256];
    if(minute>9){
		format(string,sizeof(string),"%d:%d",hour,minute);
	}
	else{
	    format(string,sizeof(string),"%d:0%d",hour,minute);
	}
    timetext=TextDrawCreate(545.0, 20.0, string);
    TextDrawTextSize(timetext,70.0,15.0);
    TextDrawFont(timetext,1);
    TextDrawLetterSize(timetext,0.9,1.4);
	TextDrawShowForAll(timetext);
	//Delete if fucks up
}

public SkyDive()
{
	skydivecount--;
	new string[256];
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && gSkyDive[i] == 1)
		{
			if(skydivecount > 10)
			{
				format(string, sizeof(string), "~W~%d",skydivecount);
			}
			else
			{
				format(string, sizeof(string), "~r~%d",skydivecount);
			}
			GameTextForPlayer(i, string, 2000, 6);
			if(skydivecount == 0)
			{
				GivePlayerWeapon(i, 46, 0);
				SetPlayerPos(i,SBizzInfo[0][sbEntrancex]+i, SBizzInfo[0][sbEntrancey], 1350.0);
				SetPlayerInterior(i,0);
				PlayerInfo[i][pInt] = 0;
				SendClientMessage(i, TEAM_GROVE_COLOR, "GREENLIGHT: GO!! GO!! GO!!");
				gSkyDive[i] = 0;
			}
		}
	}
	if(skydivecount == 0)
	{
		skydivecount = 60;
	}
}
/*
public Production()
{
	for(new i = 0; i < sizeof(BizzInfo); i++)
	{
		if(BizzInfo[i][bComp] >= BizzInfo[i][bProdCost])
		{
			//printf("BizzInfo[i][bComp] %d BizzInfo[i][bProdCost] %d",BizzInfo[i][bComp],BizzInfo[i][bProdCost])
			if(BizzInfo[i][bProd] < BizzInfo[i][bProdCap])
			{
				//printf("BizzInfo[i][bProd] %d BizzInfo[i][bProdCap] %d",BizzInfo[i][bProd],BizzInfo[i][bProdCap])
				BizzInfo[i][bComp] = BizzInfo[i][bComp]-BizzInfo[i][bProdCost];
				BizzInfo[i][bProd]++;
			}
		}
	}
	for(new i = 0; i < sizeof(SBizzInfo); i++)
	{
		if(SBizzInfo[i][sbComp] >= SBizzInfo[i][sbProdCost])
		{
			if(SBizzInfo[i][sbProd] < SBizzInfo[i][sbProdCap])
			{
				SBizzInfo[i][sbComp] = SBizzInfo[i][sbComp]-SBizzInfo[i][sbProdCost];
				SBizzInfo[i][sbProd]++;
			}
		}
	}
}
*/
public Production()
{
	for(new i = 0; i < sizeof(BizzInfo); i++)
	{
		if(BizzInfo[i][bComp] > 0)
		{
			//printf("BizzInfo[i][bComp] %d BizzInfo[i][bProdCost] %d",BizzInfo[i][bComp],BizzInfo[i][bProdCost])
			if(BizzInfo[i][bProd] < BizzInfo[i][bProdCap])
			{
				//printf("BizzInfo[i][bProd] %d BizzInfo[i][bProdCap] %d",BizzInfo[i][bProd],BizzInfo[i][bProdCap])
				BizzInfo[i][bProd] = BizzInfo[i][bProd]+BizzInfo[i][bProdCost];
				BizzInfo[i][bComp]--;
			}
		}
	}
	for(new i = 0; i < sizeof(SBizzInfo); i++)
	{
		if(SBizzInfo[i][sbComp] > 0)
		{
			if(SBizzInfo[i][sbProd] < SBizzInfo[i][sbProdCap])
			{
				SBizzInfo[i][sbProd] = SBizzInfo[i][sbProd]+SBizzInfo[i][sbProdCost];
				SBizzInfo[i][sbComp]--;
			}
		}
	}
}

DateProp(playerid)
{
	new playername[MAX_PLAYER_NAME];
	GetPlayerName(playerid, playername, sizeof(playername));
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if (strcmp(playername, HouseInfo[h][hOwner], true) == 0)
		{
			HouseInfo[h][hDate] = curdate;
			OnPropUpdate();
		}
	}
	for(new b = 0; b < sizeof(BizzInfo); b++)
	{
		if (strcmp(playername, BizzInfo[b][bOwner], true) == 0)
		{
			BizzInfo[b][bDate] = curdate;
			OnPropUpdate();
		}
	}
	for(new c = 0; c < sizeof(SBizzInfo); c++)
	{
		if (strcmp(playername, SBizzInfo[c][sbOwner], true) == 0)
		{
			SBizzInfo[c][sbDate] = curdate;
			OnPropUpdate();
		}
	}
//	return 1;
}

public GetClosestPlayer(p1)
{
	new x,Float:dis,Float:dis2,player;
	player = -1;
	dis = 99999.99;
	for (x=0;x<MAX_PLAYERS;x++)
	{
		if(IsPlayerConnected(x))
		{
			if(x != p1)
			{
				dis2 = GetDistanceBetweenPlayers(x,p1);
				if(dis2 < dis && dis2 != -1.00)
				{
					dis = dis2;
					player = x;
				}
			}
		}
	}
	return player;
}

Checkprop()
{
	new olddate;
	new string[256];
	new curdate = getdate();
	for(new h = 0; h < sizeof(HouseInfo); h++)
	{
		if(HouseInfo[h][hOwned] == 1 && HouseInfo[h][hDate] > 9)
		{
			olddate = HouseInfo[h][hDate];
			if(curdate-olddate >= 3)
			{
				HouseInfo[h][hHel] = 0;
				HouseInfo[h][hArm] = 0;
				HouseInfo[h][hHealthx] = 0;
				HouseInfo[h][hHealthy] = 0;
				HouseInfo[h][hHealthz] = 0;
				HouseInfo[h][hArmourx] = 0;
				HouseInfo[h][hArmoury] = 0;
				HouseInfo[h][hArmourz] = 0;
				HouseInfo[h][hLock] = 1;
				HouseInfo[h][hOwned] = 0;
				HouseInfo[h][hVec] = 516;
				HouseInfo[h][hVcol1] = -1;
				HouseInfo[h][hVcol2] = -1;
				strmid(HouseInfo[h][hOwner], "GOD", 0, strlen("GOD"), 255);
				format(string, sizeof(string), "-REAL-ESTATE: A House is available at a value of $%d",HouseInfo[h][hValue]);
				SendClientMessageToAll(COLOR_DGREEN, string);
				OnPropUpdate();
			}
		}
	}
	for(new b = 0; b < sizeof(BizzInfo); b++)
	{
		if(BizzInfo[b][bOwned] == 1 && BizzInfo[b][bDate] > 9)
		{
			olddate = BizzInfo[b][bDate];
			if(curdate-olddate >= 3)
			{
				BizzInfo[b][bHel] = 0;
				BizzInfo[b][bArm] = 0;
				BizzInfo[b][bLock] = 1;
				BizzInfo[b][bOwned] = 0;
				strmid(BizzInfo[b][bOwner], "GOD", 0, strlen("GOD"), 255);
				format(string, sizeof(string), "-REAL-ESTATE-: A Business is available at a value of $%d",BizzInfo[b][bValue]);
				SendClientMessageToAll(COLOR_DGREEN, string);
				OnPropUpdate();
			}
		}
	}
	for(new c = 0; c < sizeof(SBizzInfo); c++)
	{
		if(SBizzInfo[c][sbOwned] == 1 && SBizzInfo[c][sbDate] > 9)
		{
			olddate = SBizzInfo[c][sbDate];
			if(curdate-olddate >= 3)
			{
				SBizzInfo[c][sbHel] = 0;
				SBizzInfo[c][sbArm] = 0;
				SBizzInfo[c][sbLock] = 1;
				SBizzInfo[c][sbOwned] = 0;
				strmid(SBizzInfo[c][sbOwner], "GOD", 0, strlen("GOD"), 255);
				format(string, sizeof(string), "-REAL=ESTATE-: A Small Business is available at a value of $%d",SBizzInfo[c][sbValue]);
				SendClientMessageToAll(TEAM_BALLAS_COLOR, string);
				OnPropUpdate();
			}
		}
	}
//	return 1;
}

public PayDay()
{
	if (gdebug >= 1){printf("DEBUG PayDay()");}
	new string[128];
	new pay,account,interest;
	new rent = 0;
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pLevel] > 0)
		{
			new playername2[MAX_PLAYER_NAME];
			GetPlayerName(i, playername2, sizeof(playername2));
			account = PlayerInfo[i][pAccount];
			new key = PlayerInfo[i][pPhousekey];
			if(key != 255)
			{
				rent = HouseInfo[key][hRent];
				if(strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
				{
					rent = 0;
				}
				else if(rent > GetPlayerMoney(i))
				{
					PlayerInfo[i][pPhousekey] = 255;
					SendClientMessage(i, COLOR_WHITE, "You have been evicted");
					rent = 0;
				}
				HouseInfo[key][hTakings] = HouseInfo[key][hTakings]+rent;
			}
			new tmpintrate;
			if (key != 255 && strcmp(playername2, HouseInfo[key][hOwner], true) == 0)
			{
				tmpintrate = intrate+HouseInfo[key][hLevel];
			}
			else
			{
				tmpintrate = 1;
			}
			interest = (PlayerInfo[i][pAccount]/1000)*(tmpintrate);
			pay = PlayerInfo[i][pLevel]*paycheck;
			PlayerInfo[i][pExp]++;
			PlayerPlayMusic(i);
			GiveMoney(i,pay-rent);
			PlayerInfo[i][pAccount] = account+interest;
			BizzInfo[4][bTakings] = BizzInfo[4][bTakings]+((PlayerInfo[i][pAccount]/1000)+intrate);
			SendClientMessage(i, COLOR_GREEN, "|======== PAY ROLL STUB ========|");
			SendClientMessage(i, COLOR_WHITE, "------San Fierro Federal Savings Bank------");
			format(string, sizeof(string), "  Account Balance: $%d", account);
			SendClientMessage(i, COLOR_WHITE, string);
			format(string, sizeof(string), "  Interest Rate: 0.%d percent",tmpintrate);
			SendClientMessage(i, COLOR_WHITE, string);
			format(string, sizeof(string), "  Account interest Gained $%d", interest);
			SendClientMessage(i, COLOR_WHITE, string);
			SendClientMessage(i, COLOR_GREEN, "|-==============================-|");
			format(string, sizeof(string), "  New Balance: $%d", PlayerInfo[i][pAccount]);
			SendClientMessage(i, COLOR_GRAD5, string);
			format(string, sizeof(string), "  Rent: -$%d", rent);
			SendClientMessage(i, COLOR_RED, string);
			format(string, sizeof(string), "~B~PayDay~n~~w~Paycheck ~n~~g~$%d", pay);
			GameTextForPlayer(i, string, 5000, 1);
			rent = 0;
			OnPlayerUpdate(i);
		}
	}
	Checkprop();
	return 1;
}

strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}
/*public strtik(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ','))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ',') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}*/
public split(const strsrc[], strdest[][], delimiter)
{
	new i, li;
	new aNum;
	new len;

	while(i <= strlen(strsrc)){
	    if(strsrc[i]==delimiter || i==strlen(strsrc)){
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}

	return 1;
}

DelPrint(string1[])
{
	strmid(string1, string1, 0, strlen(string1)-1, 255);
	printf("%s", string1);
}

public LoadPlayer(loaderid,const string[])
{
	new string2[64];
	new loaded = loaderid;
	new valtmp[128];
	format(string2, sizeof(string2), "%s.cer", string);//[DIAMOND3.5]
	new File: file = fopen(string2, io_read);
	if (file)
	{
			fread(file, valtmp);strmid(PLlayerInfo[loaded][plPassword], valtmp, 0, strlen(valtmp)-1, 255);
			fread(file, valtmp);PLlayerInfo[loaded][plCash] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAccount] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAdmin] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plRank] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plJRank] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plJob] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plLevel] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plExp] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][glPupgrade] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plKills] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plCB] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plHW] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSR] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSP] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plBD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDB] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFUG] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGun1] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGun2] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGun3] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGun4] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGun5] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGun6] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAmmo1] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAmmo2] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAmmo3] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAmmo4] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAmmo5] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAmmo6] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSHealth] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plHealth] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPos_x] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPos_y] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPos_z] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plInt] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plLocal] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plTeam] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plModel] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plCell] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPnumber] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPhousekey] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPbiskey] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDuty] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plLicA] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plLicB] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plLicJD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plLicPL] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plLicFE] = strval(valtmp);DelPrint(valtmp);//Where is licJD (the 2nd one)
			fread(file, valtmp);PLlayerInfo[loaded][plXpir] = strval(valtmp);DelPrint(valtmp);//why is this not lic JD?
			fread(file, valtmp);PLlayerInfo[loaded][plFood] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plWarnL] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plTick] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plWantL] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFish] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plProb] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plWeed] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plCoke] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAEdit] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plJail] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDisez] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plJPnts] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSuspend] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plBanTime] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDebitc] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plMisc] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAju] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plArmour] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plKillz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plCBz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plHWz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSRz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plWAz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPENz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDeathz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDMz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDrowned] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFell] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plBusted] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plCrimkill] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGangkill] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDMKill] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDMDeath] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDildoK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFlowerK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plCaneK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGrenadeK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGasK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plMolotovK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plColtK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSPK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDeagleK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPShotK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSawnK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSpas12K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plUziK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plMP5K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAK47K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plM4K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plTec9K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plRifleK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSRifleK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plRPGK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plHSRLK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFlameK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plMiniK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSatchelK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFireEK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSprayK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFistK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plBrassK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGolfK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plNightSK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plBatK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plShovelK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPoolCK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plKatanaK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plChainsawK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plIntimK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plKnifeK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDildoD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFlowerD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plCaneD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGrenadeD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGasD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plMolotovD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plColtD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSPD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plDeagleD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPShotD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSawnD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSpas12D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plUziD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plMP5D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plAK47D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plM4D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plTec9D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plRifleD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSRifleD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plRPGD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plHSRLD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFlameD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plMiniD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSatchelD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFireED] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plSprayD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plFistD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plBrassD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plGolfD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plNightSD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plBatD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plShovelD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plPoolCD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plKatanaD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plChainsawD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plIntimD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plKnifeD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plLogs] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plTmpMission] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plTmpRank] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PLlayerInfo[loaded][plTmpDMkill] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plGangRank] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plWantedlevel] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plLicense] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plMuted] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plPbiskey2] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plPhousekey2] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plCDL] = strval(valtmp);DelPrint(valtmp);
            fread(file, valtmp);PLlayerInfo[loaded][plMotoL] = strval(valtmp);DelPrint(valtmp);
			
			
			SendClientMessage(loaderid, COLOR_WHITE, "SERVER: Account Loaded");
	}
	else
	{
		SendClientMessage(loaderid, COLOR_WHITE, "SERVER: No account found by that name");
		return 0;
	}
	return 1;
}

public SavePlayer(loaderid,const string[])
{
	new string3[32];
	new saved = loaderid;
	format(string3, sizeof(string3), "%s.cer", string);
	new File: pFile = fopen(string3, io_write);
	if (pFile)
	{
		new var[32];
		format(var, 32, "%s\n", PLlayerInfo[saved][plPassword]);fwrite(pFile, var);//[DIAMOND4]
		fclose(pFile);
		new File: hFile = fopen(string3, io_append);
		format(var, 32, "%d pCash\n",PLlayerInfo[saved][plCash]);fwrite(hFile, var);
		format(var, 32, "%d pAccount\n",PLlayerInfo[saved][plAccount]);fwrite(hFile, var);
		format(var, 32, "%d pAdmin\n",PLlayerInfo[saved][plAdmin]);fwrite(hFile, var);
		format(var, 32, "%d pJRank\n",PLlayerInfo[saved][plJRank]);fwrite(hFile, var);
		format(var, 32, "%d pJob\n",PLlayerInfo[saved][plJob]);fwrite(hFile, var);
		format(var, 32, "%d pLevel\n",PLlayerInfo[saved][plLevel]);fwrite(hFile, var);
		format(var, 32, "%d pExp\n",PLlayerInfo[saved][plExp]);fwrite(hFile, var);
		format(var, 32, "%d gPupgrade\n",PLlayerInfo[saved][glPupgrade]);fwrite(hFile, var);
		format(var, 32, "%d pKills\n",PLlayerInfo[saved][plKills]);fwrite(hFile, var);
		format(var, 32, "%d pCB\n",PLlayerInfo[saved][plCB]);fwrite(hFile, var);
		format(var, 32, "%d pHW\n",PLlayerInfo[saved][plHW]);fwrite(hFile, var);
		format(var, 32, "%d pSR\n",PLlayerInfo[saved][plSR]);fwrite(hFile, var);
		format(var, 32, "%d pSP\n",PLlayerInfo[saved][plSP]);fwrite(hFile, var);
		format(var, 32, "%d pBD\n",PLlayerInfo[saved][plBD]);fwrite(hFile, var);
		format(var, 32, "%d pDB\n",PLlayerInfo[saved][plDB]);fwrite(hFile, var);
		format(var, 32, "%d pFUG\n",PLlayerInfo[saved][plFUG]);fwrite(hFile, var);
		format(var, 32, "%d pGun1\n",PLlayerInfo[saved][plGun1]);fwrite(hFile, var);
		format(var, 32, "%d pGun2\n",PLlayerInfo[saved][plGun2]);fwrite(hFile, var);
		format(var, 32, "%d pGun3\n",PLlayerInfo[saved][plGun3]);fwrite(hFile, var);
		format(var, 32, "%d pGun4\n",PLlayerInfo[saved][plGun4]);fwrite(hFile, var);
		format(var, 32, "%d pGun5\n",PLlayerInfo[saved][plGun5]);fwrite(hFile, var);
		format(var, 32, "%d pGun6\n",PLlayerInfo[saved][plGun6]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo1\n",PLlayerInfo[saved][plAmmo1]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo2\n",PLlayerInfo[saved][plAmmo2]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo3\n",PLlayerInfo[saved][plAmmo3]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo4\n",PLlayerInfo[saved][plAmmo4]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo5\n",PLlayerInfo[saved][plAmmo5]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo6\n",PLlayerInfo[saved][plAmmo6]);fwrite(hFile, var);
		format(var, 32, "%.1f pSHealth\n", PLlayerInfo[saved][plSHealth]);fwrite(hFile, var);
		format(var, 32, "%.1f pHealth\n", PLlayerInfo[saved][plHealth]);fwrite(hFile, var);
		format(var, 32, "%.1f pPos_x\n", PLlayerInfo[saved][plPos_x]);fwrite(hFile, var);
		format(var, 32, "%.1f pPos_y\n", PLlayerInfo[saved][plPos_y]);fwrite(hFile, var);
		format(var, 32, "%.1f pPos_z\n", PLlayerInfo[saved][plPos_z]);fwrite(hFile, var);
		format(var, 32, "%d pInt\n",PLlayerInfo[saved][plInt]);fwrite(hFile, var);
		format(var, 32, "%d pLocal\n",PLlayerInfo[saved][plLocal]);fwrite(hFile, var);
		format(var, 32, "%d pTeam\n",PLlayerInfo[saved][plTeam]);fwrite(hFile, var);
		format(var, 32, "%d pModel\n",PLlayerInfo[saved][plModel]);fwrite(hFile, var);
		format(var, 32, "%d pCell\n",PLlayerInfo[saved][plCell]);fwrite(hFile, var);
		format(var, 32, "%d pPnumber\n",PLlayerInfo[saved][plPnumber]);fwrite(hFile, var);
		format(var, 32, "%d pPhousekey\n",PLlayerInfo[saved][plPhousekey]);fwrite(hFile, var);
		format(var, 32, "%d pPbiskey\n",PLlayerInfo[saved][plPbiskey]);fwrite(hFile, var);
		format(var, 32, "%d pDuty\n",PLlayerInfo[saved][plDuty]);fwrite(hFile, var);
		format(var, 32, "%d pLicA\n",PLlayerInfo[saved][plLicA]);fwrite(hFile, var);
		format(var, 32, "%d pLicB\n",PLlayerInfo[saved][plLicB]);fwrite(hFile, var);
		format(var, 32, "%d pLicJD\n",PLlayerInfo[saved][plLicJD]);fwrite(hFile, var);
		format(var, 32, "%d pLicPL\n",PLlayerInfo[saved][plLicPL]);fwrite(hFile, var);
		format(var, 32, "%d pLicFE\n",PLlayerInfo[saved][plLicFE]);fwrite(hFile, var);
		format(var, 32, "%d pXpir\n",PLlayerInfo[saved][plXpir]);fwrite(hFile, var);
		format(var, 32, "%d pFood\n",PLlayerInfo[saved][plFood]);fwrite(hFile, var);
		format(var, 32, "%d pWarnL\n",PLlayerInfo[saved][plWarnL]);fwrite(hFile, var);
		format(var, 32, "%d pTick\n",PLlayerInfo[saved][plTick]);fwrite(hFile, var);
		format(var, 32, "%d pWantL\n",PLlayerInfo[saved][plWantL]);fwrite(hFile, var);
		format(var, 32, "%d pFish\n",PLlayerInfo[saved][plFish]);fwrite(hFile, var);
		format(var, 32, "%d pProb\n",PLlayerInfo[saved][plProb]);fwrite(hFile, var);
		format(var, 32, "%d pWeed\n",PLlayerInfo[saved][plWeed]);fwrite(hFile, var);
		format(var, 32, "%d pCoke\n",PLlayerInfo[saved][plCoke]);fwrite(hFile, var);
		format(var, 32, "%d pAEdit\n",PLlayerInfo[saved][plAEdit]);fwrite(hFile, var);
		format(var, 32, "%d pJail\n",PLlayerInfo[saved][plJail]);fwrite(hFile, var);
		format(var, 32, "%d pDisez\n",PLlayerInfo[saved][plDisez]);fwrite(hFile, var);
		format(var, 32, "%d pJPnts\n",PLlayerInfo[saved][plJPnts]);fwrite(hFile, var);
		format(var, 32, "%d pSuspend\n",PLlayerInfo[saved][plSuspend]);fwrite(hFile, var);
		format(var, 32, "%d pBanTime\n",PLlayerInfo[saved][plBanTime]);fwrite(hFile, var);
		format(var, 32, "%d pDebitc\n",PLlayerInfo[saved][plDebitc]);fwrite(hFile, var);
		format(var, 32, "%d pMisc\n",PLlayerInfo[saved][plMisc]);fwrite(hFile, var);
		format(var, 32, "%d pAju\n",PLlayerInfo[saved][plAju]);fwrite(hFile, var);
		format(var, 32, "$.1f pSArmour\n",PLlayerInfo[saved][plArmour]);fwrite(hFile,var);
		format(var, 32, "%d pKillz\n",PLlayerInfo[saved][plKillz]);fwrite(hFile, var);
		format(var, 32, "%d pCBz\n",PLlayerInfo[saved][plCBz]);fwrite(hFile, var);
		format(var, 32, "%d pHWz\n",PLlayerInfo[saved][plHWz]);fwrite(hFile, var);
		format(var, 32, "%d pSRz\n",PLlayerInfo[saved][plSRz]);fwrite(hFile, var);
		format(var, 32, "%d pWAz\n",PLlayerInfo[saved][plWAz]);fwrite(hFile, var);
		format(var, 32, "%d pPENz\n",PLlayerInfo[saved][plPENz]);fwrite(hFile, var);
		format(var, 32, "%d pDeathz\n",PLlayerInfo[saved][plDeathz]);fwrite(hFile, var);
		format(var, 32, "%d pDMz\n",PLlayerInfo[saved][plDMz]);fwrite(hFile, var);
		format(var, 32, "%d pDrowned\n",PLlayerInfo[saved][plDrowned]);fwrite(hFile, var);
		format(var, 32, "%d pFell\n",PLlayerInfo[saved][plFell]);fwrite(hFile, var);
		format(var, 32, "%d pBusted\n",PLlayerInfo[saved][plBusted]);fwrite(hFile, var);
		format(var, 32, "%d pCrimkill\n",PLlayerInfo[saved][plCrimkill]);fwrite(hFile, var);
		format(var, 32, "%d pGangkill\n",PLlayerInfo[saved][plGangkill]);fwrite(hFile, var);
		format(var, 32, "%d pDMKill\n",PLlayerInfo[saved][plDMKill]);fwrite(hFile, var);
		format(var, 32, "%d pDMDeath\n",PLlayerInfo[saved][plDMDeath]);fwrite(hFile, var);
		format(var, 32, "%d pDildoK\n",PLlayerInfo[saved][plDildoK]);fwrite(hFile, var);
		format(var, 32, "%d pFlowerK\n",PLlayerInfo[saved][plFlowerK]);fwrite(hFile, var);
		format(var, 32, "%d pCaneK\n",PLlayerInfo[saved][plCaneK]);fwrite(hFile, var);
		format(var, 32, "%d pGrenadeK\n",PLlayerInfo[saved][plGrenadeK]);fwrite(hFile, var);
		format(var, 32, "%d pGasK\n",PLlayerInfo[saved][plGasK]);fwrite(hFile, var);
		format(var, 32, "%d pMolotovK\n",PLlayerInfo[saved][plMolotovK]);fwrite(hFile, var);
		format(var, 32, "%d pColtK\n",PLlayerInfo[saved][plColtK]);fwrite(hFile, var);
		format(var, 32, "%d pSPK\n",PLlayerInfo[saved][plSPK]);fwrite(hFile, var);
		format(var, 32, "%d pDeagleK\n",PLlayerInfo[saved][plDeagleK]);fwrite(hFile, var);
		format(var, 32, "%d pPShotK\n",PLlayerInfo[saved][plPShotK]);fwrite(hFile, var);
		format(var, 32, "%d pSawnK\n",PLlayerInfo[saved][plSawnK]);fwrite(hFile, var);
		format(var, 32, "%d pSpas12K\n",PLlayerInfo[saved][plSpas12K]);fwrite(hFile, var);
		format(var, 32, "%d pUziK\n",PLlayerInfo[saved][plUziK]);fwrite(hFile, var);
		format(var, 32, "%d pMP5K\n",PLlayerInfo[saved][plMP5K]);fwrite(hFile, var);
		format(var, 32, "%d pAK47K\n",PLlayerInfo[saved][plAK47K]);fwrite(hFile, var);
		format(var, 32, "%d pM4K\n",PLlayerInfo[saved][plM4K]);fwrite(hFile, var);
		format(var, 32, "%d pTec9K\n",PLlayerInfo[saved][plTec9K]);fwrite(hFile, var);
		format(var, 32, "%d pRifleK\n",PLlayerInfo[saved][plRifleK]);fwrite(hFile, var);
		format(var, 32, "%d pSRifleK\n",PLlayerInfo[saved][plSRifleK]);fwrite(hFile, var);
		format(var, 32, "%d pRPGK\n",PLlayerInfo[saved][plRPGK]);fwrite(hFile, var);
		format(var, 32, "%d pHSRLK\n",PLlayerInfo[saved][plHSRLK]);fwrite(hFile, var);
		format(var, 32, "%d pFlameK\n",PLlayerInfo[saved][plFlameK]);fwrite(hFile, var);
		format(var, 32, "%d pMiniK\n",PLlayerInfo[saved][plMiniK]);fwrite(hFile, var);
		format(var, 32, "%d pSachelK\n",PLlayerInfo[saved][plSatchelK]);fwrite(hFile, var);
		format(var, 32, "%d pFireEK\n",PLlayerInfo[saved][plFireEK]);fwrite(hFile, var);
		format(var, 32, "%d pSprayK\n",PLlayerInfo[saved][plSprayK]);fwrite(hFile, var);
		format(var, 32, "%d pFistK\n",PLlayerInfo[saved][plFistK]);fwrite(hFile, var);
		format(var, 32, "%d pBrassK\n",PLlayerInfo[saved][plBrassK]);fwrite(hFile, var);
		format(var, 32, "%d pGolfK\n",PLlayerInfo[saved][plGolfK]);fwrite(hFile, var);
		format(var, 32, "%d pNightSK\n",PLlayerInfo[saved][plNightSK]);fwrite(hFile, var);
		format(var, 32, "%d pBatK\n",PLlayerInfo[saved][plBatK]);fwrite(hFile, var);
		format(var, 32, "%d pShovelK\n",PLlayerInfo[saved][plShovelK]);fwrite(hFile, var);
		format(var, 32, "%d pPoolCK\n",PLlayerInfo[saved][plPoolCK]);fwrite(hFile, var);
		format(var, 32, "%d pKatanaK\n",PLlayerInfo[saved][plKatanaK]);fwrite(hFile, var);
		format(var, 32, "%d pChainsawK\n",PLlayerInfo[saved][plChainsawK]);fwrite(hFile, var);
		format(var, 32, "%d pIntimK\n",PLlayerInfo[saved][plIntimK]);fwrite(hFile, var);
		format(var, 32, "%d pKnifeK\n",PLlayerInfo[saved][plKnifeK]);fwrite(hFile, var);
		format(var, 32, "%d pDildoD\n",PLlayerInfo[saved][plDildoD]);fwrite(hFile, var);
		format(var, 32, "%d pFlowerD\n",PLlayerInfo[saved][plFlowerD]);fwrite(hFile, var);
		format(var, 32, "%d pCaneD\n",PLlayerInfo[saved][plCaneD]);fwrite(hFile, var);
		format(var, 32, "%d pGrenadeD\n",PLlayerInfo[saved][plGrenadeD]);fwrite(hFile, var);
		format(var, 32, "%d pGasD\n",PLlayerInfo[saved][plGasD]);fwrite(hFile, var);
		format(var, 32, "%d pMolotovD\n",PLlayerInfo[saved][plMolotovD]);fwrite(hFile, var);
		format(var, 32, "%d pColtD\n",PLlayerInfo[saved][plColtD]);fwrite(hFile, var);
		format(var, 32, "%d pSPD\n",PLlayerInfo[saved][plSPD]);fwrite(hFile, var);
		format(var, 32, "%d pDeagleD\n",PLlayerInfo[saved][plDeagleD]);fwrite(hFile, var);
		format(var, 32, "%d pPShotD\n",PLlayerInfo[saved][plPShotD]);fwrite(hFile, var);
		format(var, 32, "%d pSawnD\n",PLlayerInfo[saved][plSawnD]);fwrite(hFile, var);
		format(var, 32, "%d pSpas12D\n",PLlayerInfo[saved][plSpas12D]);fwrite(hFile, var);
		format(var, 32, "%d pUziD\n",PLlayerInfo[saved][plUziD]);fwrite(hFile, var);
		format(var, 32, "%d pMP5D\n",PLlayerInfo[saved][plMP5D]);fwrite(hFile, var);
		format(var, 32, "%d pAK47D\n",PLlayerInfo[saved][plAK47D]);fwrite(hFile, var);
		format(var, 32, "%d pM4D\n",PLlayerInfo[saved][plM4D]);fwrite(hFile, var);
		format(var, 32, "%d pTec9D\n",PLlayerInfo[saved][plTec9D]);fwrite(hFile, var);
		format(var, 32, "%d pRifleD\n",PLlayerInfo[saved][plRifleD]);fwrite(hFile, var);
		format(var, 32, "%d pSRifleD\n",PLlayerInfo[saved][plSRifleD]);fwrite(hFile, var);
		format(var, 32, "%d pRPGD\n",PLlayerInfo[saved][plRPGD]);fwrite(hFile, var);
		format(var, 32, "%d pHSRLD\n",PLlayerInfo[saved][plHSRLD]);fwrite(hFile, var);
		format(var, 32, "%d pFlameD\n",PLlayerInfo[saved][plFlameD]);fwrite(hFile, var);
		format(var, 32, "%d pMiniD\n",PLlayerInfo[saved][plMiniD]);fwrite(hFile, var);
		format(var, 32, "%d pSachelD\n",PLlayerInfo[saved][plSatchelD]);fwrite(hFile, var);
		format(var, 32, "%d pFireED\n",PLlayerInfo[saved][plFireED]);fwrite(hFile, var);
		format(var, 32, "%d pSprayD\n",PLlayerInfo[saved][plSprayD]);fwrite(hFile, var);
		format(var, 32, "%d pFistD\n",PLlayerInfo[saved][plFistD]);fwrite(hFile, var);
		format(var, 32, "%d pBrassD\n",PLlayerInfo[saved][plBrassD]);fwrite(hFile, var);
		format(var, 32, "%d pGolfD\n",PLlayerInfo[saved][plGolfD]);fwrite(hFile, var);
		format(var, 32, "%d pNightSD\n",PLlayerInfo[saved][plNightSD]);fwrite(hFile, var);
		format(var, 32, "%d pBatD\n",PLlayerInfo[saved][plBatD]);fwrite(hFile, var);
		format(var, 32, "%d pShovelD\n",PLlayerInfo[saved][plShovelD]);fwrite(hFile, var);
		format(var, 32, "%d pPoolCD\n",PLlayerInfo[saved][plPoolCD]);fwrite(hFile, var);
		format(var, 32, "%d pKatanaD\n",PLlayerInfo[saved][plKatanaD]);fwrite(hFile, var);
		format(var, 32, "%d pChainsawD\n",PLlayerInfo[saved][plChainsawD]);fwrite(hFile, var);
		format(var, 32, "%d pIntimD\n",PLlayerInfo[saved][plIntimD]);fwrite(hFile, var);
		format(var, 32, "%d pKnifeD\n",PLlayerInfo[saved][plKnifeD]);fwrite(hFile, var);
		format(var, 32, "%d pLogs\n",PLlayerInfo[saved][plLogs]);fwrite(hFile, var);
		format(var, 32, "%d pTmpMission\n",PLlayerInfo[saved][plTmpMission]);fwrite(hFile, var);
		format(var, 32, "%d pTmpRank\n",PLlayerInfo[saved][plTmpRank]);fwrite(hFile, var);
		format(var, 32, "%d pTmpDMkill\n",PLlayerInfo[saved][plTmpDMkill]);fwrite(hFile, var);
		format(var, 32, "%d pGangRank\n",PLlayerInfo[saved][plGangRank]);fwrite(hFile, var);
		format(var, 32, "%d pWantedlevel\n",PLlayerInfo[saved][plWantedlevel]);fwrite(hFile, var);
		format(var, 32, "%d pLicense\n",PLlayerInfo[saved][plLicense]);fwrite(hFile, var);
		format(var, 32, "%d pMuted\n",PLlayerInfo[saved][plMuted]);fwrite(hFile, var);
		format(var, 32, "%d pPbiskey2\n",PLlayerInfo[saved][plPbiskey2]);fwrite(hFile, var);
		format(var, 32, "%d pPhousekey2\n",PLlayerInfo[saved][plPhousekey2]);fwrite(hFile, var);
		format(var, 32, "%d pCDL\n",PLlayerInfo[saved][plCDL]);fwrite(hFile, var);
		format(var, 32, "%d pMotoL\n",PLlayerInfo[saved][plMotoL]);fwrite(hFile, var);
		format(var, 32, "%d pDisconnects\n",PLlayerInfo[saved][plDisconnects]);fwrite(hFile, var);
		format(var, 32, "%d pMHeals\n",PLlayerInfo[saved][plMHeals]);fwrite(hFile, var);
		format(var, 32, "%d pHealed\n",PLlayerInfo[saved][plHealed]);fwrite(hFile, var);
		format(var, 32, "%d pFucked\n",PLlayerInfo[saved][plFucked]);fwrite(hFile, var);
		format(var, 32, "%d pGotfucked\n",PLlayerInfo[saved][plGotfucked]);fwrite(hFile, var);
		format(var, 32, "%d pBlown\n",PLlayerInfo[saved][plBlown]);fwrite(hFile, var);
		format(var, 32, "%d pGotblown\n",PLlayerInfo[saved][plGotblown]);fwrite(hFile, var);
		format(var, 32, "%d pWank\n",PLlayerInfo[saved][plWank]);fwrite(hFile, var);
		format(var, 32, "%d pGotwanked\n",PLlayerInfo[saved][plGotwanked]);fwrite(hFile, var);
		format(var, 32, "%d pAnal\n",PLlayerInfo[saved][plAnal]);fwrite(hFile, var);
		format(var, 32, "%d pGotanal\n",PLlayerInfo[saved][plGotanal]);fwrite(hFile, var);
		format(var, 32, "%d pRobs\n",PLlayerInfo[saved][plGotrobbed]);fwrite(hFile, var);
		format(var, 32, "%d pSaves\n",PLlayerInfo[saved][plSaves]);fwrite(hFile, var);
		format(var, 32, "%d aMutes\n",PLlayerInfo[saved][alMutes]);fwrite(hFile, var);
		format(var, 32, "%d pMutes\n",PLlayerInfo[saved][plMutes]);fwrite(hFile, var);
		format(var, 32, "%d aSlaps\n",PLlayerInfo[saved][alSlaps]);fwrite(hFile, var);
		format(var, 32, "%d pSlaps\n",PLlayerInfo[saved][plSlaps]);fwrite(hFile, var);
		format(var, 32, "%d aKicks\n",PLlayerInfo[saved][alKicks]);fwrite(hFile, var);
		format(var, 32, "%d pKicks\n",PLlayerInfo[saved][plKicks]);fwrite(hFile, var);
		format(var, 32, "%d aScrews\n",PLlayerInfo[saved][alScrews]);fwrite(hFile, var);
		format(var, 32, "%d pScrews\n",PLlayerInfo[saved][plScrews]);fwrite(hFile, var);
		format(var, 32, "%d pGun7\n",PLlayerInfo[saved][plGun7]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo7\n",PLlayerInfo[saved][plAmmo7]);fwrite(hFile, var);
		format(var, 32, "%d pGun8\n",PLlayerInfo[saved][plGun8]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo8\n",PLlayerInfo[saved][plAmmo8]);fwrite(hFile, var);
		format(var, 32, "%d pLottoXP\n",PLlayerInfo[saved][plLottoXP]);fwrite(hFile,var);
		fclose(hFile);
	}
	return 1;
}


public OnPlayerLogin(playerid,const string[])
{
	if (gdebug >= 1){printf("DEBUG OnPlayerLogin(%d) (%s)", playerid,string);}
	new string2[64];
	new playername2[MAX_PLAYER_NAME];
	//new password[64];
	new tmp2[256];
	/*
	if (gPlayerSpawned[playerid] == 1)
	{
		SetPlayerHealth(playerid,0.0);
	}
	*/
	GetPlayerName(playerid, playername2, sizeof(playername2));
	format(string2, sizeof(string2), "%s.cer", playername2);
	new File: file = fopen(string2, io_read);
	if (file)
	{
		new valtmp[128];
		fread(file, valtmp);strmid(PlayerInfo[playerid][pPassword], valtmp, 0, strlen(valtmp)-1, 255);
		if (gdebug){printf("DEBUG password from file= (%s) pass enterd =  (%s)",PlayerInfo[playerid][pPassword] ,string );}
		//fread(file, valtmp);strmid(password, valtmp, 0, strlen(string), 255);
		if ((strcmp(PlayerInfo[playerid][pPassword], string, true, strlen(valtmp)-1) == 0))// && (strlen(string) == strlen(password)))
		{
			fread(file, valtmp);PlayerInfo[playerid][pCash] = strval(valtmp);DelPrint(valtmp);//[DIAMOND5]
			fread(file, valtmp);PlayerInfo[playerid][pAccount] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAdmin] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pRank] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pJRank] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pJob] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLevel] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pExp] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][gPupgrade] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pKills] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pCB] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pHW] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSR] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSP] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pBD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDB] = strval(valtmp);DelPrint(valtmp);
			if(PlayerInfo[playerid][pKills] < 0){PlayerInfo[playerid][pKills] = 0;}//patch
			if(PlayerInfo[playerid][pCB] < 0){PlayerInfo[playerid][pCB] = 0;}//patch
			if(PlayerInfo[playerid][pHW] < 0){PlayerInfo[playerid][pHW] = 0;}//patch
			if(PlayerInfo[playerid][pSR] < 0){PlayerInfo[playerid][pSR] = 0;}//patch
			if(PlayerInfo[playerid][pBD] < 0){PlayerInfo[playerid][pBD] = 0;}//patch
			if(PlayerInfo[playerid][pDB] < 0){PlayerInfo[playerid][pDB] = 0;}//patch
			fread(file, valtmp);PlayerInfo[playerid][pFUG] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGun1] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGun2] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGun3] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGun4] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGun5] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGun6] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAmmo1] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAmmo2] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAmmo3] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAmmo4] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAmmo5] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAmmo6] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSHealth] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pHealth] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPos_x] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPos_y] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPos_z] = floatstr(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pInt] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLocal] = strval(valtmp);DelPrint(valtmp);
			if(PlayerInfo[playerid][pModel] == 264){fread(file, valtmp);PlayerInfo[playerid][pTeam] = strval(valtmp);DelPrint(valtmp);}else{fread(file, valtmp);}
			if(PlayerInfo[playerid][pModel] == 264){fread(file, valtmp);PlayerInfo[playerid][pModel] = strval(valtmp);DelPrint(valtmp);}else{fread(file, valtmp);}
			fread(file, valtmp);PlayerInfo[playerid][pCell] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPnumber] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPhousekey] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPbiskey] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDuty] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLicA] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLicB] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLicJD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLicPL] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLicFE] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pXpir] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFood] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pWarnL] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pTick] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pWantL] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFish] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pProb] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pWeed] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pCoke] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAEdit] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pJail] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDisez] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pJPnts] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSuspend] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pBanTime] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDebitc] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMisc] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAju] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSArmour] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pKillz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pCBz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pHWz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSRz] = strval(valtmp);DelPrint(valtmp);
			if(PlayerInfo[playerid][pKillz] < 0){PlayerInfo[playerid][pKillz] = 0;}//patch
			if(PlayerInfo[playerid][pCBz] < 0){PlayerInfo[playerid][pCBz] = 0;}//patch
			if(PlayerInfo[playerid][pHWz] < 0){PlayerInfo[playerid][pHWz] = 0;}//patch
			if(PlayerInfo[playerid][pSRz] < 0){PlayerInfo[playerid][pSRz] = 0;}//patch
			fread(file, valtmp);PlayerInfo[playerid][pWAz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPENz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDeathz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDMz] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDrowned] = strval(valtmp);DelPrint(valtmp);
		    fread(file, valtmp);PlayerInfo[playerid][pFell] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pBusted] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pCrimkill] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGangkill] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDMKill] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDMDeath] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDildoK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFlowerK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pCaneK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGrenadeK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGasK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMolotovK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pColtK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSPK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDeagleK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPShotK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSawnK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSpas12K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pUziK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMP5K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAK47K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pM4K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pTec9K] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pRifleK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSRifleK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pRPGK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pHSRLK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFlameK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMiniK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSatchelK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFireEK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSprayK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFistK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pBrassK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGolfK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pNightSK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pBatK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pShovelK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPoolCK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pKatanaK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pChainsawK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pIntimK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pKnifeK] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDildoD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFlowerD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pCaneD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGrenadeD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGasD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMolotovD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pColtD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSPD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pDeagleD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPShotD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSawnD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSpas12D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pUziD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMP5D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAK47D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pM4D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pTec9D] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pRifleD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSRifleD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pRPGD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pHSRLD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFlameD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMiniD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSatchelD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFireED] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSprayD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFistD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pBrassD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGolfD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pNightSD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pBatD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pShovelD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPoolCD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pKatanaD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pChainsawD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pIntimD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pKnifeD] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLogs] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pTmpMission] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pTmpRank] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pTmpDMkill] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGangRank] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pWantedlevel] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pLicense] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMuted] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPbiskey2] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pPhousekey2] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pCDL] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMotoL] = strval(valtmp);DelPrint(valtmp);

			fread(file, valtmp);PlayerInfo[playerid][pDisconnects] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMHeals] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pHealed] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pFucked] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGotfucked] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pBlown] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGotblown] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pWank] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGotwanked] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAnal] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGotanal] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pRobs] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGotrobbed] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSaves] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][aMutes] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pMutes] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][aSlaps] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pSlaps] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][aKicks] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pKicks] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][aScrews] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pScrews] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGun7] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAmmo7] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pGun8] = strval(valtmp);DelPrint(valtmp);
			fread(file, valtmp);PlayerInfo[playerid][pAmmo8] = strval(valtmp);DelPrint(valtmp);
			fread(file,valtmp);PlayerInfo[playerid][pLottoXP]=strval(valtmp);DelPrint(valtmp);
			fclose(file);
			ResetPlayerMoney(playerid);
			GiveMoney(playerid,PlayerInfo[playerid][pCash]);

			//if (gdebug){printf("DEBUG phonenumber = %d",pnumber);}
			if(PlayerInfo[playerid][pDuty] == 0)
			{
				gRadio[playerid] = PlayerInfo[playerid][pDuty];
			}
			if(PlayerInfo[playerid][pLevel] == -1000) //autoban
			{
				Ban(playerid);
			}
			if(PlayerInfo[playerid][pWarnL] >= 5)//5 warnings = autoban
			{
                PlayerInfo[playerid][pWarnL] = 0;
				Ban(playerid);
			}
            if(PlayerInfo[playerid][pRank] >= 11)
			{
				PoliceRadio[playerid] = 1;
			}
   			if(PlayerInfo[playerid][pRank] > 1)
			{
				PoliceRadio[playerid] = 1;
			}
			format(string2, sizeof(string2), "Welcome %s",playername2);
			SendClientMessage(playerid, COLOR_WHITE,string2);
            SetTimer("StopMusic", 0, 0);
			SetPlayerWeapons(playerid);
			printf("%s has logged in",playername2);
			if (PlayerInfo[playerid][pAdmin] > 100 || FugitiveCore[playerid] == 1)
			{
				format(string2, sizeof(string2), "Your logged in as a Level %d Admin.",PlayerInfo[playerid][pAdmin]);
				SendClientMessage(playerid, COLOR_RED,string2);
			}
			SetSpawnInfo(playerid, 1, PlayerInfo[playerid][pModel], PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z], 1.0, -1, -1, -1, -1, -1, -1);
			if(PlayerInfo[playerid][pPhousekey]<34){SetPlayerVirtualWorld(playerid,1);}
			else if(PlayerInfo[playerid][pPhousekey]<68&&PlayerInfo[playerid][pPhousekey]>33){SetPlayerVirtualWorld(playerid,2);}
			else{SetPlayerVirtualWorld(playerid,3);}
			if(gTeam[playerid] == 0)
			{
				gTeam[playerid] = 3;
			}
			else
			{
				gTeam[playerid] = PlayerInfo[playerid][pTeam];
			}
			gRadio[playerid] = PlayerInfo[playerid][pDuty];
			gPlayerLogged[playerid] = 1;
			if(accountplay)
			{
				gPlayerSpawned[playerid] = 0;
			}
			SpawnPlayer(playerid);
			GetPlayerName(playerid, playername2, sizeof(playername2));
			format(tmp2, sizeof(tmp2), "~w~Welcome ~n~~b~   %s", playername2);
			DateProp(playerid);
			GameTextForPlayer(playerid, tmp2, 5000, 4);
			SendClientMessage(playerid, COLOR_YELLOW, motd);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "SERVER: You Have Entered an Incorrect password.");
			printf("%s Has Entered an Incorrect password",playername2);
			fclose(file);
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "SERVER: You do not have an account, type /register <password>");
	}
	return 1;
}

CopCheck(playerid)
{
	if (gdebug >= 1){printf("DEBUG CopCheck(%d) (%s)", playerid);}
	new playername2[MAX_PLAYER_NAME];
	new storedcopname[64];
	GetPlayerName(playerid, playername2, sizeof(playername2));
	new File: file = fopen("cops.cfg", io_read);
	if (file)
	{
		new valtmp[MAX_PLAYER_NAME];
		while (fread(file, valtmp) > 0)
		{
			//printf("%s",valtmp);
			strmid(storedcopname, valtmp, 0, strlen(playername2), 255);
			if ((strcmp(storedcopname, playername2, true, strlen(playername2)) == 0) && (strlen(playername2) == strlen(storedcopname)))
			{
				fclose(file);
				return 1;
			}
		}
	}
	fclose(file);
	return 0;
}
MedCheck(playerid)
{
	if (gdebug >= 1){printf("DEBUG MedCheck(%d) (%s)", playerid);}
	new playername2[MAX_PLAYER_NAME];
	new storedcopname[64];
	GetPlayerName(playerid, playername2, sizeof(playername2));
	new File: file = fopen("meds.cfg", io_read);
	if (file)
	{
		new valtmp[MAX_PLAYER_NAME];
		while (fread(file, valtmp) > 0)
		{
			//printf("%s",valtmp);
			strmid(storedcopname, valtmp, 0, strlen(playername2), 255);
			if ((strcmp(storedcopname, playername2, true, strlen(playername2)) == 0) && (strlen(playername2) == strlen(storedcopname)))
			{
				fclose(file);
				return 1;
			}
		}
	}
	fclose(file);
	return 0;
}
public OnPlayerUpdate(playerid)
{
	if (gdebug >= 1){printf("DEBUG OnPlayerUpdate(%d)", playerid);}
	if (gPlayerLogged[playerid] != 0)
	{
		new string3[32];
		new playername3[MAX_PLAYER_NAME];
		GetPlayerName(playerid, playername3, sizeof(playername3));
		format(string3, sizeof(string3), "%s.cer", playername3);
		new File: pFile = fopen(string3, io_write);
		if (gdebug){printf("DEBUG OnPlayerUpdate(%d)8.5", playerid);}
		if (pFile)
		{
			new var[32];
			format(var, 32, "%s\n", PlayerInfo[playerid][pPassword]);fwrite(pFile, var);//[DIAMOND6]
			fclose(pFile);
			new File: hFile = fopen(string3, io_append);
			PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
			format(var, 32, "%d pCash\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
			format(var, 32, "%d pAccount\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
			format(var, 32, "%d pAdmin\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
			format(var, 32, "%d pRank\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
			format(var, 32, "%d pJRank\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
			format(var, 32, "%d pJob\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
			format(var, 32, "%d pLevel\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
			format(var, 32, "%d pExp\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
			format(var, 32, "%d gPupgrade\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
			format(var, 32, "%d pKills\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
			format(var, 32, "%d pCB\n",PlayerInfo[playerid][pCB]);fwrite(hFile, var);
			format(var, 32, "%d pHW\n",PlayerInfo[playerid][pHW]);fwrite(hFile, var);
			format(var, 32, "%d pSR\n",PlayerInfo[playerid][pSR]);fwrite(hFile, var);
			format(var, 32, "%d pSP\n",PlayerInfo[playerid][pSP]);fwrite(hFile, var);
			format(var, 32, "%d pBD\n",PlayerInfo[playerid][pBD]);fwrite(hFile, var);
			format(var, 32, "%d pDB\n",PlayerInfo[playerid][pDB]);fwrite(hFile, var);
			format(var, 32, "%d pFUG\n",PlayerInfo[playerid][pFUG]);fwrite(hFile, var);
			format(var, 32, "%d pGun1\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
			format(var, 32, "%d pGun2\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
			format(var, 32, "%d pGun3\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
			format(var, 32, "%d pGun4\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
			format(var, 32, "%d pGun5\n",PlayerInfo[playerid][pGun5]);fwrite(hFile, var);
			format(var, 32, "%d pGun6\n",PlayerInfo[playerid][pGun6]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo1\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo2\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo3\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo4\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo5\n",PlayerInfo[playerid][pAmmo5]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo6\n",PlayerInfo[playerid][pAmmo6]);fwrite(hFile, var);
			format(var, 32, "%.1f pSHealth\n", PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
			GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
			format(var, 32, "%.1f pHealth\n", PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
			GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
			if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0) || (gPlayerFighter[playerid] != 0))
			{
				PlayerInfo[playerid][pPos_x] = 2246.6;//Diamofix
				PlayerInfo[playerid][pPos_y] = -1161.9;
				PlayerInfo[playerid][pPos_z] = 1029.7;
			}
			if(Spectate[playerid] != 255)
			{
				PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
				PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
				PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
				PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
			}
			format(var, 32, "%.1f pPos_x\n", PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
			format(var, 32, "%.1f pPos_y\n", PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
			format(var, 32, "%.1f pPos_z\n", PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
			format(var, 32, "%d pInt\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
			format(var, 32, "%d pLocal\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
			format(var, 32, "%d pTeam\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
			format(var, 32, "%d pModel\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
			format(var, 32, "%d pCell\n",PlayerInfo[playerid][pCell]);fwrite(hFile, var);
			format(var, 32, "%d pPnumber\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
			format(var, 32, "%d pPhousekey\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
			format(var, 32, "%d pPbiskey\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
			format(var, 32, "%d pDuty\n",PlayerInfo[playerid][pDuty]);fwrite(hFile, var);
			format(var, 32, "%d pLicA\n",PlayerInfo[playerid][pLicA]);fwrite(hFile, var);
			format(var, 32, "%d pLicB\n",PlayerInfo[playerid][pLicB]);fwrite(hFile, var);
			format(var, 32, "%d pLicJD\n",PlayerInfo[playerid][pLicJD]);fwrite(hFile, var);
			format(var, 32, "%d pLicPL\n",PlayerInfo[playerid][pLicPL]);fwrite(hFile, var);
			format(var, 32, "%d pLicFE\n",PlayerInfo[playerid][pLicFE]);fwrite(hFile, var);
			format(var, 32, "%d pLicJD\n",PlayerInfo[playerid][pLicJD]);fwrite(hFile, var);
			format(var, 32, "%d pFood\n",PlayerInfo[playerid][pFood]);fwrite(hFile, var);
			format(var, 32, "%d pWarnL\n",PlayerInfo[playerid][pWarnL]);fwrite(hFile, var);
			format(var, 32, "%d pTick\n",PlayerInfo[playerid][pTick]);fwrite(hFile, var);
			format(var, 32, "%d pWantL\n",PlayerInfo[playerid][pWantL]);fwrite(hFile, var);
			format(var, 32, "%d pFish\n",PlayerInfo[playerid][pFish]);fwrite(hFile, var);
			format(var, 32, "%d pProb\n",PlayerInfo[playerid][pProb]);fwrite(hFile, var);
			format(var, 32, "%d pWeed\n",PlayerInfo[playerid][pWeed]);fwrite(hFile, var);
			format(var, 32, "%d pCoke\n",PlayerInfo[playerid][pCoke]);fwrite(hFile, var);
			format(var, 32, "%d pAEdit\n",PlayerInfo[playerid][pAEdit]);fwrite(hFile, var);
			format(var, 32, "%d pJail\n",PlayerInfo[playerid][pJail]);fwrite(hFile, var);
			format(var, 32, "%d pDisez\n",PlayerInfo[playerid][pDisez]);fwrite(hFile, var);
			format(var, 32, "%d pJPnts\n",PlayerInfo[playerid][pJPnts]);fwrite(hFile, var);
			format(var, 32, "%d pSuspend\n",PlayerInfo[playerid][pSuspend]);fwrite(hFile, var);
			format(var, 32, "%d pBanTime\n",PlayerInfo[playerid][pBanTime]);fwrite(hFile, var);
			format(var, 32, "%d pDebitc\n",PlayerInfo[playerid][pDebitc]);fwrite(hFile, var);
			format(var, 32, "%d pMisc\n",PlayerInfo[playerid][pMisc]);fwrite(hFile, var);
			format(var, 32, "%d pAju\n",PlayerInfo[playerid][pAju]);fwrite(hFile, var);
			format(var, 32, "%.1f pSArmour\n",PlayerInfo[playerid][pSArmour]);fwrite(hFile, var);
			format(var, 32, "%d pKillz\n",PlayerInfo[playerid][pKillz]);fwrite(hFile, var);
			format(var, 32, "%d pCBz\n",PlayerInfo[playerid][pCBz]);fwrite(hFile, var);
			format(var, 32, "%d pHWz\n",PlayerInfo[playerid][pHWz]);fwrite(hFile, var);
			format(var, 32, "%d pSRz\n",PlayerInfo[playerid][pSRz]);fwrite(hFile, var);
			format(var, 32, "%d pWAz\n",PlayerInfo[playerid][pWAz]);fwrite(hFile, var);
			format(var, 32, "%d pPENz\n",PlayerInfo[playerid][pPENz]);fwrite(hFile, var);
			format(var, 32, "%d pDeathz\n",PlayerInfo[playerid][pDeathz]);fwrite(hFile, var);
			format(var, 32, "%d pDMz\n",PlayerInfo[playerid][pDMz]);fwrite(hFile, var);
			format(var, 32, "%d pDrowned\n",PlayerInfo[playerid][pDrowned]);fwrite(hFile, var);
			format(var, 32, "%d pFell\n",PlayerInfo[playerid][pFell]);fwrite(hFile, var);
			format(var, 32, "%d pBusted\n",PlayerInfo[playerid][pBusted]);fwrite(hFile, var);
			format(var, 32, "%d pCrimkill\n",PlayerInfo[playerid][pCrimkill]);fwrite(hFile, var);
			format(var, 32, "%d pGangkill\n",PlayerInfo[playerid][pGangkill]);fwrite(hFile, var);
			format(var, 32, "%d pCopkill\n",PlayerInfo[playerid][pCopkill]);fwrite(hFile, var);
			format(var, 32, "%d pDMKill\n",PlayerInfo[playerid][pDMKill]);fwrite(hFile, var);
			format(var, 32, "%d pDMDeath\n",PlayerInfo[playerid][pDMDeath]);fwrite(hFile, var);
			format(var, 32, "%d pDildoK\n",PlayerInfo[playerid][pDildoK]);fwrite(hFile, var);
			format(var, 32, "%d pFlowerK\n",PlayerInfo[playerid][pFlowerK]);fwrite(hFile, var);
			format(var, 32, "%d pCaneK\n",PlayerInfo[playerid][pCaneK]);fwrite(hFile, var);
			format(var, 32, "%d pGrenadeK\n",PlayerInfo[playerid][pGrenadeK]);fwrite(hFile, var);
			format(var, 32, "%d pGasK\n",PlayerInfo[playerid][pGasK]);fwrite(hFile, var);
			format(var, 32, "%d pMolotovK\n",PlayerInfo[playerid][pMolotovK]);fwrite(hFile, var);
			format(var, 32, "%d pColtK\n",PlayerInfo[playerid][pColtK]);fwrite(hFile, var);
			format(var, 32, "%d pSPK\n",PlayerInfo[playerid][pSPK]);fwrite(hFile, var);
			format(var, 32, "%d pDeagleK\n",PlayerInfo[playerid][pDeagleK]);fwrite(hFile, var);
			format(var, 32, "%d pPShotK\n",PlayerInfo[playerid][pPShotK]);fwrite(hFile, var);
			format(var, 32, "%d pSawnK\n",PlayerInfo[playerid][pSawnK]);fwrite(hFile, var);
			format(var, 32, "%d pSpas12K\n",PlayerInfo[playerid][pSpas12K]);fwrite(hFile, var);
			format(var, 32, "%d pUziK\n",PlayerInfo[playerid][pUziK]);fwrite(hFile, var);
			format(var, 32, "%d pMP5K\n",PlayerInfo[playerid][pMP5K]);fwrite(hFile, var);
			format(var, 32, "%d pAK47K\n",PlayerInfo[playerid][pAK47K]);fwrite(hFile, var);
			format(var, 32, "%d pM4K\n",PlayerInfo[playerid][pM4K]);fwrite(hFile, var);
			format(var, 32, "%d pTec9K\n",PlayerInfo[playerid][pTec9K]);fwrite(hFile, var);
			format(var, 32, "%d pRifleK\n",PlayerInfo[playerid][pRifleK]);fwrite(hFile, var);
			format(var, 32, "%d pSRifleK\n",PlayerInfo[playerid][pSRifleK]);fwrite(hFile, var);
			format(var, 32, "%d pRPGK\n",PlayerInfo[playerid][pRPGK]);fwrite(hFile, var);
			format(var, 32, "%d pHSRLK\n",PlayerInfo[playerid][pHSRLK]);fwrite(hFile, var);
			format(var, 32, "%d pFlameK\n",PlayerInfo[playerid][pFlameK]);fwrite(hFile, var);
			format(var, 32, "%d pMiniK\n",PlayerInfo[playerid][pMiniK]);fwrite(hFile, var);
			format(var, 32, "%d pSachelK\n",PlayerInfo[playerid][pSatchelK]);fwrite(hFile, var);
			format(var, 32, "%d pFireEK\n",PlayerInfo[playerid][pFireEK]);fwrite(hFile, var);
			format(var, 32, "%d pSprayK\n",PlayerInfo[playerid][pSprayK]);fwrite(hFile, var);
			format(var, 32, "%d pFistK\n",PlayerInfo[playerid][pFistK]);fwrite(hFile, var);
			format(var, 32, "%d pBrassK\n",PlayerInfo[playerid][pBrassK]);fwrite(hFile, var);
			format(var, 32, "%d pGolfK\n",PlayerInfo[playerid][pGolfK]);fwrite(hFile, var);
			format(var, 32, "%d pNightSK\n",PlayerInfo[playerid][pNightSK]);fwrite(hFile, var);
			format(var, 32, "%d pBatK\n",PlayerInfo[playerid][pBatK]);fwrite(hFile, var);
			format(var, 32, "%d pShovelK\n",PlayerInfo[playerid][pShovelK]);fwrite(hFile, var);
			format(var, 32, "%d pPoolCK\n",PlayerInfo[playerid][pPoolCK]);fwrite(hFile, var);
			format(var, 32, "%d pKatanaK\n",PlayerInfo[playerid][pKatanaK]);fwrite(hFile, var);
			format(var, 32, "%d pChainsawK\n",PlayerInfo[playerid][pChainsawK]);fwrite(hFile, var);
			format(var, 32, "%d pIntimK\n",PlayerInfo[playerid][pIntimK]);fwrite(hFile, var);
			format(var, 32, "%d pKnifeK\n",PlayerInfo[playerid][pKnifeK]);fwrite(hFile, var);
			format(var, 32, "%d pDildoD\n",PlayerInfo[playerid][pDildoD]);fwrite(hFile, var);
			format(var, 32, "%d pFlowerD\n",PlayerInfo[playerid][pFlowerD]);fwrite(hFile, var);
			format(var, 32, "%d pCaneD\n",PlayerInfo[playerid][pCaneD]);fwrite(hFile, var);
			format(var, 32, "%d pGrenadeD\n",PlayerInfo[playerid][pGrenadeD]);fwrite(hFile, var);
			format(var, 32, "%d pGasD\n",PlayerInfo[playerid][pGasD]);fwrite(hFile, var);
			format(var, 32, "%d pMolotovD\n",PlayerInfo[playerid][pMolotovD]);fwrite(hFile, var);
			format(var, 32, "%d pColtD\n",PlayerInfo[playerid][pColtD]);fwrite(hFile, var);
			format(var, 32, "%d pSPD\n",PlayerInfo[playerid][pSPD]);fwrite(hFile, var);
			format(var, 32, "%d pDeagleD\n",PlayerInfo[playerid][pDeagleD]);fwrite(hFile, var);
			format(var, 32, "%d pPShotD\n",PlayerInfo[playerid][pPShotD]);fwrite(hFile, var);
			format(var, 32, "%d pSawnD\n",PlayerInfo[playerid][pSawnD]);fwrite(hFile, var);
			format(var, 32, "%d pSpas12D\n",PlayerInfo[playerid][pSpas12D]);fwrite(hFile, var);
			format(var, 32, "%d pUziD\n",PlayerInfo[playerid][pUziD]);fwrite(hFile, var);
			format(var, 32, "%d pMP5D\n",PlayerInfo[playerid][pMP5D]);fwrite(hFile, var);
			format(var, 32, "%d pAK47D\n",PlayerInfo[playerid][pAK47D]);fwrite(hFile, var);
			format(var, 32, "%d pM4D\n",PlayerInfo[playerid][pM4D]);fwrite(hFile, var);
			format(var, 32, "%d pTec9D\n",PlayerInfo[playerid][pTec9D]);fwrite(hFile, var);
			format(var, 32, "%d pRifleD\n",PlayerInfo[playerid][pRifleD]);fwrite(hFile, var);
			format(var, 32, "%d pSRifleD\n",PlayerInfo[playerid][pSRifleD]);fwrite(hFile, var);
			format(var, 32, "%d pRPGD\n",PlayerInfo[playerid][pRPGD]);fwrite(hFile, var);
			format(var, 32, "%d pHSRLD\n",PlayerInfo[playerid][pHSRLD]);fwrite(hFile, var);
			format(var, 32, "%d pFlameD\n",PlayerInfo[playerid][pFlameD]);fwrite(hFile, var);
			format(var, 32, "%d pMiniD\n",PlayerInfo[playerid][pMiniD]);fwrite(hFile, var);
			format(var, 32, "%d pSachelD\n",PlayerInfo[playerid][pSatchelD]);fwrite(hFile, var);
			format(var, 32, "%d pFireED\n",PlayerInfo[playerid][pFireED]);fwrite(hFile, var);
			format(var, 32, "%d pSprayD\n",PlayerInfo[playerid][pSprayD]);fwrite(hFile, var);
			format(var, 32, "%d pFistD\n",PlayerInfo[playerid][pFistD]);fwrite(hFile, var);
			format(var, 32, "%d pBrassD\n",PlayerInfo[playerid][pBrassD]);fwrite(hFile, var);
			format(var, 32, "%d pGolfD\n",PlayerInfo[playerid][pGolfD]);fwrite(hFile, var);
			format(var, 32, "%d pNightSD\n",PlayerInfo[playerid][pNightSD]);fwrite(hFile, var);
			format(var, 32, "%d pBatD\n",PlayerInfo[playerid][pBatD]);fwrite(hFile, var);
			format(var, 32, "%d pShovelD\n",PlayerInfo[playerid][pShovelD]);fwrite(hFile, var);
			format(var, 32, "%d pPoolCD\n",PlayerInfo[playerid][pPoolCD]);fwrite(hFile, var);
			format(var, 32, "%d pKatanaD\n",PlayerInfo[playerid][pKatanaD]);fwrite(hFile, var);
			format(var, 32, "%d pChainsawD\n",PlayerInfo[playerid][pChainsawD]);fwrite(hFile, var);
			format(var, 32, "%d pIntimD\n",PlayerInfo[playerid][pIntimD]);fwrite(hFile, var);
			format(var, 32, "%d pKnifeD\n",PlayerInfo[playerid][pKnifeD]);fwrite(hFile, var);
			format(var, 32, "%d pLogs\n",PlayerInfo[playerid][pLogs]);fwrite(hFile, var);
			format(var, 32, "%d pTmpMission\n",PlayerInfo[playerid][pTmpMission]);fwrite(hFile, var);
			format(var, 32, "%d pTmpRank\n",PlayerInfo[playerid][pTmpRank]);fwrite(hFile, var);
			format(var, 32, "%d pTmpDMkill\n",PlayerInfo[playerid][pTmpDMkill]);fwrite(hFile, var);
			format(var, 32, "%d pGangRank\n",PlayerInfo[playerid][pGangRank]);fwrite(hFile, var);
			format(var, 32, "%d pWantedlevel\n",PlayerInfo[playerid][pWantedlevel]);fwrite(hFile, var);
			format(var, 32, "%d pLicense\n",PlayerInfo[playerid][pLicense]);fwrite(hFile, var);
			format(var, 32, "%d pMuted\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
			format(var, 32, "%d pPbiskey2\n",PlayerInfo[playerid][pPbiskey2]);fwrite(hFile, var);
			format(var, 32, "%d pPhousekey2\n",PlayerInfo[playerid][pPhousekey2]);fwrite(hFile, var);
			format(var, 32, "%d pCDL\n",PlayerInfo[playerid][pCDL]);fwrite(hFile, var);
			format(var, 32, "%d pMotoL\n",PlayerInfo[playerid][pMotoL]);fwrite(hFile, var);
			format(var, 32, "%d pDisconnects\n",PlayerInfo[playerid][pDisconnects]);fwrite(hFile, var);
			format(var, 32, "%d pMHeals\n",PlayerInfo[playerid][pMHeals]);fwrite(hFile, var);
			format(var, 32, "%d pHealed\n",PlayerInfo[playerid][pHealed]);fwrite(hFile, var);
			format(var, 32, "%d pFucked\n",PlayerInfo[playerid][pFucked]);fwrite(hFile, var);
			format(var, 32, "%d pGotfucked\n",PlayerInfo[playerid][pGotfucked]);fwrite(hFile, var);
			format(var, 32, "%d pBlown\n",PlayerInfo[playerid][pBlown]);fwrite(hFile, var);
			format(var, 32, "%d pGotblown\n",PlayerInfo[playerid][pGotblown]);fwrite(hFile, var);
			format(var, 32, "%d pWank\n",PlayerInfo[playerid][pWank]);fwrite(hFile, var);
			format(var, 32, "%d pGotwanked\n",PlayerInfo[playerid][pGotwanked]);fwrite(hFile, var);
			format(var, 32, "%d pAnal\n",PlayerInfo[playerid][pAnal]);fwrite(hFile, var);
			format(var, 32, "%d pGotanal\n",PlayerInfo[playerid][pGotanal]);fwrite(hFile, var);
			format(var, 32, "%d pRobs\n",PlayerInfo[playerid][pGotrobbed]);fwrite(hFile, var);
			format(var, 32, "%d pSaves\n",PlayerInfo[playerid][pSaves]);fwrite(hFile, var);
			format(var, 32, "%d aMutes\n",PlayerInfo[playerid][aMutes]);fwrite(hFile, var);
			format(var, 32, "%d pMutes\n",PlayerInfo[playerid][pMutes]);fwrite(hFile, var);
			format(var, 32, "%d aSlaps\n",PlayerInfo[playerid][aSlaps]);fwrite(hFile, var);
			format(var, 32, "%d pSlaps\n",PlayerInfo[playerid][pSlaps]);fwrite(hFile, var);
			format(var, 32, "%d aKicks\n",PlayerInfo[playerid][aKicks]);fwrite(hFile, var);
			format(var, 32, "%d pKicks\n",PlayerInfo[playerid][pKicks]);fwrite(hFile, var);
			format(var, 32, "%d aScrews\n",PlayerInfo[playerid][aScrews]);fwrite(hFile, var);
			format(var, 32, "%d pScrews\n",PlayerInfo[playerid][pScrews]);fwrite(hFile, var);
			format(var, 32, "%d pGun7\n",PlayerInfo[playerid][pGun7]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo7\n",PlayerInfo[playerid][pAmmo7]);fwrite(hFile, var);
			format(var, 32, "%d pGun8\n",PlayerInfo[playerid][pGun8]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo8\n",PlayerInfo[playerid][pAmmo8]);fwrite(hFile, var);
			format(var, 32, "%d pLottoXP\n",PlayerInfo[playerid][pLottoXP]);fwrite(hFile,var);
			fclose(hFile);
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "You do not have an account, type /register <password>");
	}
	if (gdebug){printf("DEBUG OnPlayerUpdate(%d)End", playerid);}
	return 1;
}

OnPlayerRename(name[],string[],playerid)
{
	if (gdebug >= 1){printf("DEBUG OnPlayerRename(%d)", playerid);}
	if (gPlayerLogged[playerid] != 0)
	{
		new File: pFile = fopen(string, io_write);
		if (gdebug){printf("DEBUG OnPlayerUpdate(%d)8.5", playerid);}
		if (pFile)
		{
			new var[32];
			format(var, 32, "%s\n", PlayerInfo[playerid][pPassword]);fwrite(pFile, var);//[DIAMOND7]
			fclose(pFile);
			new File: hFile = fopen(string, io_append);
			PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
			format(var, 32, "%d pCash\n",PlayerInfo[playerid][pCash]);fwrite(hFile, var);
			format(var, 32, "%d pAccount\n",PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
			format(var, 32, "%d pAdmin\n",PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
			format(var, 32, "%d pRank\n",PlayerInfo[playerid][pRank]);fwrite(hFile, var);
			format(var, 32, "%d pJRank\n",PlayerInfo[playerid][pJRank]);fwrite(hFile, var);
			format(var, 32, "%d pJob\n",PlayerInfo[playerid][pJob]);fwrite(hFile, var);
			format(var, 32, "%d pLevel\n",PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
			format(var, 32, "%d pExp\n",PlayerInfo[playerid][pExp]);fwrite(hFile, var);
			format(var, 32, "%d gPupgrade\n",PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
			format(var, 32, "%d pKills\n",PlayerInfo[playerid][pKills]);fwrite(hFile, var);
			format(var, 32, "%d pCB\n",PlayerInfo[playerid][pCB]);fwrite(hFile, var);
			format(var, 32, "%d pHW\n",PlayerInfo[playerid][pHW]);fwrite(hFile, var);
			format(var, 32, "%d pSR\n",PlayerInfo[playerid][pSR]);fwrite(hFile, var);
			format(var, 32, "%d pSP\n",PlayerInfo[playerid][pSP]);fwrite(hFile, var);
			format(var, 32, "%d pBD\n",PlayerInfo[playerid][pBD]);fwrite(hFile, var);
			format(var, 32, "%d pDB\n",PlayerInfo[playerid][pDB]);fwrite(hFile, var);
			format(var, 32, "%d pFUG\n",PlayerInfo[playerid][pFUG]);fwrite(hFile, var);
			format(var, 32, "%d pGun1\n",PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
			format(var, 32, "%d pGun2\n",PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
			format(var, 32, "%d pGun3\n",PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
			format(var, 32, "%d pGun4\n",PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
			format(var, 32, "%d pGun5\n",PlayerInfo[playerid][pGun5]);fwrite(hFile, var);
			format(var, 32, "%d pGun6\n",PlayerInfo[playerid][pGun6]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo1\n",PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo2\n",PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo3\n",PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo4\n",PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo5\n",PlayerInfo[playerid][pAmmo5]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo6\n",PlayerInfo[playerid][pAmmo6]);fwrite(hFile, var);
			format(var, 32, "%.1f pSHealth\n", PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
			GetPlayerHealth(playerid,PlayerInfo[playerid][pHealth]);
			format(var, 32, "%.1f pHealth\n", PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
			GetPlayerPos(playerid, PlayerInfo[playerid][pPos_x], PlayerInfo[playerid][pPos_y], PlayerInfo[playerid][pPos_z]);
			if ((PlayerInfo[playerid][pPos_x]==0.0 && PlayerInfo[playerid][pPos_y]==0.0 && PlayerInfo[playerid][pPos_z]==0.0) || (gPlayerFighter[playerid] != 0))
			{
				PlayerInfo[playerid][pPos_x] = 2246.6;//Diamofix
				PlayerInfo[playerid][pPos_y] = -1161.9;
				PlayerInfo[playerid][pPos_z] = 1029.7;
			}
			if(Spectate[playerid] != 255)
			{
				PlayerInfo[playerid][pPos_x] = Unspec[playerid][sPx];
				PlayerInfo[playerid][pPos_y] = Unspec[playerid][sPy];
				PlayerInfo[playerid][pPos_z] = Unspec[playerid][sPz];
				PlayerInfo[playerid][pInt] = Unspec[playerid][sPint];
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
			}
			format(var, 32, "%.1f pPos_x\n", PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
			format(var, 32, "%.1f pPos_y\n", PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
			format(var, 32, "%.1f pPos_z\n", PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
			format(var, 32, "%d pInt\n",PlayerInfo[playerid][pInt]);fwrite(hFile, var);
			format(var, 32, "%d pLocal\n",PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
			format(var, 32, "%d pTeam\n",PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
			format(var, 32, "%d pModel\n",PlayerInfo[playerid][pModel]);fwrite(hFile, var);
			format(var, 32, "%d pCell\n",PlayerInfo[playerid][pCell]);fwrite(hFile, var);
			format(var, 32, "%d pPnumber\n",PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
			format(var, 32, "%d pPhousekey\n",PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
			format(var, 32, "%d pPbiskey\n",PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
			format(var, 32, "%d pDuty\n",PlayerInfo[playerid][pDuty]);fwrite(hFile, var);
			format(var, 32, "%d pLicA\n",PlayerInfo[playerid][pLicA]);fwrite(hFile, var);
			format(var, 32, "%d pLicB\n",PlayerInfo[playerid][pLicB]);fwrite(hFile, var);
			format(var, 32, "%d pLicJD\n",PlayerInfo[playerid][pLicJD]);fwrite(hFile, var);
			format(var, 32, "%d pLicPL\n",PlayerInfo[playerid][pLicPL]);fwrite(hFile, var);
			format(var, 32, "%d pLicFE\n",PlayerInfo[playerid][pLicFE]);fwrite(hFile, var);
			format(var, 32, "%d pXpir\n",PlayerInfo[playerid][pXpir]);fwrite(hFile, var);
			format(var, 32, "%d pFood\n",PlayerInfo[playerid][pFood]);fwrite(hFile, var);
			format(var, 32, "%d pWarnL\n",PlayerInfo[playerid][pWarnL]);fwrite(hFile, var);
			format(var, 32, "%d pTick\n",PlayerInfo[playerid][pTick]);fwrite(hFile, var);
			format(var, 32, "%d pWantL\n",PlayerInfo[playerid][pWantL]);fwrite(hFile, var);
			format(var, 32, "%d pFish\n",PlayerInfo[playerid][pFish]);fwrite(hFile, var);
			format(var, 32, "%d pProb\n",PlayerInfo[playerid][pProb]);fwrite(hFile, var);
			format(var, 32, "%d pWeed\n",PlayerInfo[playerid][pWeed]);fwrite(hFile, var);
			format(var, 32, "%d pCoke\n",PlayerInfo[playerid][pCoke]);fwrite(hFile, var);
			format(var, 32, "%d pAEdit\n",PlayerInfo[playerid][pAEdit]);fwrite(hFile, var);
			format(var, 32, "%d pJail\n",PlayerInfo[playerid][pJail]);fwrite(hFile, var);
			format(var, 32, "%d pDisez\n",PlayerInfo[playerid][pDisez]);fwrite(hFile, var);
			format(var, 32, "%d pJPnts\n",PlayerInfo[playerid][pJPnts]);fwrite(hFile, var);
			format(var, 32, "%d pSuspend\n",PlayerInfo[playerid][pSuspend]);fwrite(hFile, var);
			format(var, 32, "%d pBanTime\n",PlayerInfo[playerid][pBanTime]);fwrite(hFile, var);
			format(var, 32, "%d pDebitc\n",PlayerInfo[playerid][pDebitc]);fwrite(hFile, var);
			format(var, 32, "%d pMisc\n",PlayerInfo[playerid][pMisc]);fwrite(hFile, var);
			format(var, 32, "%d pAju\n",PlayerInfo[playerid][pAju]);fwrite(hFile, var);
			format(var, 32, "%.1f pSArmour\n",PlayerInfo[playerid][pSArmour]);fwrite(hFile, var);
			format(var, 32, "%d pKillz\n",PlayerInfo[playerid][pKillz]);fwrite(hFile, var);
			format(var, 32, "%d pCBz\n",PlayerInfo[playerid][pCBz]);fwrite(hFile, var);
			format(var, 32, "%d pHWz\n",PlayerInfo[playerid][pHWz]);fwrite(hFile, var);
			format(var, 32, "%d pSRz\n",PlayerInfo[playerid][pSRz]);fwrite(hFile, var);
			format(var, 32, "%d pWAz\n",PlayerInfo[playerid][pWAz]);fwrite(hFile, var);
			format(var, 32, "%d pPENz\n",PlayerInfo[playerid][pPENz]);fwrite(hFile, var);
			format(var, 32, "%d pDeathz\n",PlayerInfo[playerid][pDeathz]);fwrite(hFile, var);
			format(var, 32, "%d pDrowned\n",PlayerInfo[playerid][pDrowned]);fwrite(hFile, var);
			format(var, 32, "%d pFell\n",PlayerInfo[playerid][pFell]);fwrite(hFile, var);
			format(var, 32, "%d pBusted\n",PlayerInfo[playerid][pBusted]);fwrite(hFile, var);
			format(var, 32, "%d pCrimkill\n",PlayerInfo[playerid][pCrimkill]);fwrite(hFile, var);
			format(var, 32, "%d pGangkill\n",PlayerInfo[playerid][pGangkill]);fwrite(hFile, var);
			format(var, 32, "%d pCopkill\n",PlayerInfo[playerid][pCopkill]);fwrite(hFile, var);
			format(var, 32, "%d pDMKill\n",PlayerInfo[playerid][pDMKill]);fwrite(hFile, var);
			format(var, 32, "%d pDMDeath\n",PlayerInfo[playerid][pDMDeath]);fwrite(hFile, var);
			format(var, 32, "%d pDildoK\n",PlayerInfo[playerid][pDildoK]);fwrite(hFile, var);
			format(var, 32, "%d pFlowerK\n",PlayerInfo[playerid][pFlowerK]);fwrite(hFile, var);
			format(var, 32, "%d pCaneK\n",PlayerInfo[playerid][pCaneK]);fwrite(hFile, var);
			format(var, 32, "%d pGrenadeK\n",PlayerInfo[playerid][pGrenadeK]);fwrite(hFile, var);
			format(var, 32, "%d pGasK\n",PlayerInfo[playerid][pGasK]);fwrite(hFile, var);
			format(var, 32, "%d pMolotovK\n",PlayerInfo[playerid][pMolotovK]);fwrite(hFile, var);
			format(var, 32, "%d pColtK\n",PlayerInfo[playerid][pColtK]);fwrite(hFile, var);
			format(var, 32, "%d pSPK\n",PlayerInfo[playerid][pSPK]);fwrite(hFile, var);
			format(var, 32, "%d pDeagleK\n",PlayerInfo[playerid][pDeagleK]);fwrite(hFile, var);
			format(var, 32, "%d pPShotK\n",PlayerInfo[playerid][pPShotK]);fwrite(hFile, var);
			format(var, 32, "%d pSawnK\n",PlayerInfo[playerid][pSawnK]);fwrite(hFile, var);
			format(var, 32, "%d pSpas12K\n",PlayerInfo[playerid][pSpas12K]);fwrite(hFile, var);
			format(var, 32, "%d pUziK\n",PlayerInfo[playerid][pUziK]);fwrite(hFile, var);
			format(var, 32, "%d pMP5K\n",PlayerInfo[playerid][pMP5K]);fwrite(hFile, var);
			format(var, 32, "%d pAK47K\n",PlayerInfo[playerid][pAK47K]);fwrite(hFile, var);
			format(var, 32, "%d pM4K\n",PlayerInfo[playerid][pM4K]);fwrite(hFile, var);
			format(var, 32, "%d pTec9K\n",PlayerInfo[playerid][pTec9K]);fwrite(hFile, var);
			format(var, 32, "%d pRifleK\n",PlayerInfo[playerid][pRifleK]);fwrite(hFile, var);
			format(var, 32, "%d pSRifleK\n",PlayerInfo[playerid][pSRifleK]);fwrite(hFile, var);
			format(var, 32, "%d pRPGK\n",PlayerInfo[playerid][pRPGK]);fwrite(hFile, var);
			format(var, 32, "%d pHSRLK\n",PlayerInfo[playerid][pHSRLK]);fwrite(hFile, var);
			format(var, 32, "%d pFlameK\n",PlayerInfo[playerid][pFlameK]);fwrite(hFile, var);
			format(var, 32, "%d pMiniK\n",PlayerInfo[playerid][pMiniK]);fwrite(hFile, var);
			format(var, 32, "%d pSachelK\n",PlayerInfo[playerid][pSatchelK]);fwrite(hFile, var);
			format(var, 32, "%d pFireEK\n",PlayerInfo[playerid][pFireEK]);fwrite(hFile, var);
			format(var, 32, "%d pSprayK\n",PlayerInfo[playerid][pSprayK]);fwrite(hFile, var);
			format(var, 32, "%d pFistK\n",PlayerInfo[playerid][pFistK]);fwrite(hFile, var);
			format(var, 32, "%d pBrassK\n",PlayerInfo[playerid][pBrassK]);fwrite(hFile, var);
			format(var, 32, "%d pGolfK\n",PlayerInfo[playerid][pGolfK]);fwrite(hFile, var);
			format(var, 32, "%d pNightSK\n",PlayerInfo[playerid][pNightSK]);fwrite(hFile, var);
			format(var, 32, "%d pBatK\n",PlayerInfo[playerid][pBatK]);fwrite(hFile, var);
			format(var, 32, "%d pShovelK\n",PlayerInfo[playerid][pShovelK]);fwrite(hFile, var);
			format(var, 32, "%d pPoolCK\n",PlayerInfo[playerid][pPoolCK]);fwrite(hFile, var);
			format(var, 32, "%d pKatanaK\n",PlayerInfo[playerid][pKatanaK]);fwrite(hFile, var);
			format(var, 32, "%d pChainsawK\n",PlayerInfo[playerid][pChainsawK]);fwrite(hFile, var);
			format(var, 32, "%d pIntimK\n",PlayerInfo[playerid][pIntimK]);fwrite(hFile, var);
			format(var, 32, "%d pKnifeK\n",PlayerInfo[playerid][pKnifeK]);fwrite(hFile, var);
			format(var, 32, "%d pDildoD\n",PlayerInfo[playerid][pDildoD]);fwrite(hFile, var);
			format(var, 32, "%d pFlowerD\n",PlayerInfo[playerid][pFlowerD]);fwrite(hFile, var);
			format(var, 32, "%d pCaneD\n",PlayerInfo[playerid][pCaneD]);fwrite(hFile, var);
			format(var, 32, "%d pGrenadeD\n",PlayerInfo[playerid][pGrenadeD]);fwrite(hFile, var);
			format(var, 32, "%d pGasD\n",PlayerInfo[playerid][pGasD]);fwrite(hFile, var);
			format(var, 32, "%d pMolotovD\n",PlayerInfo[playerid][pMolotovD]);fwrite(hFile, var);
			format(var, 32, "%d pColtD\n",PlayerInfo[playerid][pColtD]);fwrite(hFile, var);
			format(var, 32, "%d pSPD\n",PlayerInfo[playerid][pSPD]);fwrite(hFile, var);
			format(var, 32, "%d pDeagleD\n",PlayerInfo[playerid][pDeagleD]);fwrite(hFile, var);
			format(var, 32, "%d pPShotD\n",PlayerInfo[playerid][pPShotD]);fwrite(hFile, var);
			format(var, 32, "%d pSawnD\n",PlayerInfo[playerid][pSawnD]);fwrite(hFile, var);
			format(var, 32, "%d pSpas12D\n",PlayerInfo[playerid][pSpas12D]);fwrite(hFile, var);
			format(var, 32, "%d pUziD\n",PlayerInfo[playerid][pUziD]);fwrite(hFile, var);
			format(var, 32, "%d pMP5D\n",PlayerInfo[playerid][pMP5D]);fwrite(hFile, var);
			format(var, 32, "%d pAK47D\n",PlayerInfo[playerid][pAK47D]);fwrite(hFile, var);
			format(var, 32, "%d pM4D\n",PlayerInfo[playerid][pM4D]);fwrite(hFile, var);
			format(var, 32, "%d pTec9D\n",PlayerInfo[playerid][pTec9D]);fwrite(hFile, var);
			format(var, 32, "%d pRifleD\n",PlayerInfo[playerid][pRifleD]);fwrite(hFile, var);
			format(var, 32, "%d pSRifleD\n",PlayerInfo[playerid][pSRifleD]);fwrite(hFile, var);
			format(var, 32, "%d pRPGD\n",PlayerInfo[playerid][pRPGD]);fwrite(hFile, var);
			format(var, 32, "%d pHSRLD\n",PlayerInfo[playerid][pHSRLD]);fwrite(hFile, var);
			format(var, 32, "%d pFlameD\n",PlayerInfo[playerid][pFlameD]);fwrite(hFile, var);
			format(var, 32, "%d pMiniD\n",PlayerInfo[playerid][pMiniD]);fwrite(hFile, var);
			format(var, 32, "%d pSachelD\n",PlayerInfo[playerid][pSatchelD]);fwrite(hFile, var);
			format(var, 32, "%d pFireED\n",PlayerInfo[playerid][pFireED]);fwrite(hFile, var);
			format(var, 32, "%d pSprayD\n",PlayerInfo[playerid][pSprayD]);fwrite(hFile, var);
			format(var, 32, "%d pFistD\n",PlayerInfo[playerid][pFistD]);fwrite(hFile, var);
			format(var, 32, "%d pBrassD\n",PlayerInfo[playerid][pBrassD]);fwrite(hFile, var);
			format(var, 32, "%d pGolfD\n",PlayerInfo[playerid][pGolfD]);fwrite(hFile, var);
			format(var, 32, "%d pNightSD\n",PlayerInfo[playerid][pNightSD]);fwrite(hFile, var);
			format(var, 32, "%d pBatD\n",PlayerInfo[playerid][pBatD]);fwrite(hFile, var);
			format(var, 32, "%d pShovelD\n",PlayerInfo[playerid][pShovelD]);fwrite(hFile, var);
			format(var, 32, "%d pPoolCD\n",PlayerInfo[playerid][pPoolCD]);fwrite(hFile, var);
			format(var, 32, "%d pKatanaD\n",PlayerInfo[playerid][pKatanaD]);fwrite(hFile, var);
			format(var, 32, "%d pChainsawD\n",PlayerInfo[playerid][pChainsawD]);fwrite(hFile, var);
			format(var, 32, "%d pIntimD\n",PlayerInfo[playerid][pIntimD]);fwrite(hFile, var);
			format(var, 32, "%d pKnifeD\n",PlayerInfo[playerid][pKnifeD]);fwrite(hFile, var);
			format(var, 32, "%d pLogs\n",PlayerInfo[playerid][pLogs]);fwrite(hFile, var);
			format(var, 32, "%d pTmpMission\n",PlayerInfo[playerid][pTmpMission]);fwrite(hFile, var);
			format(var, 32, "%d pTmpRank\n",PlayerInfo[playerid][pTmpRank]);fwrite(hFile, var);
			format(var, 32, "%d pTmpDMkill\n",PlayerInfo[playerid][pTmpDMkill]);fwrite(hFile, var);
			format(var, 32, "%d pGangRank\n",PlayerInfo[playerid][pGangRank]);fwrite(hFile, var);
			format(var, 32, "%d pWantedlevel\n",PlayerInfo[playerid][pWantedlevel]);fwrite(hFile, var);
			format(var, 32, "%d pLicense\n",PlayerInfo[playerid][pLicense]);fwrite(hFile, var);
			format(var, 32, "%d pMuted\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
			format(var, 32, "%d pPbiskey2\n",PlayerInfo[playerid][pPbiskey2]);fwrite(hFile, var);
			format(var, 32, "%d pPhousekey2\n",PlayerInfo[playerid][pPhousekey2]);fwrite(hFile, var);
			format(var, 32, "%d pCDL\n",PlayerInfo[playerid][pCDL]);fwrite(hFile, var);
			format(var, 32, "%d pMotoL\n",PlayerInfo[playerid][pMotoL]);fwrite(hFile, var);
			format(var, 32, "%d pDisconnects\n",PlayerInfo[playerid][pDisconnects]);fwrite(hFile, var);
			format(var, 32, "%d pMHeals\n",PlayerInfo[playerid][pMHeals]);fwrite(hFile, var);
			format(var, 32, "%d pHealed\n",PlayerInfo[playerid][pHealed]);fwrite(hFile, var);
			format(var, 32, "%d pFucked\n",PlayerInfo[playerid][pFucked]);fwrite(hFile, var);
			format(var, 32, "%d pGotfucked\n",PlayerInfo[playerid][pGotfucked]);fwrite(hFile, var);
			format(var, 32, "%d pBlown\n",PlayerInfo[playerid][pBlown]);fwrite(hFile, var);
			format(var, 32, "%d pGotblown\n",PlayerInfo[playerid][pGotblown]);fwrite(hFile, var);
			format(var, 32, "%d pWank\n",PlayerInfo[playerid][pWank]);fwrite(hFile, var);
			format(var, 32, "%d pGotwanked\n",PlayerInfo[playerid][pGotwanked]);fwrite(hFile, var);
			format(var, 32, "%d pAnal\n",PlayerInfo[playerid][pAnal]);fwrite(hFile, var);
			format(var, 32, "%d pGotanal\n",PlayerInfo[playerid][pGotanal]);fwrite(hFile, var);
			format(var, 32, "%d pRobs\n",PlayerInfo[playerid][pGotrobbed]);fwrite(hFile, var);
			format(var, 32, "%d pSaves\n",PlayerInfo[playerid][pSaves]);fwrite(hFile, var);
			format(var, 32, "%d aMutes\n",PlayerInfo[playerid][aMutes]);fwrite(hFile, var);
			format(var, 32, "%d pMutes\n",PlayerInfo[playerid][pMutes]);fwrite(hFile, var);
			format(var, 32, "%d aSlaps\n",PlayerInfo[playerid][aSlaps]);fwrite(hFile, var);
			format(var, 32, "%d pSlaps\n",PlayerInfo[playerid][pSlaps]);fwrite(hFile, var);
			format(var, 32, "%d aKicks\n",PlayerInfo[playerid][aKicks]);fwrite(hFile, var);
			format(var, 32, "%d pKicks\n",PlayerInfo[playerid][pKicks]);fwrite(hFile, var);
			format(var, 32, "%d aScrews\n",PlayerInfo[playerid][aScrews]);fwrite(hFile, var);
			format(var, 32, "%d pScrews\n",PlayerInfo[playerid][pScrews]);fwrite(hFile, var);
			format(var, 32, "%d pGun7\n",PlayerInfo[playerid][pGun7]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo7\n",PlayerInfo[playerid][pAmmo7]);fwrite(hFile, var);
			format(var, 32, "%d pGun8\n",PlayerInfo[playerid][pGun8]);fwrite(hFile, var);
			format(var, 32, "%d pAmmo8\n",PlayerInfo[playerid][pAmmo8]);fwrite(hFile, var);
			format(var, 32, "%d pLottoXP\n",PlayerInfo[playerid][pLottoXP]);fwrite(hFile,var);
			fclose(hFile);
		}
		new bkey = PlayerInfo[playerid][pPbiskey];
		new hkey = PlayerInfo[playerid][pPhousekey];
		new playername[32];
		if(bkey != 255)
		{
			if(bkey >= 100)
			{
				strmid(SBizzInfo[bkey-100][sbOwner], name, 0, strlen(name), 255);
			}
			else
			{
				strmid(BizzInfo[bkey][bOwner], name, 0, strlen(name), 255);
			}
		}
		GetPlayerName(playerid, playername, sizeof(playername));
		if (hkey != 255 && strcmp(playername, HouseInfo[hkey][hOwner], true) == 0)
		{
			strmid(HouseInfo[hkey][hOwner], name, 0, strlen(name), 255);
		}
		OnPropUpdate();
	}
	else
	{
		SendClientMessage(playerid, COLOR_YELLOW, "You do not have an account, type /register <password>");
	}
	if (gdebug){printf("DEBUG OnPlayerUpdate(%d)End", playerid);}
	return 1;
}

OnPropUpdate()
{
	if (gdebug >= 1){printf("DEBUG OnPropUpdate()");}
	new idx;
	new File: file2;
	while (idx < sizeof(HouseInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		HouseInfo[idx][hEntrancex],
		HouseInfo[idx][hEntrancey],
		HouseInfo[idx][hEntrancez],
		HouseInfo[idx][hExitx],
		HouseInfo[idx][hExity],
		HouseInfo[idx][hExitz],
		HouseInfo[idx][hHealthx],
		HouseInfo[idx][hHealthy],
		HouseInfo[idx][hHealthz],
		HouseInfo[idx][hArmourx],
		HouseInfo[idx][hArmoury],
		HouseInfo[idx][hArmourz],
		HouseInfo[idx][hOwner],
		HouseInfo[idx][hDiscription],
		HouseInfo[idx][hValue],
		HouseInfo[idx][hHel],
		HouseInfo[idx][hArm],
		HouseInfo[idx][hInt],
		HouseInfo[idx][hLock],
		HouseInfo[idx][hOwned],
		HouseInfo[idx][hRooms],
		HouseInfo[idx][hRent],
		HouseInfo[idx][hRentabil],
		HouseInfo[idx][hTakings],
		HouseInfo[idx][hVec],
		HouseInfo[idx][hVcol1],
		HouseInfo[idx][hVcol2],
		HouseInfo[idx][hDate],
		HouseInfo[idx][hStartLevel],
		HouseInfo[idx][hLevel],
		HouseInfo[idx][hRC]);
		//HouseInfo[idx][hPlate]);
		if(idx == 0)
		{
			file2 = fopen("property.cfg", io_write);
		}
		else
		{
			file2 = fopen("property.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(BizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%f,%f,%f,%d,%d,%d,%d,%d,%d,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		BizzInfo[idx][bEntrancex],
		BizzInfo[idx][bEntrancey],
		BizzInfo[idx][bEntrancez],
		BizzInfo[idx][bExitx],
		BizzInfo[idx][bExity],
		BizzInfo[idx][bExitz],
		BizzInfo[idx][bHealthx],
		BizzInfo[idx][bHealthy],
		BizzInfo[idx][bHealthz],
		BizzInfo[idx][bArmourx],
		BizzInfo[idx][bArmoury],
		BizzInfo[idx][bArmourz],
		BizzInfo[idx][bOwner],
		BizzInfo[idx][bDiscription],
		BizzInfo[idx][bValue],
		BizzInfo[idx][bHel],
		BizzInfo[idx][bArm],
		BizzInfo[idx][bInt],
		BizzInfo[idx][bLock],
		BizzInfo[idx][bOwned],
		BizzInfo[idx][bEntcost],
		BizzInfo[idx][bTakings],
		BizzInfo[idx][bDate],
		BizzInfo[idx][bLevel],
		BizzInfo[idx][bProd],
		BizzInfo[idx][bProdCap],
		BizzInfo[idx][bComp],
		BizzInfo[idx][bCompCap],
		BizzInfo[idx][bProdCost],
		BizzInfo[idx][bPayComp],
		BizzInfo[idx][bPriceMod]);
		if(idx == 0)
		{
			file2 = fopen("bizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("bizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	idx = 0;
	while (idx < sizeof(SBizzInfo))
	{
		new coordsstring[256];
		format(coordsstring, sizeof(coordsstring), "%f,%f,%f,%s,%s,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d,%d\n",
		SBizzInfo[idx][sbEntrancex],
		SBizzInfo[idx][sbEntrancey],
		SBizzInfo[idx][sbEntrancez],
		SBizzInfo[idx][sbOwner],
		SBizzInfo[idx][sbDiscription],
		SBizzInfo[idx][sbValue],
		SBizzInfo[idx][sbHel],
		SBizzInfo[idx][sbArm],
		SBizzInfo[idx][sbInt],
		SBizzInfo[idx][sbLock],
		SBizzInfo[idx][sbOwned],
		SBizzInfo[idx][sbEntcost],
		SBizzInfo[idx][sbTakings],
		SBizzInfo[idx][sbDate],
		SBizzInfo[idx][sbLevel],
		SBizzInfo[idx][sbProd],
		SBizzInfo[idx][sbProdCap],
		SBizzInfo[idx][sbComp],
		SBizzInfo[idx][sbCompCap],
		SBizzInfo[idx][sbProdCost],
		SBizzInfo[idx][sbPayComp]);
		if(idx == 0)
		{
			file2 = fopen("sbizz.cfg", io_write);
		}
		else
		{
			file2 = fopen("sbizz.cfg", io_append);
		}
		fwrite(file2, coordsstring);
		idx++;
		fclose(file2);
	}
	return 1;
}

public BroadCast(color,const string[])
{
	printf("%s", string);
	SendClientMessageToAll(color, string);
	return 1;
}

ABroadCast(color,const string[],level)
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			if ((IsPlayerAdmin(i)) || PlayerInfo[i][pAdmin] >= level)
			{
				SendClientMessage(i, color, string);
				printf("%s", string);
			}
		}
	}
	return 1;
}

public OOCOff(color,const string[])
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && !gOoc[i])
		{
			SendClientMessage(i, color, string);
		}
	}
}

public PlaySoundAll(playerid, soundid, Float:psx ,Float:psy ,Float:psz)
{
	if (gdebug >= 1){printf("DEBUG PlaySoundAll(%d)", playerid);}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			PlayerPlaySound(i, soundid, psx, psy, psz);
		}
	}
}

public SendRadioMessage(Radio, color, string[])
{
	if (gdebug >= 1){printf("DEBUG SendRadioMessage(%d)", Radio);}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && gRadio[i] == Radio)
		{
			SendClientMessage(i, color, string);
		}
	}
}

public SendTeamMessage(team, color, string[])
{
	if (gdebug >= 1){printf("DEBUG SendTeamMessage(%d)", team);}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && gTeam[i] == team)
		{
			SendClientMessage(i, color, string);
		}
	}
}

SendTeamBeepMessage(team, color, string[])
{
	if (gdebug >= 1){printf("DEBUG SendTeamMessage(%d)", team);}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && gTeam[i] == team)
		{
			SendClientMessage(i, color, string);
			RingTone[i] = 20;
		}
	}
}

SendEnemyMessage(color, string[])
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && gTeam[i] >= 3)
		{
			SendClientMessage(i, color, string);
		}
	}
}

public SendReportMessage(color, string[])
{
if (gdebug >= 1){printf("DEBUG SendReportMessage()");}
for(new i = 0; i <= MAX_PLAYERS; i++)
	{
	if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] > 1 || FugitiveCore[i] == 1)
		{
			SendClientMessage(i, color, string);
		}
	}
}


public SendAdminMessage(color, string[])
{
	if (gdebug >= 1){printf("DEBUG SendAdminMessage()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] > 101 || FugitiveCore[i] == 1)
		{
			SendClientMessage(i, color, string);
		}
	}
}



public AddCar(carcoords)
{
	new randcol = random(126);
	new randcol2 = 1;
	if (rccounter == 14)
	{
		rccounter = 0;
	}
	CreateVehicle(carselect[rccounter], CarSpawns[carcoords][pos_x], CarSpawns[carcoords][pos_y], CarSpawns[carcoords][pos_z], CarSpawns[carcoords][z_angle], randcol, randcol2, -1);
	//AddStaticVehicle(carselect[rccounter], CarSpawns[carindex][pos_x], CarSpawns[carindex][pos_y], CarSpawns[carindex][pos_z], CarSpawns[carindex][z_angle],randcol,randcol2); // nm
	rccounter++;
	return 1;
}

public PlayerPlayMusic(playerid)
{
	if (gdebug >= 1){printf("DEBUG PlayerPlayMusic(%d)",playerid);}
	SetTimer("StopMusic", 6000, 0);
	PlayerPlaySound(playerid, 1187, 0.0, 0.0, 0.0);
}

public StopMusic()
{
	if (gdebug >= 1){printf("DEBUG StopMusic()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
		}
	}
}

public UnStun()
{
	if (gdebug >= 1){printf("DEBUG StopMusic()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && Stunned[i] > 0)
		{
			SendClientMessage(i, COLOR_GRAD1, "* You are no longer disorientated. *");
   			TogglePlayerControllable(i, 1);
			Stunned[i] = 0;
		}
	}
}

PlayerFixRadio(playerid)
{
	if (gdebug >= 1){printf("DEBUG PlayerPlayMusic(%d)",playerid);}
	SetTimer("PlayerFixRadio2", 50, 0);
	PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	Fixr[playerid] = 1;
}

public PlayerFixRadio2()
{
	if (gdebug >= 1){printf("DEBUG StopMusic()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			if(Fixr[i])
			{
				PlayerPlaySound(i, 1069, 0.0, 0.0, 0.0);
				Fixr[i] = 0;
			}
		}
	}
}

public PlayJailSound(sound , stopsound, duration, Float:jailx, Float:jaily, Float:jailz)
{
	if (gdebug >= 1){printf("DEBUG PlayJailSound()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			PlayerPlaySound(i, sound, jailx, jaily, jailz);
			//printf("startjail %d",i);
			stopsoundt = stopsound;
			jailxt = jailx;
			jailyt = jaily;
			jailzt = jailz;
		}
	}
	SetTimer("StopJail", duration, 0);
}

public StopJail()
{
	if (gdebug >= 1){printf("DEBUG StopJail()");}
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			PlayerPlaySound(i, stopsoundt, jailxt, jailyt, jailzt);
			//printf("stopjail %d",i);
		}
	}
}

//---------------------------<[ OnPlayerCommandText ]>--------------------------------------------------------

public OnPlayerCommandText(playerid, cmdtext[])
{

	if (gdebug >= 1){printf("DEBUG OnPlayerCommandText(%d)",playerid);}
	//CmdLog(cmdtext);
	new string[256];
	new playermoney;
	new sendername[MAX_PLAYER_NAME];
	new giveplayer[MAX_PLAYER_NAME];
	new playername[MAX_PLAYER_NAME];
	new cmd[256];
	new tmp[256];
	new giveplayerid, moneys, idx;
	cmd = strtok(cmdtext, idx);
	new specplayerid, specvehicleid;
	if(strcmp(cmd, "/dn", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz-2);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not An Admin");
		}
		return 1;
	}
	if(strcmp(cmd, "/up", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly, slz+2);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not An Admin");
		}
		return 1;
	}
	if (strcmp(cmd, "/fly", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			new Float:px, Float:py, Float:pz, Float:pa;
			GetPlayerFacingAngle(playerid,pa);
			if(pa >= 0.0 && pa <= 22.5) //n1
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px, py+30, pz+5);
			}
			if(pa >= 332.5 && pa < 0.0) //n2
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px, py+30, pz+5);
			}
			if(pa >= 22.5 && pa <= 67.5) //nw
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px-15, py+15, pz+5);
			}
			if(pa >= 67.5 && pa <= 112.5) //w
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px-30, py, pz+5);
			}
			if(pa >= 112.5 && pa <= 157.5) //sw
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px-15, py-15, pz+5);
			}
			if(pa >= 157.5 && pa <= 202.5) //s
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px, py-30, pz+5);
			}
			if(pa >= 202.5 && pa <= 247.5)//se
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px+15, py-15, pz+5);
			}
			if(pa >= 247.5 && pa <= 292.5)//e
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px+30, py, pz+5);
			}
			if(pa >= 292.5 && pa <= 332.5)//e
			{
				GetPlayerPos(playerid, px, py, pz);
				SetPlayerPos(playerid, px+15, py+15, pz+5);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not An Admin");
		}
		return 1;
	}
	if(strcmp(cmd, "/lt", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly+2, slz);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not An Admin");
		}
		return 1;
	}
//==================Rcon Snoop======================
	new pname[256], cmdstring[256];
	GetPlayerName(playerid, pname, sizeof(pname));
	format(cmdstring, sizeof(cmdstring), "*** %s [%d]: %s",pname,playerid, cmdtext);
	for(new j = 0; j < MAX_PLAYERS; j++){if ((IsPlayerAdmin(j)&&gSnoop[j]==1)){SendClientMessage(j, 0xFF9900, cmdstring);}}
	
	if(strcmp(cmd,"/snoop",true)==0&&IsPlayerAdmin(playerid)){
	if(gSnoop[playerid]==0){gSnoop[playerid]=1;SendClientMessage(playerid,COLOR_YELLOW,"Snooping activated.");return 1;}
	if(gSnoop[playerid]==1){gSnoop[playerid]=0;SendClientMessage(playerid,COLOR_YELLOW,"Snooping deactivated.");return 1;}
	}
//==================================================
	if(strfind(cmdtext, "%", true,0)!=-1) //Pixels^' /me fix, modified for correct syntax, and work for the entirety of the command list by JohnSanders
	{//Good job Pixels^!
	    new str[256],player[24];
	    GetPlayerName(playerid,player,24);
		SendClientMessage(playerid,COLOR_GREY,"Trying to exploit a bug is against the rules.");
		format(str,sizeof(str),"Anti-Exploit: %s tried to use the /me exploit.",player);
		for(new i=0; i<100; i++){
			if(IsPlayerConnected(i) && (IsPlayerAdmin(i) || PlayerInfo[i][pAdmin] >= 103 || FugitiveCore[playerid] == 1)){
				SendClientMessage(i,COLOR_YELLOW,str);
			}
		}
		return 1;
	}
	//else{SendClientMessage(playerid,0xFFFFFFFF,"Else of percent s");return 1;}
	if(strcmp(cmd,"/chkpercent",true)==0){
	new thatname[24],passed;
	for(new i=0;i<MAX_PLAYERS;i++){
		GetPlayerName(i,thatname,sizeof(thatname));
		if(strfind(thatname,"%",true,0)!=-1){
		    passed=1;
		}
	}
	if(passed==1){SendClientMessage(playerid,COLOR_YELLOW,"Percents detected");}
	else{SendClientMessage(playerid,COLOR_YELLOW,"None detected");}
	return 1;
}
//-------------------------------[Pay]--------------------------------------------------------------------------
	if(strcmp(cmd, "/pay", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /pay [playerid/PartOfName] [amount]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if(PlayerInfo[giveplayerid][pLocal] == 106)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Command disallowed in this location");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /pay [playerid/PartOfName] [amount]");
			return 1;
		}
		moneys = strval(tmp);
		if(moneys > 10000 && PlayerInfo[playerid][pLevel] < 3)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You must be level 3 to pay over 1000");
			return 1;
		}
		//if (gdebug){printf("DEBUG givecash_command: %d %d",giveplayerid,moneys);}
		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				playermoney = GetPlayerMoney(playerid);
				if (moneys > 0 && playermoney >= moneys)
				{
					GiveMoney(playerid, (0 - moneys));
					GiveMoney(giveplayerid, moneys);
					format(string, sizeof(string), "   You have sent %s(player: %d), $%d.", giveplayer,giveplayerid, moneys);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "   You have recieved $%d from %s(player: %d).", moneys, sendername, playerid);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "%s has paid $%d to %s", sendername, moneys, giveplayer);
					PayLog(string);
					if(moneys >= 1000000)
					{
						ABroadCast(COLOR_YELLOW,string,1);
					}
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s takes out some cash, and hands it to %s.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You're too far away.");
			}
		}
		else
		{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd,"/alarm",true)==0)
	{
		if (gvhichelealarm[playerid] == 0)
		{
		    if(PlayerInfo[playerid][vehicle] == 0)
			{
		        SendClientMessage(playerid,COLOR_GREY," You must have been in a car to lock it.");
				return 1;
			}
			if(GetPlayerState(playerid) == 2)
			{
		        SendClientMessage(playerid,COLOR_GREY," You must be outside of the car to lock it.");
				return 1;
			}
			new Vehicle = PlayerInfo[playerid][vehicle];
			Alarm[Vehicle] = 1;
			SendClientMessage(playerid,COLOR_GREEN,"* Your vehicle is now locked and the alarm system is on.");
			PlayerPlaySound(playerid,1147,0,0,0);
			gvhichelealarm[playerid]=1;
			return 1;
		}
		if (gvhichelealarm[playerid] == 1)
		{
		    if(PlayerInfo[playerid][vehicle] == 0)
			{
		        SendClientMessage(playerid,COLOR_GREY," You must have been in a car to lock it.");
				return 1;
			}
			new Vehicle = PlayerInfo[playerid][vehicle];
			Alarm[Vehicle] = 0;
			SendClientMessage(playerid,COLOR_GREEN,"* Your vehicle is now unlocked and the alarm system is off.");
			PlayerPlaySound(playerid,1147,0,0,0);
			gvhichelealarm[playerid]=0;
			return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/charity", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /charity [amount]");
			return 1;
		}
		if(PlayerInfo[giveplayerid][pLocal] == 106)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Command disallowed in this location");
			return 1;
		}
		moneys = strval(tmp);
		if(moneys < 0)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "That is not enough.");
			return 1;
		}
		GiveMoney(playerid, (-moneys));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s Thank you for you donation of, $%d.",sendername, moneys);
		printf("%s", string);
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		SendClientMessage(playerid, COLOR_GRAD1, string);
		PayLog(string);
		return 1;
	}
//----------------------[paytaximan]-----------------------------------------------------
	if(strcmp(cmd, "/payfare", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /payfare [playerid/PartOfName] [amount]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if(PlayerInfo[giveplayerid][pLocal] == 106)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Command not allowed in this location");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /pay [playerid/PartOfName] [amount]");
			return 1;
		}
		moneys = strval(tmp);
		if(moneys > 10000 && PlayerInfo[playerid][pLevel] < 3)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You must be level 3 to pay over 1000");
			return 1;
		}
		//if (gdebug){printf("DEBUG givecash_command: %d %d",giveplayerid,moneys);}
		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				playermoney = GetPlayerMoney(playerid);
				if (moneys > 0 && playermoney >= moneys)
				{
					GiveMoney(playerid, (0 - moneys));
					GiveMoney(giveplayerid, moneys);
					format(string, sizeof(string), "You have paid your Transport fare to %s(player: %d), $%d.", giveplayer,giveplayerid, moneys);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "You have recieved $%d from %s for Transportation(player: %d).", moneys, sendername, playerid);
					SendClientMessage(giveplayerid, COLOR_GRAD1, string);
					format(string, sizeof(string), "%s has paid $%d to %s", sendername, moneys, giveplayer);
					PayLog(string);
					if(moneys >= 1000000)
					{
						ABroadCast(COLOR_YELLOW,string,1);
					}
					PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s pays Transport fare to %s.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Your are too far from the driver/pass.");
			}
		}
		else
		{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
//-------------------------------[Register]--------------------------------------------------------------------------
	if ((strcmp(cmd, "/register", true)==0||strcmp(cmd, "/regnick", true)==0) && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /register [password]");
			return 1;
		}
		if (gPlayerAccount[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   That name is registered");
			return 1;
		}
		gPlayerAccount[playerid] = 1;
		/*
			SetPlayerInterior(playerid,2);
			SetPlayerPos(playerid,1216.699000,-6.416779,1001.328000);
			SetPlayerFacingAngle(playerid, 90.0);
			SetPlayerCameraPos(playerid,1216.699000-1.5,-6.416779,1001.328000+0.7);
			SetPlayerCameraLookAt(playerid,1216.699000,-6.416779,1001.328000+0.7);
			GameTextForPlayer(playerid, "~w~Now Select a character and type /login <your password>", 10000, 3);*/
		strmid(PlayerInfo[playerid][pPassword], tmp, 0, strlen(cmdtext), 255);
		Encript(PlayerInfo[playerid][pPassword]);
		GetPlayerName(playerid, playername, sizeof(playername));
		format(string, sizeof(string), "%s.cer", playername);
		PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);
		new File: file = fopen(string, io_read);
		if (file)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   That nick is registered");
			fclose(file);
			return 1;
		}
	//	new Float:px, Float:py, Float:pz;//
	//	new Float:health;//
		//new randphone = 1000 + random(8999);//minimum 1000  max 9999 //giving one at the start
		//PlayerInfo[playerid][pPnumber] = randphone;
		printf("%s has created an account.", playername);
		new File:hFile;
		hFile = fopen(string, io_append);
		new var[32];//
		format(var, 32, "%s\n", PlayerInfo[playerid][pPassword]);fwrite(hFile, var);//[DIAMOND8]
		format(var, 32, "%d pCash\n", PlayerInfo[playerid][pCash]);fwrite(hFile, var);
		format(var, 32, "%d pAccount\n", PlayerInfo[playerid][pAccount]);fwrite(hFile, var);
		format(var, 32, "%d pAdmin\n", PlayerInfo[playerid][pAdmin]);fwrite(hFile, var);
		format(var, 32, "%d pRank\n", PlayerInfo[playerid][pRank]);fwrite(hFile, var);
		format(var, 32, "%d pJRank\n",PlayerInfo[playerid][pJRank]);fwrite(hFile, var);
		format(var, 32, "%d pJob\n", PlayerInfo[playerid][pJob]);fwrite(hFile, var);
		format(var, 32, "%d pLevel\n", PlayerInfo[playerid][pLevel]);fwrite(hFile, var);
		format(var, 32, "%d pExp\n", PlayerInfo[playerid][pExp]);fwrite(hFile, var);
		format(var, 32, "%d gPupgrade\n", PlayerInfo[playerid][gPupgrade]);fwrite(hFile, var);
		format(var, 32, "%d pKills\n", PlayerInfo[playerid][pKills]);fwrite(hFile, var);
		format(var, 32, "%d pCB\n", PlayerInfo[playerid][pCB]);fwrite(hFile, var);
		format(var, 32, "%d pHW\n", PlayerInfo[playerid][pHW]);fwrite(hFile, var);
		format(var, 32, "%d pSR\n", PlayerInfo[playerid][pSR]);fwrite(hFile, var);
		format(var, 32, "%d pSP\n", PlayerInfo[playerid][pSP]);fwrite(hFile, var);
		format(var, 32, "%d pBD\n", PlayerInfo[playerid][pBD]);fwrite(hFile, var);
		format(var, 32, "%d pDB\n", PlayerInfo[playerid][pDB]);fwrite(hFile, var);
		format(var, 32, "%d pFUG\n", PlayerInfo[playerid][pFUG]);fwrite(hFile, var);
		format(var, 32, "%d pGun1\n", PlayerInfo[playerid][pGun1]);fwrite(hFile, var);
		format(var, 32, "%d pGun2\n", PlayerInfo[playerid][pGun2]);fwrite(hFile, var);
		format(var, 32, "%d pGun3\n", PlayerInfo[playerid][pGun3]);fwrite(hFile, var);
		format(var, 32, "%d pGun4\n", PlayerInfo[playerid][pGun4]);fwrite(hFile, var);
		format(var, 32, "%d pGun5\n", PlayerInfo[playerid][pGun5]);fwrite(hFile, var);
		format(var, 32, "%d pGun6\n", PlayerInfo[playerid][pGun6]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo1\n", PlayerInfo[playerid][pAmmo1]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo2\n", PlayerInfo[playerid][pAmmo2]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo3\n", PlayerInfo[playerid][pAmmo3]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo4\n", PlayerInfo[playerid][pAmmo4]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo5\n", PlayerInfo[playerid][pAmmo5]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo6\n", PlayerInfo[playerid][pAmmo6]);fwrite(hFile, var);
		format(var, 32, "%f pSHealth\n", PlayerInfo[playerid][pSHealth]);fwrite(hFile, var);
		format(var, 32, "%f pHealth\n", PlayerInfo[playerid][pHealth]);fwrite(hFile, var);
		format(var, 32, "%f pPos_x\n", PlayerInfo[playerid][pPos_x]);fwrite(hFile, var);
		format(var, 32, "%f pPos_y\n", PlayerInfo[playerid][pPos_y]);fwrite(hFile, var);
		format(var, 32, "%f pPos_z\n", PlayerInfo[playerid][pPos_z]);fwrite(hFile, var);
		if(accountplay)
		{
			PlayerInfo[playerid][pInt] = 0;
		}
		format(var, 32, "%d pInt\n", PlayerInfo[playerid][pInt]);fwrite(hFile, var);
		format(var, 32, "%d pLocal\n", PlayerInfo[playerid][pLocal]);fwrite(hFile, var);
		format(var, 32, "%d pTeam\n", PlayerInfo[playerid][pTeam]);fwrite(hFile, var);
		format(var, 32, "%d pModel\n", PlayerInfo[playerid][pModel]);fwrite(hFile, var);
        format(var, 32, "%d pCell\n",PlayerInfo[playerid][pCell]);fwrite(hFile, var);
		format(var, 32, "%d pPnumber\n", PlayerInfo[playerid][pPnumber]);fwrite(hFile, var);
		format(var, 32, "%d pPhousekey\n", PlayerInfo[playerid][pPhousekey]);fwrite(hFile, var);
		format(var, 32, "%d pPbiskey\n", PlayerInfo[playerid][pPbiskey]);fwrite(hFile, var);
       	format(var, 32, "%d pDuty\n",PlayerInfo[playerid][pDuty]);fwrite(hFile, var);
		format(var, 32, "%d pLicA\n",PlayerInfo[playerid][pLicA]);fwrite(hFile, var);
		format(var, 32, "%d pLicB\n",PlayerInfo[playerid][pLicB]);fwrite(hFile, var);
		format(var, 32, "%d pLicJD\n",PlayerInfo[playerid][pLicJD]);fwrite(hFile, var);
		format(var, 32, "%d pLicPL\n",PlayerInfo[playerid][pLicPL]);fwrite(hFile, var);
		format(var, 32, "%d pLicFE\n",PlayerInfo[playerid][pLicFE]);fwrite(hFile, var);
		format(var, 32, "%d pXpir\n",PlayerInfo[playerid][pXpir]);fwrite(hFile, var);
		format(var, 32, "%d pFood\n",PlayerInfo[playerid][pFood]);fwrite(hFile, var);
		format(var, 32, "%d pWarnL\n",PlayerInfo[playerid][pWarnL]);fwrite(hFile, var);
		format(var, 32, "%d pTick\n",PlayerInfo[playerid][pTick]);fwrite(hFile, var);
		format(var, 32, "%d pWantL\n",PlayerInfo[playerid][pWantL]);fwrite(hFile, var);
		format(var, 32, "%d pFish\n",PlayerInfo[playerid][pFish]);fwrite(hFile, var);
		format(var, 32, "%d pProb\n",PlayerInfo[playerid][pProb]);fwrite(hFile, var);
		format(var, 32, "%d pWeed\n",PlayerInfo[playerid][pWeed]);fwrite(hFile, var);
		format(var, 32, "%d pCoke\n",PlayerInfo[playerid][pCoke]);fwrite(hFile, var);
		format(var, 32, "%d pAEdit\n",PlayerInfo[playerid][pAEdit]);fwrite(hFile, var);
		format(var, 32, "%d pJail\n",PlayerInfo[playerid][pJail]);fwrite(hFile, var);
		format(var, 32, "%d pDisez\n",PlayerInfo[playerid][pDisez]);fwrite(hFile, var);
		format(var, 32, "%d pJPnts\n",PlayerInfo[playerid][pJPnts]);fwrite(hFile, var);
		format(var, 32, "%d pSuspend\n",PlayerInfo[playerid][pSuspend]);fwrite(hFile, var);
		format(var, 32, "%d pBanTime\n",PlayerInfo[playerid][pBanTime]);fwrite(hFile, var);
		format(var, 32, "%d pDebitc\n",PlayerInfo[playerid][pDebitc]);fwrite(hFile, var);
		format(var, 32, "%d pMisc\n",PlayerInfo[playerid][pMisc]);fwrite(hFile, var);
		format(var, 32, "%d pAju\n",PlayerInfo[playerid][pAju]);fwrite(hFile, var);
		format(var, 32, "%.1f pArmour\n",PlayerInfo[playerid][pSArmour]);fwrite(hFile, var);
		format(var, 32, "%d pKillz\n", PlayerInfo[playerid][pKillz]);fwrite(hFile, var);
		format(var, 32, "%d pCBz\n", PlayerInfo[playerid][pCBz]);fwrite(hFile, var);
		format(var, 32, "%d pHWz\n", PlayerInfo[playerid][pHWz]);fwrite(hFile, var);
		format(var, 32, "%d pSRz\n", PlayerInfo[playerid][pSRz]);fwrite(hFile, var);
		format(var, 32, "%d pWAz\n", PlayerInfo[playerid][pWAz]);fwrite(hFile, var);
		format(var, 32, "%d pPENz\n", PlayerInfo[playerid][pPENz]);fwrite(hFile, var);
		format(var, 32, "%d pDeathz\n", PlayerInfo[playerid][pDeathz]);fwrite(hFile, var);
		format(var, 32, "%d pDrowned\n", PlayerInfo[playerid][pDrowned]);fwrite(hFile, var);
		format(var, 32, "%d pFell\n", PlayerInfo[playerid][pFell]);fwrite(hFile, var);
		format(var, 32, "%d pBusted\n", PlayerInfo[playerid][pBusted]);fwrite(hFile, var);
		format(var, 32, "%d pCrimkill\n", PlayerInfo[playerid][pCrimkill]);fwrite(hFile, var);
		format(var, 32, "%d pGangkill\n", PlayerInfo[playerid][pGangkill]);fwrite(hFile, var);
		format(var, 32, "%d pCopkill\n", PlayerInfo[playerid][pCopkill]);fwrite(hFile, var);
		format(var, 32, "%d pDMKill\n", PlayerInfo[playerid][pDMKill]);fwrite(hFile, var);
		format(var, 32, "%d pDMDeath\n", PlayerInfo[playerid][pDMDeath]);fwrite(hFile, var);
		format(var, 32, "%d pDildoK\n",PlayerInfo[playerid][pDildoK]);fwrite(hFile, var);
		format(var, 32, "%d pFlowerK\n",PlayerInfo[playerid][pFlowerK]);fwrite(hFile, var);
		format(var, 32, "%d pCaneK\n",PlayerInfo[playerid][pCaneK]);fwrite(hFile, var);
		format(var, 32, "%d pGrenadeK\n",PlayerInfo[playerid][pGrenadeK]);fwrite(hFile, var);
		format(var, 32, "%d pGasK\n",PlayerInfo[playerid][pGasK]);fwrite(hFile, var);
		format(var, 32, "%d pMolotovK\n",PlayerInfo[playerid][pMolotovK]);fwrite(hFile, var);
		format(var, 32, "%d pColtK\n",PlayerInfo[playerid][pColtK]);fwrite(hFile, var);
		format(var, 32, "%d pSPK\n",PlayerInfo[playerid][pSPK]);fwrite(hFile, var);
		format(var, 32, "%d pDeagleK\n",PlayerInfo[playerid][pDeagleK]);fwrite(hFile, var);
		format(var, 32, "%d pPShotK\n",PlayerInfo[playerid][pPShotK]);fwrite(hFile, var);
		format(var, 32, "%d pSawnK\n",PlayerInfo[playerid][pSawnK]);fwrite(hFile, var);
		format(var, 32, "%d pSpas12K\n",PlayerInfo[playerid][pSpas12K]);fwrite(hFile, var);
		format(var, 32, "%d pUziK\n",PlayerInfo[playerid][pUziK]);fwrite(hFile, var);
		format(var, 32, "%d pMP5K\n",PlayerInfo[playerid][pMP5K]);fwrite(hFile, var);
		format(var, 32, "%d pAK47K\n",PlayerInfo[playerid][pAK47K]);fwrite(hFile, var);
		format(var, 32, "%d pM4K\n",PlayerInfo[playerid][pM4K]);fwrite(hFile, var);
		format(var, 32, "%d pTec9K\n",PlayerInfo[playerid][pTec9K]);fwrite(hFile, var);
		format(var, 32, "%d pRifleK\n",PlayerInfo[playerid][pRifleK]);fwrite(hFile, var);
		format(var, 32, "%d pSRifleK\n",PlayerInfo[playerid][pSRifleK]);fwrite(hFile, var);
		format(var, 32, "%d pRPGK\n",PlayerInfo[playerid][pRPGK]);fwrite(hFile, var);
		format(var, 32, "%d pHSRLK\n",PlayerInfo[playerid][pHSRLK]);fwrite(hFile, var);
		format(var, 32, "%d pFlameK\n",PlayerInfo[playerid][pFlameK]);fwrite(hFile, var);
		format(var, 32, "%d pMiniK\n",PlayerInfo[playerid][pMiniK]);fwrite(hFile, var);
		format(var, 32, "%d pSachelK\n",PlayerInfo[playerid][pSatchelK]);fwrite(hFile, var);
		format(var, 32, "%d pFireEK\n",PlayerInfo[playerid][pFireEK]);fwrite(hFile, var);
		format(var, 32, "%d pSprayK\n",PlayerInfo[playerid][pSprayK]);fwrite(hFile, var);
		format(var, 32, "%d pFistK\n",PlayerInfo[playerid][pFistK]);fwrite(hFile, var);
		format(var, 32, "%d pBrassK\n",PlayerInfo[playerid][pBrassK]);fwrite(hFile, var);
		format(var, 32, "%d pGolfK\n",PlayerInfo[playerid][pGolfK]);fwrite(hFile, var);
		format(var, 32, "%d pNightSK\n",PlayerInfo[playerid][pNightSK]);fwrite(hFile, var);
		format(var, 32, "%d pBatK\n",PlayerInfo[playerid][pBatK]);fwrite(hFile, var);
		format(var, 32, "%d pShovelK\n",PlayerInfo[playerid][pShovelK]);fwrite(hFile, var);
		format(var, 32, "%d pPoolCK\n",PlayerInfo[playerid][pPoolCK]);fwrite(hFile, var);
		format(var, 32, "%d pKatanaK\n",PlayerInfo[playerid][pKatanaK]);fwrite(hFile, var);
		format(var, 32, "%d pChainsawK\n",PlayerInfo[playerid][pChainsawK]);fwrite(hFile, var);
		format(var, 32, "%d pIntimK\n",PlayerInfo[playerid][pIntimK]);fwrite(hFile, var);
		format(var, 32, "%d pKnifeK\n",PlayerInfo[playerid][pKnifeK]);fwrite(hFile, var);
		format(var, 32, "%d pDildoD\n",PlayerInfo[playerid][pDildoD]);fwrite(hFile, var);
		format(var, 32, "%d pFlowerD\n",PlayerInfo[playerid][pFlowerD]);fwrite(hFile, var);
		format(var, 32, "%d pCaneD\n",PlayerInfo[playerid][pCaneD]);fwrite(hFile, var);
		format(var, 32, "%d pGrenadeD\n",PlayerInfo[playerid][pGrenadeD]);fwrite(hFile, var);
		format(var, 32, "%d pGasD\n",PlayerInfo[playerid][pGasD]);fwrite(hFile, var);
		format(var, 32, "%d pMolotovD\n",PlayerInfo[playerid][pMolotovD]);fwrite(hFile, var);
		format(var, 32, "%d pColtD\n",PlayerInfo[playerid][pColtD]);fwrite(hFile, var);
		format(var, 32, "%d pSPD\n",PlayerInfo[playerid][pSPD]);fwrite(hFile, var);
		format(var, 32, "%d pDeagleD\n",PlayerInfo[playerid][pDeagleD]);fwrite(hFile, var);
		format(var, 32, "%d pPShotD\n",PlayerInfo[playerid][pPShotD]);fwrite(hFile, var);
		format(var, 32, "%d pSawnD\n",PlayerInfo[playerid][pSawnD]);fwrite(hFile, var);
		format(var, 32, "%d pSpas12D\n",PlayerInfo[playerid][pSpas12D]);fwrite(hFile, var);
		format(var, 32, "%d pUziD\n",PlayerInfo[playerid][pUziD]);fwrite(hFile, var);
		format(var, 32, "%d pMP5D\n",PlayerInfo[playerid][pMP5D]);fwrite(hFile, var);
		format(var, 32, "%d pAK47D\n",PlayerInfo[playerid][pAK47D]);fwrite(hFile, var);
		format(var, 32, "%d pM4D\n",PlayerInfo[playerid][pM4D]);fwrite(hFile, var);
		format(var, 32, "%d pTec9D\n",PlayerInfo[playerid][pTec9D]);fwrite(hFile, var);
		format(var, 32, "%d pRifleD\n",PlayerInfo[playerid][pRifleD]);fwrite(hFile, var);
		format(var, 32, "%d pSRifleD\n",PlayerInfo[playerid][pSRifleD]);fwrite(hFile, var);
		format(var, 32, "%d pRPGD\n",PlayerInfo[playerid][pRPGD]);fwrite(hFile, var);
		format(var, 32, "%d pHSRLD\n",PlayerInfo[playerid][pHSRLD]);fwrite(hFile, var);
		format(var, 32, "%d pFlameD\n",PlayerInfo[playerid][pFlameD]);fwrite(hFile, var);
		format(var, 32, "%d pMiniD\n",PlayerInfo[playerid][pMiniD]);fwrite(hFile, var);
		format(var, 32, "%d pSachelD\n",PlayerInfo[playerid][pSatchelD]);fwrite(hFile, var);
		format(var, 32, "%d pFireED\n",PlayerInfo[playerid][pFireED]);fwrite(hFile, var);
		format(var, 32, "%d pSprayD\n",PlayerInfo[playerid][pSprayD]);fwrite(hFile, var);
		format(var, 32, "%d pFistD\n",PlayerInfo[playerid][pFistD]);fwrite(hFile, var);
		format(var, 32, "%d pBrassD\n",PlayerInfo[playerid][pBrassD]);fwrite(hFile, var);
		format(var, 32, "%d pGolfD\n",PlayerInfo[playerid][pGolfD]);fwrite(hFile, var);
		format(var, 32, "%d pNightSD\n",PlayerInfo[playerid][pNightSD]);fwrite(hFile, var);
		format(var, 32, "%d pBatD\n",PlayerInfo[playerid][pBatD]);fwrite(hFile, var);
		format(var, 32, "%d pShovelD\n",PlayerInfo[playerid][pShovelD]);fwrite(hFile, var);
		format(var, 32, "%d pPoolCD\n",PlayerInfo[playerid][pPoolCD]);fwrite(hFile, var);
		format(var, 32, "%d pKatanaD\n",PlayerInfo[playerid][pKatanaD]);fwrite(hFile, var);
		format(var, 32, "%d pChainsawD\n",PlayerInfo[playerid][pChainsawD]);fwrite(hFile, var);
		format(var, 32, "%d pIntimD\n",PlayerInfo[playerid][pIntimD]);fwrite(hFile, var);
		format(var, 32, "%d pKnifeD\n",PlayerInfo[playerid][pKnifeD]);fwrite(hFile, var);
		format(var, 32, "%d pLogs\n",PlayerInfo[playerid][pLogs]);fwrite(hFile, var);
		format(var, 32, "%d pTmpMission\n",PlayerInfo[playerid][pTmpMission]);fwrite(hFile, var);
		format(var, 32, "%d pTmpRank\n",PlayerInfo[playerid][pTmpRank]);fwrite(hFile, var);
		format(var, 32, "%d pTmpDMkill\n",PlayerInfo[playerid][pTmpDMkill]);fwrite(hFile, var);
		format(var, 32, "%d pGangRank\n",PlayerInfo[playerid][pGangRank]);fwrite(hFile, var);
		format(var, 32, "%d pWantedlevel\n",PlayerInfo[playerid][pWantedlevel]);fwrite(hFile, var);
		format(var, 32, "%d pLicense\n",PlayerInfo[playerid][pLicense]);fwrite(hFile, var);
		format(var, 32, "%d pMuted\n",PlayerInfo[playerid][pMuted]);fwrite(hFile, var);
		format(var, 32, "%d pPbiskey2\n",PlayerInfo[playerid][pPbiskey2]);fwrite(hFile, var);
		format(var, 32, "%d pPhousekey2\n",PlayerInfo[playerid][pPhousekey2]);fwrite(hFile, var);
		format(var, 32, "%d pCDL\n",PlayerInfo[playerid][pCDL]);fwrite(hFile, var);
		format(var, 32, "%d pMotoL\n",PlayerInfo[playerid][pMotoL]);fwrite(hFile, var);
		format(var, 32, "%d pDisconnects\n",PlayerInfo[playerid][pDisconnects]);fwrite(hFile, var);
		format(var, 32, "%d pMHeals\n",PlayerInfo[playerid][pMHeals]);fwrite(hFile, var);
		format(var, 32, "%d pHealed\n",PlayerInfo[playerid][pHealed]);fwrite(hFile, var);
		format(var, 32, "%d pFucked\n",PlayerInfo[playerid][pFucked]);fwrite(hFile, var);
		format(var, 32, "%d pGotfucked\n",PlayerInfo[playerid][pGotfucked]);fwrite(hFile, var);
		format(var, 32, "%d pBlown\n",PlayerInfo[playerid][pBlown]);fwrite(hFile, var);
		format(var, 32, "%d pGotblown\n",PlayerInfo[playerid][pGotblown]);fwrite(hFile, var);
		format(var, 32, "%d pWank\n",PlayerInfo[playerid][pWank]);fwrite(hFile, var);
		format(var, 32, "%d pGotwanked\n",PlayerInfo[playerid][pGotwanked]);fwrite(hFile, var);
		format(var, 32, "%d pAnal\n",PlayerInfo[playerid][pAnal]);fwrite(hFile, var);
		format(var, 32, "%d pGotanal\n",PlayerInfo[playerid][pGotanal]);fwrite(hFile, var);
		format(var, 32, "%d pRobs\n",PlayerInfo[playerid][pGotrobbed]);fwrite(hFile, var);
		format(var, 32, "%d pSaves\n",PlayerInfo[playerid][pSaves]);fwrite(hFile, var);
		format(var, 32, "%d aMutes\n",PlayerInfo[playerid][aMutes]);fwrite(hFile, var);
		format(var, 32, "%d pMutes\n",PlayerInfo[playerid][pMutes]);fwrite(hFile, var);
		format(var, 32, "%d aSlaps\n",PlayerInfo[playerid][aSlaps]);fwrite(hFile, var);
		format(var, 32, "%d pSlaps\n",PlayerInfo[playerid][pSlaps]);fwrite(hFile, var);
		format(var, 32, "%d aKicks\n",PlayerInfo[playerid][aKicks]);fwrite(hFile, var);
		format(var, 32, "%d pKicks\n",PlayerInfo[playerid][pKicks]);fwrite(hFile, var);
		format(var, 32, "%d aScrews\n",PlayerInfo[playerid][aScrews]);fwrite(hFile, var);
		format(var, 32, "%d pScrews\n",PlayerInfo[playerid][pScrews]);fwrite(hFile, var);
		format(var, 32, "%d pGun7\n", PlayerInfo[playerid][pGun7]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo7\n", PlayerInfo[playerid][pAmmo7]);fwrite(hFile, var);
		format(var, 32, "%d pGun8\n", PlayerInfo[playerid][pGun8]);fwrite(hFile, var);
		format(var, 32, "%d pAmmo8\n", PlayerInfo[playerid][pAmmo8]);fwrite(hFile, var);
		format(var, 32, "%d pLottoXP\n",PlayerInfo[playerid][pLottoXP]);fwrite(hFile,var);
		fclose(hFile);
		SendClientMessage(playerid, COLOR_WHITE, "SERVER: Next time you connect, type (/login <password>) to log in.");
		OnPlayerLogin(playerid,PlayerInfo[playerid][pPassword]);
		return 1;
	}
//-------------------------------[Register]--------------------------------------------------------------------------
	if (strcmp(cmd, "/changepass", true)==0 && IsPlayerConnected(playerid) &&  gGivePermToChangeNick[playerid] == 1)
	{
		tmp = strtok(cmdtext, idx);
		if (gPlayerLogged[playerid] != 1)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You Are Not Logged In");
			return 1;
		}
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /changepass [password]");
			return 1;
		}
		strmid(PlayerInfo[playerid][pPassword], tmp, 0, strlen(cmdtext), 255);
		format(string, sizeof(string), "Your new password is %s don't forget it", PlayerInfo[playerid][pPassword]);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		Encript(PlayerInfo[playerid][pPassword]);
		OnPlayerUpdate(playerid);
		GetPlayerName(playerid, playername, sizeof(playername));
		printf("%s has changed there password.", playername);
		return 1;
	}
	if (strcmp(cmd, "/changenick", true)==0  && IsPlayerConnected(playerid) && gGivePermToChangeNick[playerid] == 1)
	{
		tmp = strtok(cmdtext, idx);
		new string2[256];
		if (gPlayerLogged[playerid] != 1)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not Logged In");
			return 1;
		}
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /changename [newname]");
			return 1;
		}
		format(string, sizeof(string), "%s.cer", tmp);
		if(fexist(string))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   That nick is registered");
			return 1;
		}
		OnPlayerRename(tmp,string,playerid);
		format(string, sizeof(string), "You may now reconnect with the name %s", tmp);
		SendClientMessage(playerid, COLOR_YELLOW, string);
		GetPlayerName(playerid, playername, sizeof(playername));
		format(string2, sizeof(string2), "%s.cer", playername);
		printf("%s has changed their name to %s.", playername,tmp);
		gPlayerLogged[playerid] = 0;
		gGivePermToChangeNick[playerid]=0;
		fremove(string2);
		return 1;
	}
//-------------------------------[Level]--------------------------------------------------------------------------
	if (strcmp(cmd, "/level", true) == 0 && IsPlayerConnected(playerid))
	{
		if (gPlayerLogged[playerid] != 0)
		{
			PrintPlayerWeapons(playerid,playerid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not Logged In");
		}
		return 1;
	}
	/*if(strcmp(cmd, "/fillcar", true) == 0)
	{
	    new x1;
		cmd = strtok(cmdtext,x1);
		new str[86],v = GetPlayerVehicleID(playerid);
		if(!strlen(cmd))
		{
		    SendClientMessage(playerid,COLOR_GREY,"Proper Syntax: /fillcar [gallons]");
			return 1;
		}
		if(pInfo1[playerid][Fuel] < strval(cmd))
		{
		    SendClientMessage(playerid,COLOR_WHITE,"You do not have that much fuel to use, please select a lower amount.");
			return 1;
		}
		if(pInfo1[playerid][Fuel] == 0)
		{
		    SendClientMessage(playerid,COLOR_WHITE,"You do not have any fuel on hand. Please buy some fuel to use it.");
			return 1;
		}
		if(GetPlayerState(playerid) != 2)
		{
		    SendClientMessage(playerid,COLOR_WHITE,"You must be in the driver seat of a vehicle to fill it.");
			return 1;
		}
		vFuel[v]+=strval(cmd);
		pInfo1[playerid][Fuel]-=strval(cmd);
		format(str,sizeof(str),"You have used %d gallons of your fuel to fillup a vehicle. You have %d gallons remaining.",strval(cmd),pInfo1[playerid][Fuel]);
		SendClientMessage(playerid,0x00FF00AA,str);
		return 1;
	}
	if(strcmp(cmd, "/buygas", true) == 0)
	{
		new str[86];//,x1;
		cmd = strtok(cmdtext,idx);
		if(!strlen(cmd))
		{
		    SendClientMessage(playerid,COLOR_GREY,"Syntax: /buygas [amount] | The current gas price is at $2 a gallon.");
			return 1;
		}
		for(new s=0; s<16; s++)
		//if(!PlayerToPoint(10,playerid,Stations[s][0],Stations[s][1],Stations[s][2]))
		if(PlayerToPoint(10,playerid,Stations[s][0],Stations[s][1],Stations[s][2]))
		{
		    SendClientMessage(playerid,COLOR_WHITE,"You need to be at a gas station before you can buy fuel.");
		    return 1;
		}
		if(pInfo1[playerid][Fuel] > 20)
		{
		    SendClientMessage(playerid,COLOR_WHITE,"You may not carry more than 20 gallons of fuel with you at any time.");
		    return 1;
		}
		if(GetPlayerMoney(playerid) < strval(cmd) * 2)
		{
		    SendClientMessage(playerid,COLOR_WHITE,"You do not have enough money to buy that much fuel. Try a smaller amount.");
		    return 1;
		}
		if(GetPlayerState(playerid) != 1)
		{
		    SendClientMessage(playerid,COLOR_WHITE,"You must not be inside the car to buy fuel.");
		    return 1;
		}
		pInfo1[playerid][Fuel]+=strval(cmd);
		GiveMoney(playerid,-strval(cmd)*2);
		format(str,sizeof(str),"You have bought %d gallons of fuel worth $%d, use /fill to use the fuel.",strval(cmd),strval(cmd)*2);
		SendClientMessage(playerid,0x00FF00AA,str);
		return 1;
	}*/
	if(strcmp(cmd, "/rt", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playerid, slx, sly, slz);
			SetPlayerPos(playerid, slx, sly-2, slz-2);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not An Admin");
		}
		return 1;
	}
//-------------------------------[Stats]--------------------------------------------------------------------------
	if (strcmp(cmd, "/stats", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /stats [playerid/PartOfName]");
				return 1;
			}
			if(IsStringAName(tmp))
			{
				giveplayerid = GetPlayerID(tmp);
			}
			else
			{
				giveplayerid = strval(tmp);
			}
			if(IsPlayerConnected(giveplayerid))
			{
				PrintPlayerWeapons(playerid,giveplayerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not Authorized to use that command.");
		}
	}
	if (strcmp(cmd, "/number", true) == 0 && IsPlayerConnected(playerid))
	{
		if (gPhoneBook[playerid] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /number [playerid/PartOfName]");
				return 1;
			}
			if(IsStringAName(tmp))
			{
				giveplayerid = GetPlayerID(tmp);
			}
			else
			{
				giveplayerid = strval(tmp);
			}
			if(IsPlayerConnected(giveplayerid))
			{
    			GetPlayerName(giveplayerid, sendername, sizeof(sendername));
				format(string, 256, "Name: %s, Ph: %d",sendername,PlayerInfo[giveplayerid][pPnumber]);
				SendClientMessage(playerid, COLOR_GRAD1, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Do Not Have A PhoneBook");
		}
	}
//-------------------------------[BuyLevel]--------------------------------------------------------------------------
	if (strcmp(cmd, "/buylevel", true) == 0 && IsPlayerConnected(playerid))
	{
		if (gPlayerLogged[playerid] != 0)
		{
			PlayerInfo[playerid][pCash] = GetPlayerMoney(playerid);//
			if (gdebug){printf("DEBUG buylev cash = %d", PlayerInfo[playerid][pCash]);}
			if(PlayerInfo[playerid][pLevel] >= 0)
			{
				new nxtlevel = PlayerInfo[playerid][pLevel]+1;
				new costlevel = nxtlevel*levelcost;//10k for testing purposes
				new expamount = nxtlevel*levelexp;
				new infostring[256];
				if (PlayerInfo[playerid][pCash] < costlevel)
				{
					format(infostring, 256, "   You do Not Have Enough Cash ($%d)",costlevel);
					SendClientMessage(playerid, COLOR_GRAD1, infostring);
				}
				if (PlayerInfo[playerid][pExp] < expamount)
				{
					format(infostring, 256, "   You Need %d Experience Points, You Curently Have [%d]",expamount,PlayerInfo[playerid][pExp]);
					SendClientMessage(playerid, COLOR_GRAD1, infostring);
				}
				else
				{
					format(string, sizeof(string), "~b~LEVEL UP~n~~w~You Are Now Level %d", nxtlevel);
					SetTimer("StopMusic", 6000, 0);
					PlayerPlaySound(playerid, 1185, 0.0, 0.0, 0.0);
					PlayerPlayMusic(playerid);
					GiveMoney(playerid, (-costlevel));
					PlayerInfo[playerid][pLevel]++;
					PlayerInfo[playerid][pExp] = PlayerInfo[playerid][pExp]-expamount;
					PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+2;
					GameTextForPlayer(playerid, string, 5000, 1);
					format(infostring, 256, "   You Bought Level %d For ($%d) Type /upgrade", nxtlevel, costlevel);
					SendClientMessage(playerid, COLOR_GRAD1, infostring);
					format(infostring, 256, "   You Have %d Unspent Upgrade Points",PlayerInfo[playerid][gPupgrade]);
					SendClientMessage(playerid, COLOR_GRAD2, infostring);
				}
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not Logged In");
		}
	}
//---------------------------------[ROB]--------------------------------------------------------------------
	if (strcmp(cmdtext, "/rob", true)==0)
	{
		new Float:ex,Float:ey,Float:ez;GetPlayerPos(playerid,ex,ey,ez);
		if(ez<=800){
			if ((GetTick() - gPlayerLastRob[playerid]) >= ROB_MIN_WAIT) {
				new victim = INVALID_PLAYER_ID;
				if (IsPlayerInAnyVehicle(playerid)) {
					new vehicle55 = GetPlayerVehicleID(playerid);
					for(new i=0; i < MAX_PLAYERS; i++) {
						if(i != playerid && IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicle55) {
							victim = i;
							break;
						}
					}
				}
				else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
					new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:distance;
					GetPlayerPos(playerid, x1, y1, z1);
					for(new i=0; i < MAX_PLAYERS; i++) {
						if(i != playerid && IsPlayerConnected(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT) {
							GetPlayerPos(i, x2, y2, z2);
							distance = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
							if(distance < ROB_MAX_DISTANCE) {
								victim = i;
								break;
							}
						}
					}
				}
				if (victim != INVALID_PLAYER_ID) {
					new cash = GetPlayerMoney(victim);
					new name[MAX_PLAYER_NAME], str[256];
					GetPlayerName(victim, name, MAX_PLAYER_NAME);
					if (cash > 0) {
						new rand = random(100);
						gPlayerLastRob[playerid] = GetTick();
						if (rand <= ROB_SUCCESS_PERCENTAGE && gRobProtection[victim]!=1) {
							rand = random(ROB_AMOUNT_MAX_PERCENTAGE - ROB_AMOUNT_MIN_PERCENTAGE) + ROB_AMOUNT_MIN_PERCENTAGE;
							new amount = floatround((rand * cash) / 100);
							GetPlayerName(playerid, name, MAX_PLAYER_NAME);
							format(str, sizeof(str), "%s (%d) has robbed you $%d.", name, playerid, amount);
							SendClientMessage(victim, COLOR_ROB_SUCCESS, str);
							//format(str, sizeof(str), "~y~Robbed by %s: $%d.", name, amount);
							//GameTextForPlayer(victim, str, 3000, 3);
							GiveMoney(victim, 0 - amount);
							GetPlayerName(victim, name, MAX_PLAYER_NAME);
							format(str, sizeof(str), "You have robbed $%d from %s (%d)", amount, name, victim);
							SendClientMessage(playerid, COLOR_ROB_SUCCESS, str);
							//format(str, sizeof(str), "~y~Robbed %s: $%d.", name, amount);
							//GameTextForPlayer(playerid, str, 3000, 3);
							GiveMoney(playerid, amount);
						}
						else{
  		    	 		 	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
            	 			format(str, sizeof(str), "%s (%d) has attempted to rob you but failed.", name, playerid);
            	 	 		SendClientMessage(victim, COLOR_ROB_FAILURE, str);
            	 	 		//format(str, sizeof(str), "~y~%s attempted to rob you", name);
            	 	 		//GameTextForPlayer(victim, str, 3000, 3);
  		    	 		   	GetPlayerName(victim, name, MAX_PLAYER_NAME);
            	 			format(str, sizeof(str), "Your attempt to rob %s (%d) has failed.", name, victim);
            	  			SendClientMessage(playerid, COLOR_ROB_FAILURE, str);
            	  			//format(str, sizeof(str), "~y~Attempt to rob %s failed", name);
            	  			//GameTextForPlayer(playerid, str, 3000, 3);
						}
					}      // i just hate the gametext :p all over youre screen like "SWFASGDFASVJKD;WE4FR!!!!"
					else{
  						GetPlayerName(victim, name, MAX_PLAYER_NAME);
    					format(str, sizeof(str), "Cannot attempt to rob %s (%d) as he/she has no money.", name, victim);
     					SendClientMessage(playerid, COLOR_ROB_ERROR, str);
					}
				}
				else{
					SendClientMessage(playerid, COLOR_ROB_ERROR, "No players close enough to rob.");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_ROB_ERROR, "Please wait before attempting to rob someone again.");
			}
		}
		else{SendClientMessage(playerid,COLOR_ROB_ERROR,"You may not rob in interiors");}
		return 1;
	}
//-------------------------------[Jak]------------------------------------------------------------------------------
	if (strcmp(cmdtext, "/arob", true)==0 && PlayerInfo[playerid][pAdmin] >= 107 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
        if ((GetTick() - gPlayerLastRob[playerid]) >= ROB_MIN_WAIT) {
            new victim = INVALID_PLAYER_ID;
        	if (IsPlayerInAnyVehicle(playerid)) {
            	new vehicle55 = GetPlayerVehicleID(playerid);
                for(new i=0; i < MAX_PLAYERS; i++) {
            		if(i != playerid && IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicle55) {
              			victim = i;
                	    break;
                	}
             	}
        	}
        	else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
   	  	 		new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:distance;
     	        GetPlayerPos(playerid, x1, y1, z1);
     	        for(new i=0; i < MAX_PLAYERS; i++) {
       	     		if(i != playerid && IsPlayerConnected(i) && GetPlayerState(i) == PLAYER_STATE_ONFOOT) {
             			GetPlayerPos(i, x2, y2, z2);
                  		distance = floatsqroot(floatpower(floatabs(floatsub(x2,x1)),2)+floatpower(floatabs(floatsub(y2,y1)),2)+floatpower(floatabs(floatsub(z2,z1)),2));
                    	if(distance < ROB_MAX_DISTANCE2) {
                    		victim = i;
                        	break;
                    	}
                	}
            	}
        	}
        	if (victim != INVALID_PLAYER_ID) {
        		new cash = GetPlayerMoney(victim);
         		new name[MAX_PLAYER_NAME], str[256];
          		GetPlayerName(victim, name, MAX_PLAYER_NAME);
           		if (cash > 0) {
           			new rand = random(100);
					gPlayerLastRob[playerid] = GetTick();
          			if (rand <= ROB_SUCCESS_PERCENTAGE2) {
              			rand = random(ROB_AMOUNT_MAX_PERCENTAGE2 - ROB_AMOUNT_MIN_PERCENTAGE2) + ROB_AMOUNT_MIN_PERCENTAGE2;
                    	new amount = floatround((rand * cash) / 100);
                    	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
                   		GiveMoney(victim, 0 - amount);
                    	GetPlayerName(victim, name, MAX_PLAYER_NAME);
                   		format(str, sizeof(str), "You have administratively robbed $%d from %s (%d)", amount, name, victim);
                  		SendClientMessage(playerid, COLOR_ROB_SUCCESS, str);
                    	GiveMoney(playerid, amount);
                	}
				}
        		else {
            		GetPlayerName(victim, name, MAX_PLAYER_NAME);
               	 	format(str, sizeof(str), "Cannot attempt to rob %s (%d) as he/she has no money.", name, victim);
              		SendClientMessage(playerid, COLOR_ROB_ERROR, str);
        		}
         	}
         	else {
         		SendClientMessage(playerid, COLOR_ROB_ERROR, "No players close enough to rob.");
         	}
        }
       	else {
  			SendClientMessage(playerid, COLOR_ROB_ERROR, "Please wait before attempting to rob someone again.");
    	}
		return 1;
	}
//-------------------------------[UPGRADE]--------------------------------------------------------------------------
	if ((strcmp(cmd, "/carcolor", true) == 0 || strcmp(cmd,"/carcolour",true)==0) && IsPlayerConnected(playerid))
	{
		new house = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid,COLOR_YELLOW,"You cannot upgrade your car while inside a vehicle.");return 1;}
			if(GetVehiclePlayerID(house+1)!=INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_YELLOW,"Someone is in your car, you may not upgrade it");return 1;}
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD3,"($5000) USAGE: /carcolor [color 1 - 2] [color number]");
				return 1;
			}
			new colornum = strval(tmp);
			if(colornum > 2 || colornum < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD3,"Choices are 1 or 2");
				return 1;
			}
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD3,"($5000) USAGE: /carcolor [color 1 - 2] [color number]");
			}
			new color = strval(tmp);
			if(color > 126)
			{
				SendClientMessage(playerid, COLOR_GRAD3,"Maximum is 126");
				return 1;
			}
			if (GetPlayerMoney(playerid) < 5000)
			{
				SendClientMessage(playerid, COLOR_GRAD3,"You can't afford that ($5000)");
			}
			if(colornum == 1)
			{
				HouseInfo[house][hVcol1] = color;
				format(string, sizeof(string), "Car color 1 set to %d -$5000",color);
				SendClientMessage(playerid, COLOR_GRAD3,string);
				ChangeVehicleColor(house+1,color,HouseInfo[house][hVcol2]);
			}
			else
			{
				HouseInfo[house][hVcol2] = color;
				format(string, sizeof(string), "Car color 2 set to %d -$5000",color);
				SendClientMessage(playerid, COLOR_GRAD3,string);
				ChangeVehicleColor(house+1,HouseInfo[house][hVcol1],color);
			}
			DestroyVehicle(house+1);
			CreateVehicle(HouseInfo[house][hVec],HouseCarSpawns[house][0],HouseCarSpawns[house][1],HouseCarSpawns[house][2],HouseCarSpawns[house][3],HouseInfo[house][hVcol1],HouseInfo[house][hVcol2],-1);
			SendClientMessage(playerid, COLOR_GRAD6, "Enjoy your new paint!");
			GiveMoney(playerid,-5000);
			SBizzInfo[6][sbTakings] = SBizzInfo[6][sbTakings]+5000;
			PlayerPlaySound(giveplayerid, 1134, 0.0, 0.0, 0.0);
			OnPropUpdate();
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
			return 1;
		}
		return 1;
	}
	if (strcmp(cmd, "/carupgrade", true) == 0 && IsPlayerConnected(playerid))
	{
		new house = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
		    if(IsPlayerInAnyVehicle(playerid)){SendClientMessage(playerid,COLOR_YELLOW,"You cannot upgrade your car while inside a vehicle.");return 1;}
			if(GetVehiclePlayerID(house+1)!=INVALID_PLAYER_ID){SendClientMessage(playerid,COLOR_YELLOW,"Someone is in your car, you may not upgrade it");return 1;}
			new gunid[16];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				format(string, sizeof(string), "USAGE: /carupgrade [carname]");
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				SendClientMessage(playerid, COLOR_WHITE,"*** CAR UPGRADES Cost $21000 ***");
				SendClientMessage(playerid, COLOR_GRAD2,string);
				if(PlayerInfo[playerid][pLevel] == 3)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 3 Cars: freeway feltzer sabre blade vortex quad");
				}
				else if(PlayerInfo[playerid][pLevel] == 4)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 4 Cars: freeway feltzer sabre blade savanna remington vortex quad");
				}
				else if(PlayerInfo[playerid][pLevel] == 5)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 5 Cars: freeway feltzer sabre blade savanna remington buccaneer flash vortex quad");
				}
				else if(PlayerInfo[playerid][pLevel] == 6)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 6 Cars: freeway feltzer sabre blade savanna remington buccaneer flash");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 6 Cars: slamvan uranus sultan vortex quad sanchez");
				}
				else if(PlayerInfo[playerid][pLevel] == 7)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 7 Cars: freeway feltzer sabre blade savanna remington buccaneer flash");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 7 Cars: slamvan uranus sultan jester elegy vortex quad sanchez");
				}
				else if(PlayerInfo[playerid][pLevel] == 8)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 8 Cars: freeway feltzer sabre blade savanna remington buccaneer flash");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 8 Cars: slamvan uranus sultan jester elegy supergt blistac vortex quad sanchez");
				}
				else if(PlayerInfo[playerid][pLevel] == 9)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 9 Cars: freeway feltzer sabre blade savanna remington buccaneer flash sandking");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 9 Cars: slamvan uranus sultan jester elegy supergt blistac zr350 vortex quad sanchez");
				}
				else if(PlayerInfo[playerid][pLevel] == 10)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 10 Cars: freeway feltzer sabre blade savanna remington buccaneer flash sandking quad sanchez");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 10 Cars: slamvan uranus sultan jester elegy supergt blistac zr350 cheetah vortex duneride");
				}
				else if(PlayerInfo[playerid][pLevel] == 11)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 11 Cars: freeway feltzer sabre blade savanna remington buccaneer flash sandking");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 11 Cars: slamvan uranus sultan jester elegy supergt blistac zr350 cheetah");
					SendClientMessage(playerid, COLOR_GRAD1, "Level 11 Cars: banshee fcr900 comet vortex quad duneride sanchez");
				}
				else if(PlayerInfo[playerid][pLevel] == 12)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 12 Cars: freeway feltzer sabre blade savanna remington buccaneer flash sandking");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 12 Cars: slamvan uranus sultan jester elegy supergt blistac zr350 cheetah");
					SendClientMessage(playerid, COLOR_GRAD1, "Level 12 Cars: banshee fcr900 comet hotring vortex quad duneride sanchez");
				}
				else if(PlayerInfo[playerid][pLevel] == 13)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 13 Cars: freeway feltzer sabre blade savanna remington buccaneer flash sandking");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 13 Cars: slamvan uranus sultan jester elegy supergt blistac zr350 cheetah");
					SendClientMessage(playerid, COLOR_GRAD1, "Level 13 Cars: banshee fcr900 comet hotring turismo bullet vortex quad duneride sanchez");
				}
				else if(PlayerInfo[playerid][pLevel] == 14)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 14 Cars: freeway feltzer sabre blade savanna remington buccaneer flash sandking");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 14 Cars: slamvan uranus sultan jester elegy supergt blistac zr350 cheetah sanchez");
					SendClientMessage(playerid, COLOR_GRAD1, "Level 14 Cars: banshee fcr900 comet hotring turismo bullet infernus vortex quad duneride");
				}
				else if(PlayerInfo[playerid][pLevel] >= 15)
				{
					SendClientMessage(playerid, COLOR_GRAD3, "Level 15 Cars: freeway feltzer sabre blade savanna remington buccaneer flash sandking");
					SendClientMessage(playerid, COLOR_GRAD2, "Level 15 Cars: slamvan uranus sultan jester elegy supergt blistac zr350 cheetah sanchez");
					SendClientMessage(playerid, COLOR_GRAD1, "Level 15 Cars: banshee fcr900 comet hotring turismo bullet infernus monster monstera");
					SendClientMessage(playerid, COLOR_GRAD1, "Level 15 Cars: monsterb vortex quad duneride bfinject stretch");
				}
				SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
				return 1;
			}
			if(SBizzInfo[6][sbProd] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
				return 1;
			}
			strmid(gunid, tmp, 0, strlen(cmdtext), 255);
			if (GetPlayerMoney(playerid) >= 100000)
			{
				if (PlayerInfo[playerid][pLevel] >= 15 && (strcmp(gunid, "bfinject", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Bike Is Now A BF Injection");
					HouseInfo[house][hVec] = 424;
				}
				else if (PlayerInfo[playerid][pLevel] >= 15 && (strcmp(gunid, "monster", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Monster Truck");
					HouseInfo[house][hVec] = 444;
				}
				else if (PlayerInfo[playerid][pLevel] >= 15 && (strcmp(gunid, "stretch", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Stretch Limo");
					HouseInfo[house][hVec] = 409;
				}
				else if (PlayerInfo[playerid][pLevel] >= 15 && (strcmp(gunid, "monstera", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Monster Truck, Type A");
					HouseInfo[house][hVec] = 556;
				}
				else if (PlayerInfo[playerid][pLevel] >= 15 && (strcmp(gunid, "monsterb", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Monster Truck, Type B");
					HouseInfo[house][hVec] = 557;
				}
    			else if (PlayerInfo[playerid][pLevel] >= 14 && (strcmp(gunid, "infernus", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now An Infernus");
					HouseInfo[house][hVec] = 411;
				}
    			else if (PlayerInfo[playerid][pLevel] >= 13 && (strcmp(gunid, "bullet", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Bullet");
					HouseInfo[house][hVec] = 541;
				}
				else if (PlayerInfo[playerid][pLevel] >= 13 && (strcmp(gunid, "turismo", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Turismo");
					HouseInfo[house][hVec] = 451;
				}
				else if (PlayerInfo[playerid][pLevel] >= 12 && (strcmp(gunid, "hotring", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Hotring");
					HouseInfo[house][hVec] = 502;
				}
				else if (PlayerInfo[playerid][pLevel] >= 11 && (strcmp(gunid, "banshee", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Banshee");
					HouseInfo[house][hVec] = 429;
				}
				else if (PlayerInfo[playerid][pLevel] >= 11 && (strcmp(gunid, "fbiranch", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now An FBI Rancher");
					HouseInfo[house][hVec] = 490;
				}
				else if (PlayerInfo[playerid][pLevel] >= 11 && (strcmp(gunid, "comet", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Comet");
					HouseInfo[house][hVec] = 480;
				}
				else if (PlayerInfo[playerid][pLevel] >= 11 && (strcmp(gunid, "fcr900", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Bike Is Now An FCR-900");
					HouseInfo[house][hVec] = 521;
				}
				else if (PlayerInfo[playerid][pLevel] >= 10 && (strcmp(gunid, "cheetah", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Cheetah");
					HouseInfo[house][hVec] = 415;
				}
				else if (PlayerInfo[playerid][pLevel] >= 10 && (strcmp(gunid, "hotknife", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Hotknife");
					HouseInfo[house][hVec] = 434;
				}
				else if (PlayerInfo[playerid][pLevel] >= 10 && (strcmp(gunid, "enforcer", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now An Enforcer");
					HouseInfo[house][hVec] = 427;
				}
				else if (PlayerInfo[playerid][pLevel] >= 10 && (strcmp(gunid, "duneride", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Duneride");
					HouseInfo[house][hVec] = 573;
				}
				else if (PlayerInfo[playerid][pLevel] >= 9 && (strcmp(gunid, "zr350", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A ZR350");
					HouseInfo[house][hVec] = 477;
				}
				else if (PlayerInfo[playerid][pLevel] >= 9 && (strcmp(gunid, "sandking", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Sandking");
					HouseInfo[house][hVec] = 495;
				}
				else if (PlayerInfo[playerid][pLevel] >= 8 && (strcmp(gunid, "blistac", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Blista Compact");
					HouseInfo[house][hVec] = 496;
				}
				else if (PlayerInfo[playerid][pLevel] >= 8 && (strcmp(gunid, "supergt", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Super GT");
					HouseInfo[house][hVec] = 506;
				}
				else if (PlayerInfo[playerid][pLevel] >= 7 && (strcmp(gunid, "elegy", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Elegy");
					HouseInfo[house][hVec] = 562;
				}
				else if (PlayerInfo[playerid][pLevel] >= 7 && (strcmp(gunid, "jester", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Jester");
					HouseInfo[house][hVec] = 559;
				}
				else if (PlayerInfo[playerid][pLevel] >= 6 && (strcmp(gunid, "sultan", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Sultan");
					HouseInfo[house][hVec] = 560;
				}
				else if (PlayerInfo[playerid][pLevel] >= 6 && (strcmp(gunid, "sanchez", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Sanchez");
					HouseInfo[house][hVec] = 468;
				}
				else if (PlayerInfo[playerid][pLevel] >= 6 && (strcmp(gunid, "uranus", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Uranus");
					HouseInfo[house][hVec] = 558;
				}
				else if (PlayerInfo[playerid][pLevel] >= 6 && (strcmp(gunid, "slamvan", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Slamvan");
					HouseInfo[house][hVec] = 535;
				}
				else if (PlayerInfo[playerid][pLevel] >= 5 && (strcmp(gunid, "flash", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Flash");
					HouseInfo[house][hVec] = 565;
				}
				else if (PlayerInfo[playerid][pLevel] >= 5 && (strcmp(gunid, "buccaneer", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Buccaneer");
					HouseInfo[house][hVec] = 518;
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "savanna", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Savanna");
					HouseInfo[house][hVec] = 567;
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "remington", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Remington");
					HouseInfo[house][hVec] = 534;
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "journey", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Journey");
					HouseInfo[house][hVec] = 508;
				}
				else if (PlayerInfo[playerid][pLevel] >= 4 && (strcmp(gunid, "rancher", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Rancher");
					HouseInfo[house][hVec] = 489;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "huntly", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Huntley");
					HouseInfo[house][hVec] = 579;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "copcar", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Cop Car");
					HouseInfo[house][hVec] = 597;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "blade", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Blade");
					HouseInfo[house][hVec] = 536;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "buffalo", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Buffalo");
					HouseInfo[house][hVec] = 402;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "sabre", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Sabre");
					HouseInfo[house][hVec] = 475;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "feltzer", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Feltzer");
					HouseInfo[house][hVec] = 533;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "freeway", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Freeway");
					HouseInfo[house][hVec] = 463;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "vortex", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Vortex");
					HouseInfo[house][hVec] = 539;
				}
				else if (PlayerInfo[playerid][pLevel] >= 3 && (strcmp(gunid, "quad", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now A Quad Bike");
					HouseInfo[house][hVec] = 471;
				}
				else if (PlayerInfo[playerid][pLevel] >= 15 && (strcmp(gunid, "nrg", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "New Upgrade: Your House Car Is Now An NRG-500");
					HouseInfo[house][hVec] = 522;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "   Unrecognized Car");
					return 1;
				}
				DestroyVehicle(house+1);
				CreateVehicle(HouseInfo[house][hVec],HouseCarSpawns[house][0],HouseCarSpawns[house][1],HouseCarSpawns[house][2],HouseCarSpawns[house][3],HouseInfo[house][hVcol1],HouseInfo[house][hVcol2],-1);
				SendClientMessage(playerid, COLOR_GRAD6, "Your new vehicle has been delivered -$21000");
				OnPropUpdate();
				GiveMoney(playerid,-21000);
				SBizzInfo[6][sbTakings] = SBizzInfo[6][sbTakings]+21000;
				SBizzInfo[6][sbProd]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Vehicles cost $21000");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
			return 1;
		}
	}
	if (strcmp(cmd, "/resetupgrades", true) == 0 && IsPlayerConnected(playerid))
	{
		if (gPlayerLogged[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not Logged In");
			return 1;
		}
		if (GetPlayerMoney(playerid) < 2000)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   Resetting upgrades requires $2000");
			return 1;
		}
		if (PlayerInfo[playerid][pLevel] < 2)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You need to be at least level 2 to reset upgrades");
			return 1;
		}
		PlayerInfo[playerid][gPupgrade] = (PlayerInfo[playerid][pLevel]-1)*2;
		PlayerInfo[playerid][pGun1] = 0;
		PlayerInfo[playerid][pGun2] = 0;
		PlayerInfo[playerid][pGun3] = 0;
		PlayerInfo[playerid][pGun4] = 0;
		PlayerInfo[playerid][pGun5] = 0;
		PlayerInfo[playerid][pGun6] = 0;
		PlayerInfo[playerid][pAmmo1] = 200;
		PlayerInfo[playerid][pAmmo2] = 8;
		PlayerInfo[playerid][pAmmo3] = 30;
		PlayerInfo[playerid][pAmmo4] = 30;
		PlayerInfo[playerid][pAmmo5] = 10;
		PlayerInfo[playerid][pAmmo6] = 10;
		PlayerInfo[playerid][pSHealth] = 0.0;
		PlayerInfo[playerid][pSArmour] = 0.0;
		GiveMoney(playerid,-100000);
		//SBizzInfo[6][sbTakings] = SBizzInfo[6][sbTakings]+100000;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		format(string, 256, "   You Have %d Unspent Upgrade Points",PlayerInfo[playerid][gPupgrade]);
		SendClientMessage(playerid, COLOR_GRAD2, string);
	}
	if(strcmp(cmd,"/bigbang",true)==0){
	    if(IsPlayerAdmin(playerid)||PlayerInfo[playerid][pAdmin]>=104||FugitiveCore[playerid]==1){
	        for(new i=0;i<MAX_VEHICLES;i++){SetVehicleHealth(i,150.0);}
	        SetTimer("resetallvec",10000,0);
	        return 1;
	    }
	}
	if(strcmp(cmd, "/bestbuy", true) == 0 && IsPlayerConnected(playerid))
	{
		new tmpprice;
		new store;
		if(Locator[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "you do not have this device");
			return 1;
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if(BizzInfo[i][bPriceMod] < tmpprice && BizzInfo[i][bEntcost] == 0 && BizzInfo[i][bProd] > 0)
			{
				tmpprice = BizzInfo[i][bPriceMod];
				store = i;
			}
			for(new j = 0; j < sizeof(BizzInfo); j++)
			{
			 	if(BizzInfo[j][bPriceMod] < tmpprice && BizzInfo[j][bEntcost] == 0 && BizzInfo[j][bProd] > 0)
			 	{
			 		tmpprice = BizzInfo[j][bPriceMod];
			 		store = j;
				}
			}
		}
		SetPlayerCheckpoint(playerid,BizzInfo[store][bEntrancex], BizzInfo[store][bEntrancey], BizzInfo[store][bEntrancez], 4.0);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
		GameTextForPlayer(playerid, "~w~Waypoint set ~r~Best Buy", 5000, 1);
		return 1;
	}
	if(strcmp(cmd, "/bestsale", true) == 0 && IsPlayerConnected(playerid))
	{
		new tmpprice = 0;
		new store = 255;
		if(Locator[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "you do not have this device");
			return 1;
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if(BizzInfo[i][bPayComp] > tmpprice && BizzInfo[i][bCompCap] > BizzInfo[i][bComp] && BizzInfo[i][bTakings] > BizzInfo[i][bPayComp])
			{
				tmpprice = BizzInfo[i][bPayComp];
				store = i;
			}
			for(new j = 0; j < sizeof(BizzInfo); j++)
			{
			 	if(store != 255 && BizzInfo[j][bPayComp] > tmpprice && BizzInfo[j][bCompCap] > BizzInfo[j][bComp] && BizzInfo[j][bTakings] > BizzInfo[j][bPayComp])
			 	{
			 		tmpprice = BizzInfo[j][bPayComp];
			 		store = j;
				}
			}
		}
		if(store == 255)
		{
			GameTextForPlayer(playerid, "~w~There are no sales to be made for now.", 5000, 1);
			return 1;
		}
		SetPlayerCheckpoint(playerid,BizzInfo[store][bEntrancex], BizzInfo[store][bEntrancey], BizzInfo[store][bEntrancez], 4.0);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
		GameTextForPlayer(playerid, "~w~Waypoint set ~r~Best Sale", 5000, 1);
		return 1;
	}
	
/*	if (strcmp(cmd, "/buydildo", true) == 0)
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
				if (location == 113 || location == 116 || location == 117)
		{
			SendClientMessage(playerid, COLOR_WHITE,"No Dildo's Are Sold Here.");
			return 1;
		}
		new mod = (BizzInfo[location-1000][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buydildo [DildoName] [AmmoAmount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Dildo & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: purpledildo ($%d) whitedildo ($%d) longwhitedildo ($%d) whitedildo2 ($%d)",
			DildoPrice[0][0]/100*mod,DildoPrice[1][0]/100*mod,DildoPrice[2][0]/100*mod,DildoPrice[3][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buydildo [dildoname] [ammoamount]");
			return 1;
		}
		new ammo = strval(tmp);

	 	if (strcmp(gunid, "purpledildo", true, strlen(gunid)) == 0)
		{
			gun = 10;
			guncharge = DildoPrice[0][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "whitedildo", true, strlen(gunid)) == 0)
		{
			gun = 11;
			guncharge = DildoPrice[1][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "longwhitedildo", true, strlen(gunid)) == 0)
		{
			gun = 12;
			guncharge = DildoPrice[2][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "whitedildo2", true, strlen(gunid)) == 0)
		{
			gun = 13;
			guncharge = DildoPrice[3][0]/100*mod;
			ammocharge = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that dildo.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-99][bTakings] = BizzInfo[location-99][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-99][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-99);
		printf("%s", string);
		PayLog(string);
		return 1;
	}


	if (strcmp(cmd, "/buyshotgun", true) == 0)
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		//new gunstring2[256];
		//new gunstring3[256];
		//new gunstring4[256];
		//new gunstring5[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
		if(location < 99 || location == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE,"You are not in a store");
			return 1;
		}
		new mod = (BizzInfo[location-99][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buyshotgun [ShotgunName] [AmmoAmount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Shotgun & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: SawnOff ($%d) Spas12 ($%d) Pump Shotty ($%d)",
			ShotgunPrice[0][0]/100*mod,ShotgunPrice[1][0]/100*mod,ShotgunPrice[2][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buyshotgun [ShotgunName] [AmmoAmount]");
			return 1;
		}
		new ammo = strval(tmp);

	 	if (strcmp(gunid, "sawnoff", true, strlen(gunid)) == 0)
		{
			gun = 26;
			guncharge = ShotgunPrice[0][0]/100*mod;
			ammocharge = ShotgunPrice[0][0]*ammo;
		}
		else if (strcmp(gunid, "spas12", true, strlen(gunid)) == 0)
		{
			gun = 27;
			guncharge = ShotgunPrice[1][0]/100*mod;
			ammocharge = ShotgunPrice[1][0]*ammo;
		}
		else if (strcmp(gunid, "shotgun", true, strlen(gunid)) == 0)
		{
			gun = 25;
			guncharge = ShotgunPrice[2][0]/100*mod;
			ammocharge = ShotgunPrice[2][0]*ammo;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that Shotgun.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-99][bTakings] = BizzInfo[location-99][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-99][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-99);
		printf("%s", string);
		PayLog(string);
		return 1;
	}


	if (strcmp(cmd, "/buysmg", true) == 0)
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		//new gunstring2[256];
		//new gunstring3[256];
		//new gunstring4[256];
		//new gunstring5[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
		if(location < 99 || location == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE,"You are not in a store");
			return 1;
		}
		new mod = (BizzInfo[location-99][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buysmg [SmgName] [AmmoAmount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** SMG & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: Tec9 ($%d) Uzi ($%d) MP5 ($%d)",
			SmgPrice[0][0]/100*mod,SmgPrice[1][0]/100*mod,SmgPrice[2][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buysmg [SmgName] [AmmoAmount]");
			return 1;
		}
		new ammo = strval(tmp);

	 	if (strcmp(gunid, "tec9", true, strlen(gunid)) == 0)
		{
			gun = 32;
			guncharge = SmgPrice[0][0]/100*mod;
			ammocharge = SmgPrice[0][0]*ammo;
		}
		else if (strcmp(gunid, "uzi", true, strlen(gunid)) == 0)
		{
			gun = 28;
			guncharge = SmgPrice[1][0]/100*mod;
			ammocharge = SmgPrice[1][0]*ammo;
		}
		else if (strcmp(gunid, "mp5", true, strlen(gunid)) == 0)
		{
			gun = 29;
			guncharge = SmgPrice[2][0]/100*mod;
			ammocharge = SmgPrice[2][0]*ammo;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that SMG.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-99][bTakings] = BizzInfo[location-99][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-99][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-99);
		printf("%s", string);
		PayLog(string);
		return 1;
	}


	if (strcmp(cmd, "/buypistol", true) == 0)
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		//new gunstring2[256];
		//new gunstring3[256];
		//new gunstring4[256];
		//new gunstring5[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
		if(location < 99 || location == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE,"You are not in a store");
			return 1;
		}
		new mod = (BizzInfo[location-99][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buypistol [PistolName] [AmmoAmount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Pistol & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: Deagle ($%d) Colt45 ($%d) Silenced ($%d)",
			PistolPrice[0][0]/100*mod,PistolPrice[1][0]/100*mod,PistolPrice[2][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buypistol [pistolName] [AmmoAmount]");
			return 1;
		}
		new ammo = strval(tmp);

	 	if (strcmp(gunid, "deagle", true, strlen(gunid)) == 0)
		{
			gun = 24;
			guncharge = PistolPrice[0][0]/100*mod;
			ammocharge = PistolPrice[0][0]*ammo;
		}
		else if (strcmp(gunid, "colt45", true, strlen(gunid)) == 0)
		{
			gun = 22;
			guncharge = PistolPrice[1][0]/100*mod;
			ammocharge = PistolPrice[1][0]*ammo;
		}
		else if (strcmp(gunid, "silenced", true, strlen(gunid)) == 0)
		{
			gun = 23;
			guncharge = PistolPrice[2][0]/100*mod;
			ammocharge = PistolPrice[2][0]*ammo;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that Pistol.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-99][bTakings] = BizzInfo[location-99][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-99][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-99);
		printf("%s", string);
		PayLog(string);
		return 1;
	}


	if (strcmp(cmd, "/buyrifle", true) == 0)
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		//new gunstring2[256];
		//new gunstring3[256];
		//new gunstring4[256];
		//new gunstring5[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
		if(location < 99 || location == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE,"You are not in a store");
			return 1;
		}
		new mod = (BizzInfo[location-99][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buyrifle [RifleName] [AmmoAmount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Rifle & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: M4 ($%d) AK-47 ($%d) Rifle ($%d)",
			RiflePrice[0][0]/100*mod,RiflePrice[1][0]/100*mod,RiflePrice[2][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buyrifle [RifleName] [AmmoAmount]");
			return 1;
		}
		new ammo = strval(tmp);

	 	if (strcmp(gunid, "m4", true, strlen(gunid)) == 0)
		{
			gun = 31;
			guncharge = RiflePrice[0][0]/100*mod;
			ammocharge = RiflePrice[0][0]*ammo;
		}
		else if (strcmp(gunid, "ak-47", true, strlen(gunid)) == 0)
		{
			gun = 30;
			guncharge = RiflePrice[1][0]/100*mod;
			ammocharge = RiflePrice[1][0]*ammo;
		}
		else if (strcmp(gunid, "rifle", true, strlen(gunid)) == 0)
		{
			gun = 33;
			guncharge = RiflePrice[2][0]/100*mod;
			ammocharge = RiflePrice[2][0]*ammo;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that Rifle.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-99][bTakings] = BizzInfo[location-99][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-99][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-99);
		printf("%s", string);
		PayLog(string);
		return 1;
	}


	if (strcmp(cmd, "/buyprojectile", true) == 0)
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		//new gunstring2[256];
		//new gunstring3[256];
		//new gunstring4[256];
		//new gunstring5[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
		if(location < 99 || location == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE,"You are not in a store");
			return 1;
		}
		new mod = (BizzInfo[location-99][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buyprojectile [ProjectileName] [AmmoAmount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Projectile & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: Satchel ($%d) Molotov ($%d) Grenade ($%d) Teargas ($%d)",
			ProjectilePrice[0][0]/100*mod,ProjectilePrice[1][0]/100*mod,ProjectilePrice[2][0]/100*mod,ProjectilePrice[3][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buyprojectile [Projectilename] [ammoamount]");
			return 1;
		}
		new ammo = strval(tmp);

	 	if (strcmp(gunid, "satchel", true, strlen(gunid)) == 0)
		{
			gun = 39;
			guncharge = ProjectilePrice[0][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "molotov", true, strlen(gunid)) == 0)
		{
			gun = 18;
			guncharge = ProjectilePrice[1][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "grenade", true, strlen(gunid)) == 0)
		{
			gun = 16;
			guncharge = ProjectilePrice[2][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "teargas", true, strlen(gunid)) == 0)
		{
			gun = 17;
			guncharge = ProjectilePrice[3][0]/100*mod;
			ammocharge = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that Projectile.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-99][bTakings] = BizzInfo[location-99][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-99][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-99);
		printf("%s", string);
		PayLog(string);
		return 1;
	}

	if (strcmp(cmd, "/buyheavy", true) == 0)
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		//new gunstring2[256];
		//new gunstring3[256];
		//new gunstring4[256];
		//new gunstring5[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
		if(location < 99 || location == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE,"You are not in a store");
			return 1;
		}
		new mod = (BizzInfo[location-99][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buyheavy [HeavyName] [AmmoAmount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Projectile & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: Heatseeker ($%d) Rpg ($%d) Sniper ($%d) Flamethrower ($%d)",
			HeavyPrice[0][0]/100*mod,HeavyPrice[1][0]/100*mod,HeavyPrice[2][0]/100*mod,HeavyPrice[3][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buyheavy [Heavyname] [ammoamount]");
			return 1;
		}
		new ammo = strval(tmp);

	 	if (strcmp(gunid, "heatseeker", true, strlen(gunid)) == 0)
		{
			gun = 36;
			guncharge = HeavyPrice[0][0]/100*mod;
			ammocharge = HeavyPrice[0][0]*ammo;
		}
		else if (strcmp(gunid, "rpg", true, strlen(gunid)) == 0)
		{
			gun = 35;
			guncharge = HeavyPrice[1][0]/100*mod;
			ammocharge = HeavyPrice[1][0]*ammo;
		}
		else if (strcmp(gunid, "sniper", true, strlen(gunid)) == 0)
		{
			gun = 34;
			guncharge = HeavyPrice[2][0]/100*mod;
			ammocharge = HeavyPrice[2][0]*ammo;
		}
		else if (strcmp(gunid, "flamethrower", true, strlen(gunid)) == 0)
		{
			gun = 37;
			guncharge = HeavyPrice[3][0]/100*mod;
			ammocharge = HeavyPrice[3][0]*ammo;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that Heavy.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-99][bTakings] = BizzInfo[location-99][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-99][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-99);
		printf("%s", string);
		PayLog(string);
		return 1;
	}

	if (strcmp(cmd, "/buymelee", true) == 0)
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		new gunstring2[256];
		//new gunstring3[256];
		//new gunstring4[256];
		//new gunstring5[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
		if(location < 99 || location == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE,"You are not in a store");
			return 1;
		}
		new mod = (BizzInfo[location-99][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buymelee [meleename] [ammoamount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Melee & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: parachute ($%d) golfclub ($%d) nightstick ($%d) knife ($%d) baseballbat ($%d) shovel ($%d) poolcue ($%d)",
			MeleePrice[0][0]/100*mod,MeleePrice[1][0]/100*mod,MeleePrice[2][0]/100*mod,MeleePrice[3][0]/100*mod,MeleePrice[4][0]/100*mod,MeleePrice[5][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			format(gunstring2, 256, "Weapons: flowers ($%d) cane ($%d) katana ($%d)",
			MeleePrice[6][0]/100*mod,MeleePrice[7][0]/100*mod,MeleePrice[8][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buymelee [meleename] [ammoamount]");
			return 1;
		}
		new ammo = strval(tmp);

		if (strcmp(gunid, "parachute", true, strlen(gunid)) == 0)
		{
			gun = 46;
			guncharge = MeleePrice[0][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "golfclub", true, strlen(gunid)) == 0)
		{
			gun = 2;
			guncharge = MeleePrice[1][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "nightstick", true, strlen(gunid)) == 0)
		{
			gun = 3;
			guncharge = MeleePrice[2][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "knife", true, strlen(gunid)) == 0)
		{
			gun = 4;
			guncharge = MeleePrice[3][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "baseballbat", true, strlen(gunid)) == 0)
		{
			gun = 5;
			guncharge = MeleePrice[4][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "shovel", true, strlen(gunid)) == 0)
		{
			gun = 6;
			guncharge = MeleePrice[5][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "poolcue", true, strlen(gunid)) == 0)
		{
			gun = 7;
			guncharge = MeleePrice[6][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "flowers", true, strlen(gunid)) == 0)
		{
			gun = 14;
			guncharge = MeleePrice[7][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
		{
			gun = 15;
			guncharge = MeleePrice[8][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "katana", true, strlen(gunid)) == 0)
		{
			gun = 8;
			guncharge = MeleePrice[9][0]/100*mod;
			ammocharge = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that melee weapon.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-99][bTakings] = BizzInfo[location-99][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-99][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-99);
		printf("%s", string);
		PayLog(string);
		return 1;
	}
	

		if(strcmp(cmd, "/buygun", true) == 0 && IsPlayerConnected(playerid))
		{
		SendClientMessage(playerid, COLOR_GREEN,"===========>-BUYGUN HELP-<===========");//pool
		SendClientMessage(playerid, COLOR_WHITE,"-** Type a command for more help **-");
		SendClientMessage(playerid, COLOR_GRAD3,"- [/buydildo /buyshotgun /buymsg]");
		SendClientMessage(playerid, COLOR_GRAD4,"- [/buyprojectile /buyheavy /buymelee]");
		SendClientMessage(playerid, COLOR_GRAD4,"- [/buypistol /buyrifle]");
        SendClientMessage(playerid, COLOR_GREEN,"________________________________________");
		return 1;
	}*/
	
	

	if (strcmp(cmd, "/buygun", true) == 0 && IsPlayerConnected(playerid))
	{
		new gun;
		new gunid[16];
		new gunstring1[256];
		new gunstring2[256];
		new gunstring3[256];
		new gunstring4[256];
		new gunstring5[256];
		new infostring[256];
		new guncharge;
		new ammocharge;
		new location = PlayerInfo[playerid][pLocal];
		if(location < 102 || location == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE,"You are not in a store");
			return 1;
		}
		new mod = (BizzInfo[location-1000][bPriceMod]);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buygun [gunname] [ammoamount]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"*** Guns & Ammo ***");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			format(gunstring1, 256, "Weapons: parachute ($%d) golfclub ($%d) nightstick ($%d) knife ($%d) baseballbat ($%d) shovel ($%d) poolcue ($%d)",
			GunPrice[0][0]/100*mod,GunPrice[1][0]/100*mod,GunPrice[2][0]/100*mod,GunPrice[3][0]/100*mod,GunPrice[4][0]/100*mod,GunPrice[5][0]/100*mod,GunPrice[6][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring1);
			format(gunstring2, 256, "Weapons: purpledildo ($%d) whitedildo ($%d) longwhitedildo ($%d) whitedildo2 ($%d) flowers ($%d) cane",
			GunPrice[7][0]/100*mod,GunPrice[8][0]/100*mod,GunPrice[9][0]/100*mod,GunPrice[10][0]/100*mod,GunPrice[11][0]/100*mod,GunPrice[12][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring2);
			format(gunstring3, 256, "Weapons: sdpistol ($%d) colt45 ($%d) deagle ($%d) tec9 ($%d)  uzi ($%d) mp5 ($%d)",
			GunPrice[13][0]/100*mod,GunPrice[14][0]/100*mod,GunPrice[15][0]/100*mod,GunPrice[16][0]/100*mod,GunPrice[17][0]/100*mod,GunPrice[18][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring3);
			format(gunstring4, 256, "Weapons: shotgun ($%d) spas12 ($%d)sawnoff ($%d) ak47 ($%d) m4 ($%d) rifle ($%d) flamethrower ($%d)",
			GunPrice[19][0]/100*mod,GunPrice[20][0]/100*mod,GunPrice[21][0]/100*mod,GunPrice[22][0]/100*mod,GunPrice[23][0]/100*mod,GunPrice[24][0]/100*mod);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring4);
			format(gunstring5, 256, "Weapons: pistolammo ($%d) shotgunammo ($%d) smgammo ($%d) assaultammo ($%d) rifleammo ($%d) flamethrowerammo ($%d)",
			GunPrice[25][0],GunPrice[26][0],GunPrice[27][0],GunPrice[28][0],GunPrice[29][0]);
			SendClientMessage(playerid, COLOR_GRAD3, gunstring5);
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /buygun [gunname] [ammoamount]");
			return 1;
		}
		new ammo = strval(tmp);

		if (strcmp(gunid, "parachute", true, strlen(gunid)) == 0)
		{
			gun = 46;
			guncharge = GunPrice[0][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "golfclub", true, strlen(gunid)) == 0)
		{
			gun = 2;
			guncharge = GunPrice[1][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "nightstick", true, strlen(gunid)) == 0)
		{
			gun = 3;
			guncharge = GunPrice[2][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "knife", true, strlen(gunid)) == 0)
		{
			gun = 4;
			guncharge = GunPrice[3][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "baseballbat", true, strlen(gunid)) == 0)
		{
			gun = 5;
			guncharge = GunPrice[4][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "shovel", true, strlen(gunid)) == 0)
		{
			gun = 6;
			guncharge = GunPrice[5][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "poolcue", true, strlen(gunid)) == 0)
		{
			gun = 7;
			guncharge = GunPrice[6][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "purpledildo", true, strlen(gunid)) == 0)
		{
			gun = 10;
			guncharge = GunPrice[7][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "whitedildo", true, strlen(gunid)) == 0)
		{
			gun = 11;
			guncharge = GunPrice[8][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "longwhitedildo", true, strlen(gunid)) == 0)
		{
			gun = 12;
			guncharge = GunPrice[9][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "whitedildo2", true, strlen(gunid)) == 0)
		{
			gun = 13;
			guncharge = GunPrice[10][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "flowers", true, strlen(gunid)) == 0)
		{
			gun = 14;
			guncharge = GunPrice[11][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "cane", true, strlen(gunid)) == 0)
		{
			gun = 15;
			guncharge = GunPrice[12][0]/100*mod;
			ammocharge = 0;
		}
		else if (strcmp(gunid, "sdpistol", true, strlen(gunid)) == 0)
		{
			gun = 23;
			guncharge = GunPrice[13][0]/100*mod;
			ammocharge = GunPrice[25][0]*ammo;
		}
		else if (strcmp(gunid, "colt45", true, strlen(gunid)) == 0)
		{
			gun = 22;
			guncharge = GunPrice[14][0]/100*mod;
			ammocharge = GunPrice[25][0]*ammo;
		}
		else if (strcmp(gunid, "deagle", true, strlen(gunid)) == 0)
		{
			gun = 24;
			guncharge = GunPrice[15][0]/100*mod;
			ammocharge = GunPrice[25][0]*ammo;
		}
		else if (strcmp(gunid, "Tec9", true, strlen(gunid)) == 0)
		{
			gun = 32;
			guncharge = GunPrice[16][0]/100*mod;
			ammocharge = GunPrice[27][0]*ammo;
		}
		else if (strcmp(gunid, "uzi", true, strlen(gunid)) == 0)
		{
			gun = 28;
			guncharge = GunPrice[17][0]/100*mod;
			ammocharge = GunPrice[27][0]*ammo;
		}
		else if (strcmp(gunid, "mp5", true, strlen(gunid)) == 0)
		{
			gun = 29;
			guncharge = GunPrice[18][0]/100*mod;
			ammocharge = GunPrice[27][0]*ammo;
		}
		else if (strcmp(gunid, "shotgun", true, strlen(gunid)) == 0)
		{
			gun = 25;
			guncharge = GunPrice[19][0]/100*mod;
			ammocharge = GunPrice[26][0]*ammo;
		}
		else if (strcmp(gunid, "spas12", true, strlen(gunid)) == 0)
		{
			gun = 27;
			guncharge = GunPrice[20][0]/100*mod;
			ammocharge = GunPrice[26][0]*ammo;
		}
		else if (strcmp(gunid, "sawnoff", true, strlen(gunid)) == 0)
		{
			gun = 26;
			guncharge = GunPrice[21][0]/100*mod;
			ammocharge = GunPrice[26][0]*ammo;
		}
		else if (strcmp(gunid, "ak47", true, strlen(gunid)) == 0)
		{
			gun = 30;
			guncharge = GunPrice[22][0]/100*mod;
			ammocharge = GunPrice[28][0]*ammo;
		}
		else if (strcmp(gunid, "m4", true, strlen(gunid)) == 0)
		{
			gun = 31;
			guncharge = GunPrice[23][0]/100*mod;
			ammocharge = GunPrice[28][0]*ammo;
		}
		else if (strcmp(gunid, "rifle", true, strlen(gunid)) == 0)
		{
			gun = 33;
			guncharge = GunPrice[24][0]/100*mod;
			ammocharge = GunPrice[29][0]*ammo;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "ShopKeeper says: I have never heard of that weapon.");
			return 1;
		}
		if((guncharge+ammocharge)<0||ammocharge<0||guncharge<0)
		{
			SendClientMessage(playerid,COLOR_GRAD2,"Invalid selection. Please try again.");
			return 1;
		}
		if((guncharge+ammocharge) > GetPlayerMoney(playerid))
		{
			format(infostring, 256, "You Dont Have $%d",guncharge+ammocharge);
			SendClientMessage(playerid, COLOR_GRAD3, infostring);
			return 1;
		}
		format(infostring, 256, "You have purchased %s with %d ammo for $%d",gunid,ammo,guncharge+ammocharge);
		SendClientMessage(playerid, COLOR_GRAD3, infostring);
		GiveMoney(playerid,-(guncharge+ammocharge));
		BizzInfo[location-1000][bTakings] = BizzInfo[location-1000][bTakings]+(guncharge+ammocharge);
		BizzInfo[location-1000][bProd]--;
		PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		GivePlayerWeapon(playerid, gun, ammo);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s bought weapons for $%d at biz %d", sendername, (guncharge+ammocharge), location-1000);
		printf("%s", string);
		PayLog(string);
		return 1;
	}
	if((strcmp(cmd,"/upgrade",true)==0 || strcmp(cmd,"/upgrademenu",true)==0)&&IsPlayerConnected(playerid))
	{
	    if(GetPlayerInterior(playerid)==0)
		{
	        SendClientMessage(playerid,COLOR_YELLOW,"You must be in an interior to upgrade your spawn weapons.");
			return 1;
	    }
		if(IsValidMenu(Upgrades)){ShowMenuForPlayer(Upgrades,playerid);TogglePlayerControllable(playerid,0);}
	    return 1;
	}
	if(!strcmp(cmd,"/upgradeammo",true))
	{
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)){return 1;}
		new ammo=strval(tmp);
		tmp=strtok(cmdtext,idx);
		if(!strlen(tmp)){return 1;}
		new amount=strval(tmp);
		if(amount<=PlayerInfo[playerid][gPupgrade]){
		    PlayerInfo[playerid][gPupgrade]=PlayerInfo[playerid][gPupgrade]-amount;
			if(ammo==1){amount=amount*50;PlayerInfo[playerid][pAmmo1]=PlayerInfo[playerid][pAmmo1]+amount;}
			else if(ammo==2){amount=amount*50;PlayerInfo[playerid][pAmmo2]=PlayerInfo[playerid][pAmmo2]+amount;}
			else if(ammo==3){amount=amount*100;PlayerInfo[playerid][pAmmo3]=PlayerInfo[playerid][pAmmo3]+amount;}
			else if(ammo==4){amount=amount*50;PlayerInfo[playerid][pAmmo4]=PlayerInfo[playerid][pAmmo4]+amount;}
			else if(ammo==5){amount=amount*10;PlayerInfo[playerid][pAmmo5]=PlayerInfo[playerid][pAmmo5]+amount;}
			else if(ammo==6){amount=amount*10;PlayerInfo[playerid][pAmmo6]=PlayerInfo[playerid][pAmmo6]+amount;}
			else if(ammo==7){amount=amount*5;PlayerInfo[playerid][pAmmo7]=PlayerInfo[playerid][pAmmo7]+amount;}
			else if(ammo==8){amount=amount*1;PlayerInfo[playerid][pAmmo8]=PlayerInfo[playerid][pAmmo8]+amount;}
			format(string,sizeof(string),"You now have %d upgrade points. %d extra Ammo for gun %d",PlayerInfo[playerid][gPupgrade],amount,ammo);
			SendClientMessage(playerid,COLOR_GRAD1,string);
		}
	    return 1;
	}
//-------------------------------[Login]--------------------------------------------------------------------------
	if (strcmp(cmd, "/login", true) ==0 && IsPlayerConnected(playerid))
	{
		new tmppass[64];
		if (gPlayerLogged[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "SERVER: You are already logged in.");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /login [password]");
			return 1;
		}
		strmid(tmppass, tmp, 0, strlen(cmdtext), 255);
		Encript(tmppass);
		if (gdebug){printf("DEBUG enterd %s", tmppass);}
		OnPlayerLogin(playerid,tmppass);
		return 1;
	}
//[TEST]______________________________________________________________________________

//----------------------------------[ooc]-----------------------------------------------
	if(strcmp(cmd, "/ooc", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/o", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((noooc) && PlayerInfo[playerid][pAdmin] < 101 || FugitiveCore[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "AdmCmd: The ooc chanel has been disabled by admin");
			return 1;
		}
		if(Mute[playerid] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "AdmCmd: You cannot speak, you have been silenced");
			return 0;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/o)oc [ooc chat]");
			return 1;
		}
		format(string, sizeof(string), "(( %s: %s ))", sendername, result);
		OOCOff(TEAM_ORANGE_COLOR,string);
		printf("%s", string);
		return 1;
	}
	if(strcmp(cmd, "/noooc", true) == 0 && IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && (!noooc))
		{
			noooc = 1;
			if(stats)
			{
				realchat = 1;
			}
			BroadCast(COLOR_RED, "AdmCmd: ooc chat channel disabled by admin");
		}
		else if (PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && (noooc))
		{
			noooc = 0;
			if(stats)
			{
				realchat = 0;
			}
			BroadCast(COLOR_RED, "AdmCmd: ooc chat channel enabled by admin");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1,"SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/speedo", true) == 0 && IsPlayerConnected(playerid))
	{
		if (gSpeedo[playerid] == 1)
		{
			gSpeedo[playerid] = 2;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~g~on", 5000, 5);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else if (gSpeedo[playerid] == 2)
		{
			gSpeedo[playerid] = 1;
			GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~r~off", 5000, 5);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "you dont have a speedometer");
		}
		return 1;
	}
//----------------------------------[advertise]-----------------------------------------------
	if(strcmp(cmd, "/advertise", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/ad", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/ad)vertise [advert text]");
			return 1;
		}
		if(Mute[playerid] == 1)
		{
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "AdmCmd: You cannot speak, you have been silenced");
			return 0;
		}
		if ((noooc) && (PlayerInfo[playerid][pAdmin] < 101))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   the advertisment chanel has been disabled by admin");
			return 1;
		}
		if ((!adds) && (PlayerInfo[playerid][pAdmin] < 101))
		{
			format(string, sizeof(string), "   Please try again later %d seconds between adverts",  (addtimer/1000));
			SendClientMessage(playerid, COLOR_GRAD2, string);
			return 1;

		}
		format(string, sizeof(string), "Advertisement: %s, Call %s at %d",  result, sendername,PlayerInfo[playerid][pPnumber]);
		OOCOff(TEAM_GROVE_COLOR,string);
		if (PlayerInfo[playerid][pAdmin] < 101){SetTimer("AddsOn", addtimer, 0);adds = 0;}
		printf("%s", string);
		return 1;
	}
//----------------------------------[togooc]-----------------------------------------------

	if(strcmp(cmd, "/togooc", true) == 0 && IsPlayerConnected(playerid))
	{
		if (!gOoc[playerid])
		{
			gOoc[playerid] = 1;
			SendClientMessage(playerid, COLOR_GRAD2, "   ooc chat channel disabled");
		}
		else if (gOoc[playerid])
		{
			(gOoc[playerid] = 0);
			SendClientMessage(playerid, COLOR_GRAD2, "   ooc chat channel enabled");
		}
		return 1;
	}
//----------------------------------[Emote]-----------------------------------------------
	if(strcmp(cmd, "/me", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /me [action]");
			return 1;
		}
		format(string, sizeof(string), "* %s %s", sendername, result);
		ProxDetector(30.0, playerid, string, COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN,COLOR_GREEN);
		printf("%s", string);
		return 1;
	}
//----------------------------------[Local]-----------------------------------------------
	if(strcmp(cmd, "/local", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/l", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/say", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/l)ocal [local chat]");
			return 1;
		}
		format(string, sizeof(string), "%s Says %s", sendername, result);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		printf("%s", string);
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/shout", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/s", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/s)hout [local chat]");
			return 1;
		}
		format(string, sizeof(string), "%s Shouts %s!!", sendername, result);
		ProxDetector(30.0, playerid, string,COLOR_WHITE,COLOR_WHITE,COLOR_WHITE,COLOR_FADE1,COLOR_FADE2);
		ApplyAnimation(playerid,"ON_LOOKERS", "shout_in",5.0,0,0,0,0,-1);
		printf("%s", string);
		return 1;
	}
//----------------------------------[Shout]-----------------------------------------------
	if(strcmp(cmd, "/megaphone", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/m", true) == 0 && IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/m)egaphone [megaphone chat]");
			return 1;
		}
		if (gTeam[playerid] != 2)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   you are not part of a team");
			return 1;
		}
		if(!IsACopCar(tmpcar))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   you are not in a police vehicle");
			return 1;
		}
		format(string, sizeof(string), ">> POLICE: %s : %s <<", sendername, result);
		ProxDetector(60.0, playerid, string,TEAM_BLUE_COLOR,TEAM_BLUE_COLOR,TEAM_BLUE_COLOR,TEAM_BLUE_COLOR,TEAM_BLUE_COLOR);
		printf("%s", string);
		return 1;
	}
//----------------------------------[Team]-----------------------------------------------
	if(strcmp(cmd, "/codes", true) == 0 && IsPlayerConnected(playerid))
	{
        if (PlayerInfo[playerid][pRank] >= 10)
        {
			SendClientMessage(playerid, TEAM_BLUE_COLOR,"_________> Law Enforcement Codes <___________");
			SendClientMessage(playerid, TEAM_BLUE_COLOR,"*** Police Code For Law Enforcement Radio ***");
        	SendClientMessage(playerid, COLOR_GRAD5,"10-1- In service | 10-2- Out of service");
        	SendClientMessage(playerid, COLOR_GRAD4,"10-4- Understood Message | 10-33- Repeat last message");
        	SendClientMessage(playerid, COLOR_GRAD3,"10-25 Assistance Request | 10-55- Return to headquarters");
        	SendClientMessage(playerid, COLOR_GRAD2,"10-50- Officer on patrol  | 10-85- Officer called away");
        	SendClientMessage(playerid, COLOR_GRAD1,"10-80- Officer off patrol | 10-15- Vehicle Stop");
        	SendClientMessage(playerid, COLOR_GRAD1,"10-99 Special Emergency| 10-77- Major Assistance");
        	SendClientMessage(playerid, TEAM_BLUE_COLOR,"______________________________________________________");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE,"	You are not a law enforcement.");
		}
		return 1;
	}
	if(strcmp(cmd, "/10-4", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pRank] == 11 || PlayerInfo[playerid][pRank] == 12 || PlayerInfo[playerid][pRank] == 13)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Trainee %s : 10-4 Acknowledged ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 21 || PlayerInfo[playerid][pRank] == 22 || PlayerInfo[playerid][pRank] == 23)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Officer %s : 10-4 Acknowledged ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 31 || PlayerInfo[playerid][pRank] == 32 || PlayerInfo[playerid][pRank] == 33)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Corporal %s : 10-4 Acknowledged ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 41 || PlayerInfo[playerid][pRank] == 42 || PlayerInfo[playerid][pRank] == 43)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Detective %s : 10-4 Acknowledged ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 51 || PlayerInfo[playerid][pRank] == 52 || PlayerInfo[playerid][pRank] == 53)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Sergeant %s : 10-4 Acknowledged ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 61 || PlayerInfo[playerid][pRank] == 62 || PlayerInfo[playerid][pRank] == 63)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Lieutenant %s : 10-4 Acknowledged ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 71 || PlayerInfo[playerid][pRank] == 72 || PlayerInfo[playerid][pRank] == 73)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Captain %s : 10-4 Acknowledged ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 80 || PlayerInfo[playerid][pRank] == 81)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Cheif %s : 10-4 Acknowledged ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "   You are not a Law Enforcement Officer.");
		}
		return 1;
	}
	if(strcmp(cmd, "/10-25", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pRank] == 11 || PlayerInfo[playerid][pRank] == 12 || PlayerInfo[playerid][pRank] == 13)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Trainee %s : 10-25 Assistance Request ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 21 || PlayerInfo[playerid][pRank] == 22 || PlayerInfo[playerid][pRank] == 23)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Officer %s : 10-25 Assistance Request ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 31 || PlayerInfo[playerid][pRank] == 32 || PlayerInfo[playerid][pRank] == 33)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Corporal %s : 10-25 Assistance Request ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 41 || PlayerInfo[playerid][pRank] == 42 || PlayerInfo[playerid][pRank] == 43)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Detective %s : 10-25 Assistance Request ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 51 || PlayerInfo[playerid][pRank] == 52 || PlayerInfo[playerid][pRank] == 53)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Sergeant %s : 10-25 Assistance Request ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 61 || PlayerInfo[playerid][pRank] == 62 || PlayerInfo[playerid][pRank] == 63)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Lieutenant %s : 10-25 Assistance Request ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 71 || PlayerInfo[playerid][pRank] == 72 || PlayerInfo[playerid][pRank] == 73)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Captain %s : 10-25 Assistance Request ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else if(PlayerInfo[playerid][pRank] == 80 || PlayerInfo[playerid][pRank] == 81)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Cheif %s : 10-25 Assistance Request ** ", sendername);
			SendTeamBeepMessage(2, TEAM_BLUE_COLOR, string);
			printf("%s", string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "   You are not a Law Enforcement Officer.");
		}
		return 1;
	}
//-----------------------------------[Radio]------------------------------------------------------------------------------
	if(strcmp(cmd, "/radio", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/r", true) == 0 && IsPlayerConnected(playerid))//rankradio
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/r)adio [radio chat]");
			return 1;
		}
		if(PoliceRadio[playerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "	You need to purchase a radio.");
			return 1;
		}
  		if (gRadio[playerid] == 7295)//LSPD
		{
			if(PlayerInfo[playerid][pRank] == 80)
			{
				format(string, sizeof(string), "*^* SAPD Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 73)
			{
				format(string, sizeof(string), "*^* LVPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 63)
			{
				format(string, sizeof(string), "*^* LVPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 53)
			{
				format(string, sizeof(string), "*^* LVPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 43)
			{
				format(string, sizeof(string), "*^* LVPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 33)
			{
				format(string, sizeof(string), "*^* LVPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 23)
			{
				format(string, sizeof(string), "*^* LVPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 13)
			{
				format(string, sizeof(string), "*^* LVPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 72)
			{
				format(string, sizeof(string), "*^* SFPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 62)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 52)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 42)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 32)
			{
				format(string, sizeof(string), "*^* SFPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 22)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 12)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 71)
			{
				format(string, sizeof(string), "*^* LSPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 61)
			{
				format(string, sizeof(string), "*^* LSPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 51)
			{
				format(string, sizeof(string), "*^* LSPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 41)
			{
				format(string, sizeof(string), "*^* LSPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 31)
			{
				format(string, sizeof(string), "*^* LSPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 21)
			{
				format(string, sizeof(string), "*^* LSPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 11)
			{
				format(string, sizeof(string), "*^* LSPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 70)
			{
				format(string, sizeof(string), "*^* ESU Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 10)
			{
				format(string, sizeof(string), "*^* ESU Technician %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "*^* %s: %s, over.*^*", sendername, result);
   			}
			SendRadioMessage(7295, COLOR_LSPD, string);
			printf("%s", string);
			return 1;
		}
		else if (gRadio[playerid] == 4055)//SFPD
		{
			if(PlayerInfo[playerid][pRank] == 80)
			{
				format(string, sizeof(string), "*^* SAPD Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 73)
			{
				format(string, sizeof(string), "*^* LVPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 63)
			{
				format(string, sizeof(string), "*^* LVPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 53)
			{
				format(string, sizeof(string), "*^* LVPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 43)
			{
				format(string, sizeof(string), "*^* LVPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 33)
			{
				format(string, sizeof(string), "*^* LVPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 23)
			{
				format(string, sizeof(string), "*^* LVPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 13)
			{
				format(string, sizeof(string), "*^* LVPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 72)
			{
				format(string, sizeof(string), "*^* SFPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 62)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 52)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 42)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 32)
			{
				format(string, sizeof(string), "*^* SFPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 22)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 12)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 71)
			{
				format(string, sizeof(string), "*^* LSPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 61)
			{
				format(string, sizeof(string), "*^* LSPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 51)
			{
				format(string, sizeof(string), "*^* LSPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 41)
			{
				format(string, sizeof(string), "*^* LSPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 31)
			{
				format(string, sizeof(string), "*^* LSPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 21)
			{
				format(string, sizeof(string), "*^* LSPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 11)
			{
				format(string, sizeof(string), "*^* LSPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 70)
			{
				format(string, sizeof(string), "*^* ESU Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 10)
			{
				format(string, sizeof(string), "*^* ESU Technician %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "*^* %s: %s, over.*^*", sendername, result);
   			}
			SendRadioMessage(4055, COLOR_SFPD, string);
			printf("%s", string);
			return 1;
		}
		else if (gRadio[playerid] == 7801)//LVPD
		{
			if(PlayerInfo[playerid][pRank] == 80)
			{
				format(string, sizeof(string), "*^* SAPD Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 73)
			{
				format(string, sizeof(string), "*^* LVPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 63)
			{
				format(string, sizeof(string), "*^* LVPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 53)
			{
				format(string, sizeof(string), "*^* LVPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 43)
			{
				format(string, sizeof(string), "*^* LVPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 33)
			{
				format(string, sizeof(string), "*^* LVPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 23)
			{
				format(string, sizeof(string), "*^* LVPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 13)
			{
				format(string, sizeof(string), "*^* LVPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 72)
			{
				format(string, sizeof(string), "*^* SFPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 62)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 52)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 42)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 32)
			{
				format(string, sizeof(string), "*^* SFPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 22)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 12)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 71)
			{
				format(string, sizeof(string), "*^* LSPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 61)
			{
				format(string, sizeof(string), "*^* LSPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 51)
			{
				format(string, sizeof(string), "*^* LSPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 41)
			{
				format(string, sizeof(string), "*^* LSPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 31)
			{
				format(string, sizeof(string), "*^* LSPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 21)
			{
				format(string, sizeof(string), "*^* LSPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 11)
			{
				format(string, sizeof(string), "*^* LSPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 70)
			{
				format(string, sizeof(string), "*^* ESU Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 10)
			{
				format(string, sizeof(string), "*^* ESU Technician %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "*^* %s: %s, over.*^*", sendername, result);
   			}
			SendRadioMessage(7801, COLOR_LVPD, string);
			printf("%s", string);
			return 1;
		}
		else if (gRadio[playerid] == 9555)//SAPD
		{
			if(PlayerInfo[playerid][pRank] == 80)
			{
				format(string, sizeof(string), "*^* SAPD Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 73)
			{
				format(string, sizeof(string), "*^* LVPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 63)
			{
				format(string, sizeof(string), "*^* LVPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 53)
			{
				format(string, sizeof(string), "*^* LVPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 43)
			{
				format(string, sizeof(string), "*^* LVPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 33)
			{
				format(string, sizeof(string), "*^* LVPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 23)
			{
				format(string, sizeof(string), "*^* LVPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 13)
			{
				format(string, sizeof(string), "*^* LVPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 72)
			{
				format(string, sizeof(string), "*^* SFPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 62)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 52)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 42)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 32)
			{
				format(string, sizeof(string), "*^* SFPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 22)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 12)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 71)
			{
				format(string, sizeof(string), "*^* LSPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 61)
			{
				format(string, sizeof(string), "*^* LSPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 51)
			{
				format(string, sizeof(string), "*^* LSPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 41)
			{
				format(string, sizeof(string), "*^* LSPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 31)
			{
				format(string, sizeof(string), "*^* LSPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 21)
			{
				format(string, sizeof(string), "*^* LSPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 11)
			{
				format(string, sizeof(string), "*^* LSPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 70)
			{
				format(string, sizeof(string), "*^* ESU Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 10)
			{
				format(string, sizeof(string), "*^* ESU Technician %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "*^* %s: %s, over.*^*", sendername, result);
   			}
			SendRadioMessage(9555, COLOR_SAPD, string);
			printf("%s", string);
			return 1;
		}
		else if (gRadio[playerid] == 9420)//ESU
		{
			if(PlayerInfo[playerid][pRank] == 80)
			{
				format(string, sizeof(string), "*^* SAPD Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 73)
			{
				format(string, sizeof(string), "*^* LVPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 63)
			{
				format(string, sizeof(string), "*^* LVPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 53)
			{
				format(string, sizeof(string), "*^* LVPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 43)
			{
				format(string, sizeof(string), "*^* LVPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 33)
			{
				format(string, sizeof(string), "*^* LVPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 23)
			{
				format(string, sizeof(string), "*^* LVPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 13)
			{
				format(string, sizeof(string), "*^* LVPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 72)
			{
				format(string, sizeof(string), "*^* SFPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 62)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 52)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 42)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 32)
			{
				format(string, sizeof(string), "*^* SFPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 22)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 12)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 71)
			{
				format(string, sizeof(string), "*^* LSPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 61)
			{
				format(string, sizeof(string), "*^* LSPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 51)
			{
				format(string, sizeof(string), "*^* LSPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 41)
			{
				format(string, sizeof(string), "*^* LSPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 31)
			{
				format(string, sizeof(string), "*^* LSPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 21)
			{
				format(string, sizeof(string), "*^* LSPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 11)
			{
				format(string, sizeof(string), "*^* LSPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 70)
			{
				format(string, sizeof(string), "*^* ESU Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 10)
			{
				format(string, sizeof(string), "*^* ESU Technician %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "*^* %s: %s, over.*^*", sendername, result);
   			}
			SendRadioMessage(9420, TEAM_CYAN_COLOR, string);
			printf("%s", string);
			return 1;
		}
		else if (gRadio[playerid] == 4705)//DETECTIVE Channel
		{
			if(PlayerInfo[playerid][pRank] == 80)
			{
				format(string, sizeof(string), "*^* SAPD Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 73)
			{
				format(string, sizeof(string), "*^* LVPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 63)
			{
				format(string, sizeof(string), "*^* LVPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 53)
			{
				format(string, sizeof(string), "*^* LVPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 43)
			{
				format(string, sizeof(string), "*^* LVPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 33)
			{
				format(string, sizeof(string), "*^* LVPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 23)
			{
				format(string, sizeof(string), "*^* LVPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 13)
			{
				format(string, sizeof(string), "*^* LVPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 72)
			{
				format(string, sizeof(string), "*^* SFPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 62)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 52)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 42)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 32)
			{
				format(string, sizeof(string), "*^* SFPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 22)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 12)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 71)
			{
				format(string, sizeof(string), "*^* LSPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 61)
			{
				format(string, sizeof(string), "*^* LSPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 51)
			{
				format(string, sizeof(string), "*^* LSPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 41)
			{
				format(string, sizeof(string), "*^* LSPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 31)
			{
				format(string, sizeof(string), "*^* LSPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 21)
			{
				format(string, sizeof(string), "*^* LSPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 11)
			{
				format(string, sizeof(string), "*^* LSPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 70)
			{
				format(string, sizeof(string), "*^* ESU Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 10)
			{
				format(string, sizeof(string), "*^* ESU Technician %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "*^* %s: %s, over.*^*", sendername, result);
   			}
			SendRadioMessage(4705, COLOR_DTPD, string);
			printf("%s", string);
			return 1;
		}
		else if (gRadio[playerid] == 6205)// FD Channel1
		{
			if(PlayerInfo[playerid][pRank] == 80)
			{
				format(string, sizeof(string), "*^* SAPD Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 73)
			{
				format(string, sizeof(string), "*^* LVPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 63)
			{
				format(string, sizeof(string), "*^* LVPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 53)
			{
				format(string, sizeof(string), "*^* LVPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 43)
			{
				format(string, sizeof(string), "*^* LVPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 33)
			{
				format(string, sizeof(string), "*^* LVPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 23)
			{
				format(string, sizeof(string), "*^* LVPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 13)
			{
				format(string, sizeof(string), "*^* LVPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 72)
			{
				format(string, sizeof(string), "*^* SFPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 62)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 52)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 42)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 32)
			{
				format(string, sizeof(string), "*^* SFPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 22)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 12)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 71)
			{
				format(string, sizeof(string), "*^* LSPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 61)
			{
				format(string, sizeof(string), "*^* LSPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 51)
			{
				format(string, sizeof(string), "*^* LSPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 41)
			{
				format(string, sizeof(string), "*^* LSPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 31)
			{
				format(string, sizeof(string), "*^* LSPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 21)
			{
				format(string, sizeof(string), "*^* LSPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 11)
			{
				format(string, sizeof(string), "*^* LSPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 70)
			{
				format(string, sizeof(string), "*^* ESU Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 10)
			{
				format(string, sizeof(string), "*^* ESU Technician %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "*^* %s: %s, over.*^*", sendername, result);
   			}
			SendRadioMessage(6205, COLOR_FDSA, string);
			printf("%s", string);
			return 1;
 		}
		else if (gRadio[playerid] == 1350)//Taxi Channel
		{
			if(PlayerInfo[playerid][pRank] == 80)
			{
				format(string, sizeof(string), "*^* SAPD Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 73)
			{
				format(string, sizeof(string), "*^* LVPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 63)
			{
				format(string, sizeof(string), "*^* LVPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 53)
			{
				format(string, sizeof(string), "*^* LVPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 43)
			{
				format(string, sizeof(string), "*^* LVPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 33)
			{
				format(string, sizeof(string), "*^* LVPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 23)
			{
				format(string, sizeof(string), "*^* LVPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 13)
			{
				format(string, sizeof(string), "*^* LVPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 72)
			{
				format(string, sizeof(string), "*^* SFPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 62)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 52)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 42)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 32)
			{
				format(string, sizeof(string), "*^* SFPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 22)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 12)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 71)
			{
				format(string, sizeof(string), "*^* LSPD Captain %s: %s, over.*^*", sendername, result);
   			}
            else if(PlayerInfo[playerid][pRank] == 61)
			{
				format(string, sizeof(string), "*^* LSPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 51)
			{
				format(string, sizeof(string), "*^* LSPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 41)
			{
				format(string, sizeof(string), "*^* LSPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 31)
			{
				format(string, sizeof(string), "*^* LSPD Corporal %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 21)
			{
				format(string, sizeof(string), "*^* LSPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 11)
			{
				format(string, sizeof(string), "*^* LSPD Trainee %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 70)
			{
				format(string, sizeof(string), "*^* ESU Chief %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 10)
			{
				format(string, sizeof(string), "*^* ESU Technician %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "*^* %s: %s, over.*^*", sendername, result);
   			}
			SendRadioMessage(1350, COLOR_TAXI, string);
			printf("%s", string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "	Nothing but static, Check your frequency.");
			return 1;
		}
	}
//----------------------------------[offduty]-----------------------------------------------
	if(strcmp(cmd, "/duty", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(forceteam && CopCheck(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   you are not a cop.");
			return 1;
		}
		if (gTeam[playerid] == 2)
		{
			if (PlayerToPoint(5, playerid,201.41,168.28,1003.02) || PlayerInfo[playerid][pLocal] != 255)
			{                           
				gTeam[playerid] = 3;
				SetPlayerToTeamColor(playerid);
				format(string, sizeof(string), "* %s Puts a gun and a badge in a locker", sendername);
				SetPlayerWeapons(playerid);
				Phandcuffs[playerid] = 0;
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   you are not in a locker room");
				return 1;
			}
		}
		if (gTeam[playerid] == 3)
		{
			if (PlayerToPoint(3, playerid,201.41,168.28,1003.02) || PlayerInfo[playerid][pLocal] != 255)
			{
				gTeam[playerid] = 2;
				SetPlayerToTeamColor(playerid);
				Phandcuffs[playerid] = 1;
				if(PlayerInfo[playerid][pRank] == 7)
				{
					format(string, sizeof(string), "* Chief %s Takes a sidearm and a badge from his desk", sendername);
				}
				else
				{
					format(string, sizeof(string), "* %s Takes a gun and a badge from their locker", sendername);
				}
				if(PlayerInfo[playerid][pRank] == 6)
                {
					format(string, sizeof(string), "* Agent %s Takes a Sig Sauer p227 and a Id Card from their locker", sendername);
				}
				else
				{
					format(string, sizeof(string), "* %s Takes a gun and a badge from their locker", sendername);
				}
                if(PlayerInfo[playerid][pRank] == 5)
                {
					format(string, sizeof(string), "* Leuitenant %s Takes a gun, uniform, cap and a badge from their locker", sendername);
				}
				else
				{
					format(string, sizeof(string), "* %s Takes a gun and a badge from their locker", sendername);
				}
                if(PlayerInfo[playerid][pRank] == 4)
                {
					format(string, sizeof(string), "* Detective %s Takes a gun and a shield from their locker", sendername);
				}
				else
				{
					format(string, sizeof(string), "* %s Takes a gun and a badge from their locker", sendername);
				}
                if(PlayerInfo[playerid][pRank] == 3)
                {
					format(string, sizeof(string), "* Sergeant %s Takes a Glock, Clipboard and a badge from their locker", sendername);
				}
				else
				{
					format(string, sizeof(string), "* %s Takes a gun and a badge from their locker", sendername);
				}
                if(PlayerInfo[playerid][pRank] == 2)
                {
					format(string, sizeof(string), "* Officer %s Takes a Beretta 9mm and a badge from their locker", sendername);
				}
				else
				{
					format(string, sizeof(string), "* %s Takes a gun and a badge from their locker", sendername);
				}
                if(PlayerInfo[playerid][pRank] == 1)
                {
					format(string, sizeof(string), "* Trainee %s Takes a .38 Revolver and a id Card from their locker", sendername);
				}
				else
				{
					format(string, sizeof(string), "* %s Takes a gun and a badge from their locker", sendername);
				}
				SetPlayerWeapons(playerid);
				ProxDetector(30.0, playerid, string, COLOR_BLUE,COLOR_BLUE,COLOR_BLUE,COLOR_BLUE,COLOR_BLUE);
				printf("%s", string);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are not in a locker room");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are not part of a team");
			return 1;
		}
		return 1;
	}
//----------------------------------[departments]-----------------------------------------------
/*	if(strcmp(cmd, "/departments", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/d", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/d)epartments [Message to All Bands]");
			return 1;
		}
		if (gTeam[playerid] == 2)
		{
            if(PlayerInfo[playerid][pRank] == 7)
			{
				format(string, sizeof(string), "*^* SFPD Chief %s: %s, over.*^*", sendername, result);
            }
            else if(PlayerInfo[playerid][pRank] == 6)
			{
				format(string, sizeof(string), "*^* FBI Agent %s: %s, over.*^*", sendername, result);
   			}
			else if(PlayerInfo[playerid][pRank] == 5)
			{
				format(string, sizeof(string), "*^* SFPD Leuitenant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 4)
			{
				format(string, sizeof(string), "*^* SFPD Detective %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 3)
			{
				format(string, sizeof(string), "*^* SFPD Sergeant %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 2)
			{
				format(string, sizeof(string), "*^* SFPD Officer %s: %s, over.*^*", sendername, result);
   			}
   			else if(PlayerInfo[playerid][pRank] == 1)
			{
				format(string, sizeof(string), "*^* SFPD Trainee %s: %s, over.*^*", sendername, result);
   			}
       		else
			{
				format(string, sizeof(string), "* %s: %s, over.*", sendername, result);
   			}
			SendTeamMessage(2, COLOR_DGREEN, string);
			SendTeamMessage(1, COLOR_DGREEN, string);
			printf("%s", string);
			return 1;
		}
		if (gTeam[playerid] == 1)
		{
			if(PlayerInfo[playerid][pRank] == 7)
			{
				format(string, sizeof(string), "** EMT Chief %s: %s, over. **", sendername, result);
			}
			else
			{
				format(string, sizeof(string), "** EMT Paramedic %s: %s, over. **", sendername, result);
			}
			SendTeamMessage(2, COLOR_DGREEN, string);
			SendTeamMessage(1, COLOR_DGREEN, string);
			printf("%s", string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   you are not part of a team");
			return 1;
		}
		return 1;
	}*/
//----------------------------------[mdc]-----------------------------------------------
	if(strcmp(cmd, "/mdc", true) == 0 && IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /mdc [playerid/PartOfName]");
			SendClientMessage(playerid, COLOR_GRAD2, "Access Law Enforcement Records");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		GetPlayerName(giveplayerid, sendername, sizeof(sendername));
		if(!IsACopCar(tmpcar))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are not in a police vehicle");
			return 1;
		}
		SendClientMessage(playerid, TEAM_BLUE_COLOR,"______-= SAN ANDREAS POLICE MDC =-_______");
		format(string, sizeof(string), "Name : %s", sendername);
		SendClientMessage(playerid, COLOR_WHITE,string);
		format(string, sizeof(string), "Crime : %s  Reported : %s", PlayerCrime[giveplayerid][pAccusedof],PlayerCrime[giveplayerid][pAccusing]);
		SendClientMessage(playerid, COLOR_GRAD2,string);
		//format(string, sizeof(string), "Claimant : %s", PlayerCrime[giveplayerid][pVictim]);
		//SendClientMessage(playerid, COLOR_GRAD3,string);
		//format(string, sizeof(string), "Reported : %s", PlayerCrime[giveplayerid][pAccusing]);
		//SendClientMessage(playerid, COLOR_GRAD3,string);
		format(string, sizeof(string), "Accused : %s", PlayerCrime[giveplayerid][pBplayer]);
		SendClientMessage(playerid, COLOR_GRAD4,string);
		format(string, sizeof(string), "Phone : #%d  Tickets : $%d", PlayerInfo[playerid][pPnumber],PlayerInfo[playerid][pTick]);
		SendClientMessage(playerid, COLOR_GRAD4,string);
		//format(string, sizeof(string), "Tickets : $%d", PlayerInfo[playerid][pTick]);
		//SendClientMessage(playerid, COLOR_GRAD4,string);
        new house = PlayerInfo[playerid][pPhousekey];
		if(house >= 1 && house <= 34)
		{
			format(string, sizeof(string), "Residence: San Fierro, House:#%d", PlayerInfo[giveplayerid][pPhousekey]);
			SendClientMessage(playerid, COLOR_GRAD5,string);
		}
		else if(house >= 35 && house <= 68)
		{
			format(string, sizeof(string), "Residence: Los Santos, House: #%d", PlayerInfo[giveplayerid][pPhousekey]);
			SendClientMessage(playerid, COLOR_GRAD5,string);
		}
		else if(house >= 69 && house <= 102)
		{
			format(string, sizeof(string), "Residence: Las Venturas, House: #%d", PlayerInfo[giveplayerid][pPhousekey]);
			SendClientMessage(playerid, COLOR_GRAD5,string);
		}
 		else
		{
			SendClientMessage(playerid, COLOR_RED, "Residence: Player Does Not Reside in this State");
		}
		if(PlayerInfo[giveplayerid][pLicA] >= 100000)
		{
			format(string, sizeof(string), "A Class License : ID# %d", PlayerInfo[giveplayerid][pLicA]);
			SendClientMessage(playerid, COLOR_GRAD5,string);
		}
  		else
		{
			SendClientMessage(playerid, COLOR_RED, "A Class License : No License or Suspended");
		}
		if(PlayerInfo[giveplayerid][pLicB] >= 100000)
		{
   			format(string, sizeof(string), "B Class License : ID# %d", PlayerInfo[giveplayerid][pLicB]);
			SendClientMessage(playerid, COLOR_GRAD5,string);
		}
  		else
		{
            SendClientMessage(playerid, COLOR_RED, "B Class License : No License or Suspended");
		}
		//format(string, sizeof(string), "B Class License : %d", PlayerInfo[giveplayerid][pLicB]);
		//SendClientMessage(playerid, COLOR_GRAD6,string);
		SendClientMessage(playerid, TEAM_BLUE_COLOR,"________________________________________");
		printf("%s", string);
		return 1;
	}
//----------------------------------[SetCrim]-----------------------------------------------
	if(strcmp(cmd, "/suspect", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/su", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/su)spect [playerid/PartOfName] [crime discription]");
			return 1;
		}
		if (gTeam[playerid] == 2)
		{
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if(JailTime[giveplayerid] != 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   That person can't be a suspect right now.");
			printf("JailTime[giveplayerid](%d) gTeam[giveplayerid](%d)",JailTime[giveplayerid],gTeam[giveplayerid]);
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
			{
				if (gTeam[giveplayerid] != 2)
				{
					if (gTeam[giveplayerid] >= 4)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   that person is already a suspect");
						return 1;
					}
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/su)spect [playerid/PartOfName] [crime text]");
						return 1;
					}
					if(FlashTime[playerid] == 0){FlashTime[playerid] = 10;}
					if(FlashTime[giveplayerid] == 0){FlashTime[giveplayerid] = 10;}
					SetPlayerCriminal(giveplayerid,playerid, result,0,0);
					JailTime[giveplayerid] = -60;
					//printf("%s: %s", giveplayer, result);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You Cannot Suspect a Police Officer.");
				}
			}
			else
			{
					format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are not Law Enforcement.");
		}
	}
//----------------------------------[SetFree]-----------------------------------------------
	if(strcmp(cmd, "/free", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /free [playerid/PartOfName]");
			return 1;
		}
		if (gTeam[playerid] == 2)
		{
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if (IsPlayerConnected(giveplayerid))
			{
				if (gTeam[giveplayerid] == 4)
				{
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /free [playerid/PartOfName] [reason text]");
						return 1;
					}
					if (gPublicEnemy == giveplayerid)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   You do not have the power to do that");
						return 1;
					}
					SetPlayerFree(giveplayerid,playerid, result,0,0);
					//printf("%s: %s", giveplayer, result);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "--This person is free--");
				}
			}
			else
			{
					format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "GAME:you are not a cop");
		}
	}
//----------------------------------[SetFree]-----------------------------------------------
	if(strcmp(cmd, "/release", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /release [playerid/PartOfName]");
			return 1;
		}
		if (gTeam[playerid] == 2 || PlayerInfo[playerid][pRank] >= 2)
		{
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if (IsPlayerConnected(giveplayerid))
			{
				if (gTeam[giveplayerid] == 4)
				{
					GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					new length = strlen(cmdtext);
					while ((idx < length) && (cmdtext[idx] <= ' '))
					{
						idx++;
					}
					new offset = idx;
					new result[64];
					while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
					{
						result[idx - offset] = cmdtext[idx];
						idx++;
					}
					result[idx - offset] = EOS;
					if(!strlen(result))
					{
						SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /release [playerid/PartOfName] [reason text]");
						return 1;
					}
					if (gPublicEnemy == giveplayerid)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   You do not have the power to do that");
						return 1;
					}
					SetPlayerFree(giveplayerid,playerid, result,0,0);
					//printf("%s: %s", giveplayer, result);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD2, "-< This person is free >-");
				}
			}
			else
			{
					format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "SERVER: You are not a cop");
		}
	}
	if(strcmp(cmd, "/radioactivitysuperpowermultiply", true) == 0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, 0xFF1493FF, "%s %s %s");
		SendClientMessage(playerid, 0xFF1493FF, "%s%s%s");
		SendClientMessage(playerid, 0xFF1493FF, "/%s%s%s");
		return 1;
	}
//----------------------------------[LOCK]-----------------------------------------------
	if(strcmp(cmd, "/lock", true) == 0 && IsPlayerConnected(playerid))
	{
		new carid;
		if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
		{
			if(gLastCar[playerid] == 0 && PlayerInfo[playerid][pPhousekey] == 255)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "SERVER:You dont have a Vehicle.");
				return 1;
			}
			else if(gLastCar[playerid] != 0 && gLastCar[playerid] != PlayerInfo[playerid][pPhousekey]+1)
			{
				if (HireCar[playerid] != gLastCar[playerid] && HireCar[playerid] != 999)
				{
					gLastDriver[HireCar[playerid]] = 300;
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
				}
				HireCar[playerid] = gLastCar[playerid];
			}
		}
		if (PlayerInfo[playerid][pPhousekey] == 255)
		{
			if(HireCar[playerid] == 999)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "SERVER:You dont have a Vehicle.");
				return 1;
			}
		}
		carid = PlayerInfo[playerid][pPhousekey]+1;
		if(HireCar[playerid] != 999 && !SwitchKey[playerid])
		{
			carid = HireCar[playerid];
		}
		//new driver = gLastDriver[carid];
		new lockstatus = gCarLock[carid];
		new Float:cx,Float:cy,Float:cz;
		GetVehiclePos(carid, cx, cy, cz);
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			//printf("House :%d  x:%f y:%f z:%f",i,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]) || PlayerToPoint(3, playerid,HouseInfo[i][hExitx], HouseInfo[i][hExity], HouseInfo[i][hExitz]))
			{
				//printf("House :%d",i);
				if(PlayerInfo[playerid][pPhousekey] == i)
				{
					//printf("pPhousekey :%d  hLock :%d",PlayerInfo[playerid][pPhousekey] ,HouseInfo[i][hLock]);
					if(HouseInfo[i][hLock] == 1)
					{
						HouseInfo[i][hLock] = 0;
						GameTextForPlayer(playerid, "~w~Door ~b~Unlocked", 5000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					if(HouseInfo[i][hLock] == 0)
					{
						HouseInfo[i][hLock] = 1;
						GameTextForPlayer(playerid, "~w~Door ~r~Locked", 5000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
				}
				else
				{
					GameTextForPlayer(playerid, "~~You Dont Have A Key", 5000, 4);
					return 1;
				}
			}
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			//printf("House :%d  x:%f y:%f z:%f",i,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);
			if (PlayerToPoint(3, playerid,BizzInfo[i][bEntrancex], BizzInfo[i][bEntrancey], BizzInfo[i][bEntrancez]) || PlayerToPoint(3, playerid,BizzInfo[i][bExitx], BizzInfo[i][bExity], BizzInfo[i][bExitz]))
			{
				//printf("House :%d",i);
				if(PlayerInfo[playerid][pPbiskey] == i)
				{
					//printf("pPhousekey :%d  hLock :%d",PlayerInfo[playerid][pPhousekey] ,HouseInfo[i][hLock]);
					if(BizzInfo[i][bLock] == 1)
					{
						BizzInfo[i][bLock] = 0;
						GameTextForPlayer(playerid, "~w~Bussiness ~b~Open", 5000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					if(BizzInfo[i][bLock] == 0)
					{
						BizzInfo[i][bLock] = 1;
						GameTextForPlayer(playerid, "~w~Bussiness ~r~Closed", 5000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
				}
				else
				{
					GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 5);
					return 1;
				}
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			//printf("House :%d  x:%f y:%f z:%f",i,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]);
			if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntrancex], SBizzInfo[i][sbEntrancey], SBizzInfo[i][sbEntrancez]))
			{
				//printf("House :%d",i);
				if(PlayerInfo[playerid][pPbiskey] == i+100)
				{
					//printf("pPhousekey :%d  hLock :%d",PlayerInfo[playerid][pPhousekey] ,HouseInfo[i][hLock]);
					if(SBizzInfo[i][sbLock] == 1)
					{
						SBizzInfo[i][sbLock] = 0;
						GameTextForPlayer(playerid, "~w~Bussiness ~b~Open", 5000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
					if(SBizzInfo[i][sbLock] == 0)
					{
						SBizzInfo[i][sbLock] = 1;
						GameTextForPlayer(playerid, "~w~Bussiness ~r~Closed", 5000, 4);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
				}
				else
				{
					GameTextForPlayer(playerid, "~r~You Dont Have A Key", 5000, 5);
					return 1;
				}
			}
		}
		switch (lockstatus)
		{
			case 0:
			{
				/*
				if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
				{
					if(driver != playerid)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   You dont have a Vehicle.");
						return 1;
					}
					GameTextForPlayer(playerid, "~w~Vehicle ~r~Locked", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
					LockCar(carid);
					return 1;
				}
				*/
				if(HireCar[playerid] == 999 && PlayerInfo[playerid][pPhousekey] == 255)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You dont have a Vehicle");
					return 1;
				}
				if(HireCar[playerid] == carid && !SwitchKey[playerid])
				{
					GameTextForPlayer(playerid, "~w~Current Vehicle ~r~Locked", 5000, 4);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
					LockCar(carid);
				}
				else if (PlayerInfo[playerid][pPhousekey] == carid-1)
				{
					GameTextForPlayer(playerid, "~w~House Vehicle ~r~Locked", 5000, 4);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 1;
					LockCar(carid);
					return 1;
				}
			}
			case 1:
			{
				/*
				if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
				{
					if(driver != playerid)
					{
						SendClientMessage(playerid, COLOR_GRAD2, "   You dont have a Vehicle");
						return 1;
					}
					GameTextForPlayer(playerid, "~w~Vehicle ~g~Unlocked", 5000, 6);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
					UnLockCar(carid);
					return 1;
				}
				*/
				if(HireCar[playerid] == 999 && PlayerInfo[playerid][pPhousekey] == 255)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You dont have a Vehicle");
					return 1;
				}
				if(HireCar[playerid] == carid && !SwitchKey[playerid])
				{
					GameTextForPlayer(playerid, "~w~Hire Vehicle ~b~Unlocked", 5000, 4);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
					UnLockCar(carid);
				}
				if (PlayerInfo[playerid][pPhousekey] == carid-1)
				{
					GameTextForPlayer(playerid, "~w~House Vehicle ~b~Unlocked", 5000, 4);
					PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
					gCarLock[carid] = 0;
					UnLockCar(carid);
					return 1;
				}
			}
			default:
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   Error");
			}
		}
		if(carid == 256)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You dont have a Vehicle");
		}
		return 1;
	}
//----------------------------------[Wisper]-----------------------------------------------
	if(strcmp(cmd, "/wisper", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/w", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/w)isper [playerid/PartOfName] [whisper text]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if(giveplayerid == playerid)
				{
					format(string, sizeof(string), "* %s mutters somthing.", sendername);
					ProxDetector(5.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				new length = strlen(cmdtext);
				while ((idx < length) && (cmdtext[idx] <= ' '))
				{
					idx++;
				}
				new offset = idx;
				new result[64];
				while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
				{
					result[idx - offset] = cmdtext[idx];
					idx++;
				}
				result[idx - offset] = EOS;
				if(!strlen(result))
				{
					SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/w)isper [playerid/PartOfName] [whisper text]");
					return 1;
				}
				format(string, sizeof(string), "%s whispers %s", sendername, result);
				SendClientMessage(playerid,  COLOR_YELLOW, string);
				SendClientMessage(giveplayerid, COLOR_YELLOW, string);
				printf("%s: %s", sendername, result);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Your too far away.");
			}
		}
		else
		{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
//~~~~~~~~~~~~~~~~~~~~~~~~[Additional Commands]~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	if(strcmp(cmd, "/warn", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /warn [playerid] [Reason]");
			return 1;
		}
		if(!cmdtext[7])
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /warn [playerid]");
		}
		new playa = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
  		{
			format(string, sizeof(string), "AdmCmd: %s Warned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Warned by %s (Reason: %s).",giveplayer ,sendername,cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			PlayerInfo[playa][pWarnL]++;
			BanLog(string);
			if(PlayerInfo[playa][pWarnL] >= 5)
			{
				SendClientMessage(playa, COLOR_RED, "AdmCmd: Your Warning Level has Reach The Maximum, You Have Been Muted!");
				Mute[playa] = 1;
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: You are not authorized to use that command!");
		}
		return 1;
 	}
	if(strcmp(cmdtext,"/lockserver",true) == 0 && IsPlayerConnected(playerid))
	{
	 	if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
	  	{
			glocked = 1;
	   	    SendClientMessage(playerid, COLOR_RED, "AdmCmd: The Server has been Locked, No incoming players may join.");
		}
	}
	if(strcmp(cmdtext,"/unlockserver",true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			glocked = 0;
			SendClientMessage(playerid, COLOR_DGREEN, "AdmCmd: The Server has been UnLocked, incoming players may join.");
		}
	}
	if(strcmp(cmdtext,"/lockserverban",true) == 0 && IsPlayerConnected(playerid))
	{
 		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
  		{
   			gblocked = 1;
    	    SendClientMessage(playerid, COLOR_RED, "AdmCmd: The Server has been BanLocked, incoming players WILL BE BANNED ON SIGHT.");
		}
	}
	if(strcmp(cmdtext,"/unlockserverban",true) == 0 && IsPlayerConnected(playerid))
		{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			gblocked = 0;
			SendClientMessage(playerid, COLOR_DGREEN, "AdmCmd: The Server has been UnLocked, incoming players may join.");
		}
	}
	if(strcmp(cmd, "/getcuffs", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(7.0, playerid, 234.60,159.19,1003.02) && PlayerInfo[playerid][pRank] >= 11 && IsPlayerConnected(playerid))
  		{
  			SendClientMessage(playerid, TEAM_BLUE_COLOR, "You need to be at Police Headquaters.");
            return 1;
		}
		if(PlayerInfo[playerid][pRank] >= 11 && IsPlayerConnected(playerid))
		{
			{
 	 		Phandcuffs[playerid] = 1;
 	 		SendClientMessage(playerid, TEAM_BLUE_COLOR, "Reception: Here are your handcuffs officer!");
 	        PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			}
    	}
		else
		{
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "Reception: Only Police Personel can take out Equipment.");
		}
		return 1;
	}
	if(strcmp(cmd, "/gethorn", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(7.0, playerid, 234.60,159.19,1003.02) && PlayerInfo[playerid][pRank] >= 11 && IsPlayerConnected(playerid))
  		{
  			SendClientMessage(playerid, TEAM_BLUE_COLOR, "You need to be at Police Headquaters.");
            return 1;
		}
		if(PlayerInfo[playerid][pRank] >= 1 && IsPlayerConnected(playerid))
		{
			{
 	 		Pmegaphone[playerid] = 1;
 	 		SendClientMessage(playerid, TEAM_BLUE_COLOR, "Reception: Here is your megaphone officer!");
 	        PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			}
    	}
		else
		{
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "Reception: Only Police Personel can take out Equipment.");
		}
		return 1;
	}
//if(GetPlayerMoney(playerid) >= cost)
	if(strcmp(cmd, "/enterPD2", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(4.0, playerid, -2586.23,552.99,14.61))
  		{
			{
			SetPlayerInterior(playerid,5);
			SetPlayerPos(playerid,323.4000,305.6000,999.1484);
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "Welcome to the San Fierro Police 2nd Precinct");
            SendClientMessage(playerid, COLOR_WHITE, "Commands: /getcuffs /release /unjail /exitpd2");
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/exitPD2", true) == 0 && IsPlayerConnected(playerid))
	{
  		if(PlayerToPoint(4.0, playerid, 323.4000,305.6000,999.1484))
  		{
			{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,-2586.23,552.99,14.61);
			SendClientMessage(playerid, COLOR_GRAD1, "You Have left the 2nd Precinct");
            PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			}
		}
		return 1;
	}

	if(strcmp(cmd, "/myjob", true) == 0 && IsPlayerConnected(playerid))
 		{
			if(PlayerInfo[playerid][pJob] == 1)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Transporter");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$210.00+Earnings][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Transport people around the city.");
			}
            else if(PlayerInfo[playerid][pJob] == 2)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: RepoMan");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$445.00][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Reposses Items For the State.");
			}
			else if(PlayerInfo[playerid][pJob] == 3)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Armored Truck Guard");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$365.00][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Ensure The Contents get to the target.");
   			}
   			else if(PlayerInfo[playerid][pJob] == 4)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Ice Cream Man");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$145.00+Earnings][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Sell Ice cream(health)to people.");
   			}
   			else if(PlayerInfo[playerid][pJob] == 5)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Contruction Worker");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$430.00][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Work on Houses Buildings or Biznesses.");
   			}
   			else if(PlayerInfo[playerid][pJob] == 6)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Mail Carrier");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$650.00][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Deliver the mail to the citezens of SF.");
   			}
   			else if(PlayerInfo[playerid][pJob] == 7)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: News Reporter");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$1400.00][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Report to the Community ");
   			}
   			else if(PlayerInfo[playerid][pJob] == 8)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Doctor");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$5501.02][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Help The sick and Injured, Make House calls");
   			}
   			else if(PlayerInfo[playerid][pJob] == 9)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Lawyer");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$947.23][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Defend the Innocent.");
   			}
   			else if(PlayerInfo[playerid][pJob] == 10)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Pilot");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$748.30][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: The Skys the Limit! Take them where they wanna go");
   			}
   			else if(PlayerInfo[playerid][pJob] == 11)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Paramedic");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$437.90][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Preserver Life");
   			}
   			else if(PlayerInfo[playerid][pJob] == 12)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Sanitation Worker");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$251.00][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission:");
   			}
            else if(PlayerInfo[playerid][pJob] == 13)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Cashier");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$127.63][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Sell Your Product");
   			}
   			else if(PlayerInfo[playerid][pJob] == 14)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Fisherman");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$462.72][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Go Fish!");
   			}
   			else if(PlayerInfo[playerid][pJob] == 15)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Mechanic");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$349.00][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Repair Vehicles");
   			}
   			else if(PlayerInfo[playerid][pJob] == 16)
			{
				SendClientMessage(playerid, COLOR_GREEN,"Job: Bar Tender");
				SendClientMessage(playerid, COLOR_GREEN,"Salary:[$168.00][Payday]");
                SendClientMessage(playerid, COLOR_GREEN,"Mission: Server Drinks");
   			}
   			else if(PlayerInfo[playerid][pRank] == 1)
			{
				SendClientMessage(playerid, COLOR_BLUE,"Job: Police Trainee");
				SendClientMessage(playerid, COLOR_BLUE,"Salary:[$520.00][Payday]");
                SendClientMessage(playerid, COLOR_BLUE,"Mission: Learn to be an Officer");
   			}
   			else if(PlayerInfo[playerid][pRank] == 2)
			{
				SendClientMessage(playerid, COLOR_BLUE,"Job: Police Officer");
				SendClientMessage(playerid, COLOR_BLUE,"Salary:[$875.00][Payday]");
                SendClientMessage(playerid, COLOR_BLUE,"Mission: Protect and Serve");
   			}
   			else if(PlayerInfo[playerid][pRank] == 3)
			{
				SendClientMessage(playerid, COLOR_BLUE,"Job: Police Sergeant");
				SendClientMessage(playerid, COLOR_BLUE,"Salary:[$1300.00][Payday]");
                SendClientMessage(playerid, COLOR_BLUE,"Mission: Keep the officers in line, Field Supervisor.");
   			}
   			else if(PlayerInfo[playerid][pRank] == 4)
			{
				SendClientMessage(playerid, COLOR_BLUE,"Job: Police Detective");
				SendClientMessage(playerid, COLOR_BLUE,"Salary:[$1325.00][Payday]");
                SendClientMessage(playerid, COLOR_BLUE,"Mission: Investigate Crimes.");
   			}
   			else if(PlayerInfo[playerid][pRank] == 5)
			{
				SendClientMessage(playerid, COLOR_BLUE,"Job: Police Leuitenant");
				SendClientMessage(playerid, COLOR_BLUE,"Salary:[$1580.00][Payday]");
                SendClientMessage(playerid, COLOR_BLUE,"Mission: The Precint is yours, Your in control!.");
   			}
   			else if(PlayerInfo[playerid][pRank] == 6)
			{
				SendClientMessage(playerid, COLOR_BLUE,"Job: FBI Federal Agent ");
				SendClientMessage(playerid, COLOR_BLUE,"Salary:[$1105.00][Payday]");
                SendClientMessage(playerid, COLOR_BLUE,"Mission: Investigate Theft, Dirty Bussinesses etc.");
   			}
   			else if(PlayerInfo[playerid][pRank] == 7)
			{
				SendClientMessage(playerid, COLOR_BLUE,"Job: Police Chief");
				SendClientMessage(playerid, COLOR_BLUE,"Salary:[$2400.00][Payday]");
                SendClientMessage(playerid, COLOR_BLUE,"Mission: Keep the Streets clean, As well as your Force.");
   			}
       		else
			{
				SendClientMessage(playerid, COLOR_WHITE,"Job: Un-Employed");
				SendClientMessage(playerid, COLOR_WHITE,"Salary:[$000.00][Paycheck]");
                SendClientMessage(playerid, COLOR_WHITE,"Mission: None");
   			}
			return 1;
		}
	if(strcmp(cmdtext, "/undercover", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pRank] >= 1)
		{
        	SendClientMessage(playerid, COLOR_BLUE, "Police HQ: You Are now Under-cover Officer, be carefull.");
			SetPlayerColor(playerid, 0xFFFFFFAA);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/ticket", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /ticket [playerid/PartOfName] [amount]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if(PlayerInfo[giveplayerid][pLocal] == 106)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Command disallowed in this location");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /ticket [playerid/PartOfName] [amount]");
			return 1;
		}
		moneys = strval(tmp);
		if(moneys > 1000 && PlayerInfo[playerid][pRank] < 11 )
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Tickets can't be above $1,000");
			return 1;
		}
		//if (gdebug){printf("DEBUG givecash_command: %d %d",giveplayerid,moneys);}
		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				if (PlayerInfo[playerid][pRank] > 11)
				{
				    PlayerInfo[giveplayerid][pTick] = moneys;
                    PlayerInfo[giveplayerid][pSP]++;
					if(PlayerInfo[playerid][pSP] >= 20)
				    {
				    	SendClientMessage(giveplayerid, COLOR_YELLOW, "Your Gaining Experience");
                        PlayerInfo[playerid][pSP] = 0;
                        PlayerInfo[playerid][pExp]++;
				    }
					format(string, sizeof(string), "* You have given %s(player: %d)A $%d Ticket.", giveplayer, giveplayerid, moneys);
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, TEAM_BLUE_COLOR, string);
					format(string, sizeof(string), "* You have recieved a $%d Ticket from %s(player: %d).", moneys, sendername, playerid);
					SendClientMessage(giveplayerid, TEAM_BLUE_COLOR, string);
					format(string, sizeof(string), "* %s has given a $%d ticket to %s", sendername, moneys, giveplayer);
					PayLog(string);
					if(moneys >= 5000)
					{
						ABroadCast(COLOR_YELLOW,string,1);
					}
					PlayerPlaySound(giveplayerid, 1058, 0.0, 0.0, 0.0);
					PlayerPlaySound(playerid, 1058, 0.0, 0.0, 0.0);
					format(string, sizeof(string), "* %s writes a ticket and hands it to %s.", sendername ,giveplayer);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "   You are not a Law Enforcer.");
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   You're too far away.");
			}
		}
		else
		{
			format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/ping", true) == 0 && IsPlayerConnected(playerid))
	{
        SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Pong!");
        GameTextForPlayer(playerid,"~b~Pong",6000,5);
        return 1;
	}
	if(strcmp(cmd, "/badge", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pRank] >= 11)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "** Police, %s Flashes A Badge ** ", sendername);
			ProxDetector(30.0, playerid, string, COLOR_YELLOW,COLOR_GRAD1,COLOR_GRAD2,COLOR_GRAD3,COLOR_GRAD4);
			printf("%s", string);
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "   You are not a Law Enforcer.");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/taxi", true) == 0 && IsPlayerConnected(playerid))
	{
		//new pname[MAX_PLAYER_NAME];
  		GetPlayerName(playerid, pname, sizeof (pname));
     	format(string, sizeof(string), " %s Needs Taxi", pname);
        SendClientMessage(playerid, COLOR_GREEN, string); //
        GameTextForAll(string ,3000,5);
    	return 1;
	}
 	else if(strcmp(cmdtext, "/taxioff", true) == 0 && IsPlayerConnected(playerid)) {
		//new pname[MAX_PLAYER_NAME];
  		GetPlayerName(playerid, pname, sizeof (pname));
  		format(string, sizeof(string), " %s Doesent need taxi any more", pname);
  		SendClientMessage(playerid, COLOR_GREEN, string); //
  		GameTextForAll(string ,3000,5);
    	return 1;
	}
	else if(strcmp(cmd, "/Driver", true) == 0 && IsPlayerConnected(playerid))
	{
		//new pname[MAX_PLAYER_NAME];
  		GetPlayerName(playerid, pname, sizeof (pname));
    	format(string, sizeof(string), " %s Is Now a Transporter", pname);
     	SendClientMessage(playerid, COLOR_GREEN, string); //
      	GameTextForAll(string ,3000,5);
    	return 1;
	}
	else if(strcmp(cmd, "/noDriver", true) == 0 && IsPlayerConnected(playerid))
	{
		//new pname[MAX_PLAYER_NAME];
  		GetPlayerName(playerid, pname, sizeof (pname));
    	format(string, sizeof(string), " %s Is Not a Transporter anymore", pname);
     	SendClientMessage(playerid, COLOR_GREEN, string); //
      	GameTextForAll(string ,3000,5);
    	return 1;
	}
	if(strcmp(cmd, "/enterPD", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(3.0, playerid, -1605.51,712.34,13.87) && PlayerInfo[playerid][pRank] >= 11 && IsPlayerConnected(playerid))
  		{
			{
			SetPlayerInterior(playerid,3);
			SetPlayerPos(playerid,238.66,141.05,1003.02);
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "Welcome to the San Fierro Police Dept Headquaters");
			SendClientMessage(playerid, COLOR_WHITE, "Commands: /getcuffs /release /unjail /exitpd");
            PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Guard: Im Sorry Police Personel only, Goto the 2nd Precinct.");
		}
		return 1;
	}
	if(strcmp(cmd, "/exitPD", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(3.0, playerid, 238.66,141.05,1003.02))
  		{
			{
			SetPlayerInterior(playerid,0);
			SetPlayerPos(playerid,-1605.51,712.34,13.87);
			SendClientMessage(playerid, COLOR_GRAD1, "You Have left Police Headquaters");
            PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/ba", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		SendClientMessageToAll(COLOR_GRAD1,"You're banned from the server.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/lo", true) == 0 && IsPlayerConnected(playerid))
		{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		SendClientMessageToAll(COLOR_GRAD1,"Lost connection to the server.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/sscan", true) == 0 && IsPlayerConnected(playerid))
		{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 107  || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		SendClientMessageToAll(COLOR_RED,"AmdCmd: Admin issued DEBUG Config");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/er", true) == 0 && IsPlayerConnected(playerid))
		{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		SendClientMessageToAll(COLOR_GRAD1,"Error.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/foxjoin", true) == 0 && IsPlayerConnected(playerid))
		{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 105 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		SendClientMessageToAll(COLOR_GRAD1,"*** [SF]FoxTrota has Joined the Server.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/foxleft", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 105 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SendClientMessageToAll(COLOR_GRAD1,"*** [SF]FoxTrota has left the Server.(Leaving)");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/foxtime", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 105 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		SendClientMessageToAll(COLOR_GRAD1,"*** FoxTrot has left the Server.(timeout)");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/foxkick", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 105 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		SendClientMessageToAll(COLOR_GRAD1,"*** FoxTrot has left the Server.(Kicked)");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/kickedfox", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 105 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
        SendClientMessageToAll(COLOR_RED,"AdmCmd: FoxTrot has been Kicked by FoxTrot (Reason: Beasteality)");
		SendClientMessageToAll(COLOR_GRAD1,"*** FoxTrot has left the Server.(Kicked)");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/devsjoined", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 105 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SendClientMessageToAll(COLOR_GRAD1,"*** littlewhitey has joined the server.");
			SendClientMessageToAll(COLOR_GRAD1,"*** Y_Less has joined the server.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
/*	if(strcmp(cmd, "/upgradep", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /upgradep [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
 		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if (PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			PlayerInfo[playa][gPupgrade] = PlayerInfo[playa][gPupgrade]+1;
			printf("AdmCmd: %s made %s Fugitive",sendername,  giveplayer);
			format(string, sizeof(string), "AdmCmd: %s has given 2 upgrade points to %s", sendername,giveplayer);
			SendClientMessageToAll(COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}*/
	if(strcmp(cmdtext,"/alock",true)==0){
		if(PlayerInfo[playerid][pAdmin] >= 103 || AdminAreaAccess[playerid] == 1 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)){
		    for(new i=0;i<MAX_VEHICLES;i++)
		    {
			    if(IsAdminVehicle(i)){
					SetVehicleParamsForPlayer(i,playerid,0,0);
				}
			}
			SendClientMessageToAll(COLOR_RED, "AdmCmd: Enter quickly.");
			SetTimer("alock",5000,0);
			return 1;
		}
	}
	if(strcmp(cmdtext,"/alockdisable",true)==0){
		if(PlayerInfo[playerid][pAdmin] >= 106 && IsPlayerConnected(playerid) || FugitiveCore[playerid] == 1){
		    for(new i=0;i<MAX_VEHICLES;i++)
		    {
			    if(IsAdminVehicle(i)){
					SetVehicleParamsForPlayer(i,playerid,0,0);
				}
			}
			SendClientMessageToAll(COLOR_RED, "AdmCmd: All players now have access to spawned hydra, hunter, seasparo and rihno's");
			return 1;
		}
	}
	if(strcmp(cmd, "/pguns", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /pguns [playerid] or /pguns all");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else if (strcmp(tmp,"all",true)==0 && (PlayerInfo[playerid][pAdmin]>=105 || FugitiveCore[playerid] == 1 || IsPlayerAdmin(playerid))){
		 for(new i=0;i<MAX_PLAYERS;i++){
		  if(IsPlayerConnected(i)){
			GivePlayerWeapon(i, 37, 1000);
			GivePlayerWeapon(i, 32, 1000);
			GivePlayerWeapon(i, 27, 1000);
			GivePlayerWeapon(i, 22, 1000);
			GivePlayerWeapon(i, 31, 1000);
			GivePlayerWeapon(i, 33, 1000);
			SendClientMessage(i, 0xFFFF00AA,"You have received the Ammu-Nation armory deal. Happy killing from Ammunation!");
			SetPlayerHealth(i, 150.0);
		  }
		 }
		 SendClientMessageToAll(COLOR_YELLOW,"Everyone has received guns. Good luck, and have fun!");
		 return 1;
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 106 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		 	GivePlayerWeapon(playa, 37, 1000);
			GivePlayerWeapon(playa, 32, 1000);
		 	GivePlayerWeapon(playa, 27, 1000);
			GivePlayerWeapon(playa, 22, 1000);
		 	GivePlayerWeapon(playa, 31, 1000);
		 	GivePlayerWeapon(playa, 33, 1000);
		 	SendClientMessage(playa, 0xFFFF00AA,"You have received the Ammu-Nation armory deal. Happy killing from Ammunation!");
   			SetPlayerHealth(playa, 150.0);
			printf("AdmCmd: %s Gave guns and health to %s", sendername,giveplayer);
			format(string, sizeof(string), "AdmCmd: %s Gave guns and health to %s", sendername,giveplayer);
			SendClientMessageToAll(COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: you are not authorized to use that command!");
		}
		return 1;
	}
    if (strcmp(cmdtext, "/myguns", true) == 0 && IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pKills] >= 24)
		{
			GivePlayerWeapon(playerid, 37, 1000);
			GivePlayerWeapon(playerid, 32, 1000);
			GivePlayerWeapon(playerid, 27, 1000);
			GivePlayerWeapon(playerid, 22, 1000);
			GivePlayerWeapon(playerid, 31, 1000);
			GivePlayerWeapon(playerid, 33, 1000);
		    GiveMoney(playerid, -10000);
		    SendClientMessage(playerid, 0xFFFF00AA,"You just bought the Ammu-Nation armory deal. Happy killing from Ammunation!");
		 	SetPlayerColor(playerid, 0xFF0000AA);
		 	SetPlayerHealth(giveplayerid, 50.0);
			FlashTime[playerid] = 1200;
			format(string,sizeof(string),"~w~kill the ~r~red ~w~player!", nick, msg);
			GameTextForAll(string,5000,1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You do not have 25 or more kills to use that command!");
		}
		return 1;
	}
    if (strcmp(cmdtext, "/mygunsa", true) == 0 && IsPlayerConnected(playerid))
	{
		{
		if (PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
	 GivePlayerWeapon(playerid, 37, 1000);
	 GivePlayerWeapon(playerid, 32, 1000);
	 GivePlayerWeapon(playerid, 27, 1000);
	 GivePlayerWeapon(playerid, 22, 1000);
	 GivePlayerWeapon(playerid, 31, 1000);
	 GivePlayerWeapon(playerid, 33, 1000);
     GiveMoney(playerid, -10000);
     SendClientMessage(playerid, 0xFFFF00AA,"You just bought the Ammu-Nation armory deal. happy killing from Ammunation!");
 	 SetPlayerColor(playerid, 0xFF0000AA);
 	 SetPlayerHealth(giveplayerid, 50.0);
	 FlashTime[playerid] = 1200;
	 format(string,sizeof(string),"~r~Kill the red marker.!", nick, msg);
	 GameTextForAll(string,5000,1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: you do not have 25 or more kills to use that command!");
		}
		return 1;
	}
    }
    if(strcmp(cmd,"/sellup",true)==0 && IsPlayerConnected(playerid)) {
	   	format(string,sizeof(string),"upgrade $500000 go and see Tosted.", nick, msg);
		GameTextForAll(string,3000,1);
	}
    if(strcmp(cmd,"/sellnum",true)==0 && IsPlayerConnected(playerid)) {
  	 	format(string,sizeof(string),"phone #'s $10000 go and see Foxtrot.", nick, msg);
		GameTextForAll(string,3000,1);
	}
	if(strcmp(cmd,"/vent",true)==0 && IsPlayerConnected(playerid)) {
		format(string, sizeof(string), "Ventrilo server iP 66.151.246.120 port 3813", giveplayer,giveplayerid);
		SendClientMessage(playerid,COLOR_YELLOW, string);
	}
    if(strcmp(cmd,"/site",true)==0 && IsPlayerConnected(playerid)) {
		format(string, sizeof(string), "Website www.pen1sf.com", giveplayer,giveplayerid);
		SendClientMessage(playerid,COLOR_YELLOW, string);
	}
	if(strcmp(cmd,"/reset",true)==0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			format(string, sizeof(string), "AdmCmd: Server Will Restart Soon.", giveplayer,giveplayerid);
			SendClientMessageToAll(COLOR_RED, string);
			format(string,sizeof(string),"~B~Server Restart Soon", nick, msg);
			SetTimer("StopMusic", 6000, 0);
			GameTextForAll(string,5000,5);
			PlayerPlaySound(playerid, 1097, 1000.0, 0.0, 0.0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
    if(strcmp(cmd,"/afk",true)==0 && IsPlayerConnected(playerid))
	{
		if (gPlayerLogged[playerid] != 1)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You Are Not Logged In");
			return 1;
		}
		space = strfind(cmd, "", true, 0);
		GetPlayerName(playerid, nick, sizeof(nick));
		strmid(msg, cmd, space+1, strlen(cmd), sizeof(msg));
		format(string, sizeof(string), "%s is away from keyboard.", nick, msg);
		SendClientMessageToAll(COLOR_LIGHTBLUE, string);
		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%s ~w~is afk.", nick, msg);
		GameTextForAll(string,3000,3);
		return 1;
	}
	if(strcmp(cmd,"/back",true)==0 && IsPlayerConnected(playerid)) {
		space = strfind(cmd, "", true, 0);
		IsPlayerConnected(playerid);
		GetPlayerName(playerid, nick, sizeof(nick));
		strmid(msg, cmd, space+1, strlen(cmd), sizeof(msg));
		format(string, sizeof(string), "%s is back.", nick, msg);
		SendClientMessageToAll(COLOR_LIGHTBLUE, string);
		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%s ~w~is back.", nick, msg);
		GameTextForAll(string,3000,3);
		return 1;
	}
	if(strcmp(cmd,"/busy",true)==0 && IsPlayerConnected(playerid)) {
		space = strfind(cmd, "", true, 0);
		IsPlayerConnected(playerid);
		GetPlayerName(playerid, nick, sizeof(nick));
		strmid(msg, cmd, space+1, strlen(cmd), sizeof(msg));
		format(string, sizeof(string), "%s is busy.", nick, msg);
		SendClientMessageToAll(COLOR_LIGHTBLUE, string);
		format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%s ~w~is busy.", nick, msg);
		GameTextForAll(string,3000,3);
		return 1;
	}
	if (strcmp(cmd, "/cd", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
	    if (cdto == 1)
	    {
		    SendClientMessage(playerid,COLOR_GREY,"A countdown is already in progress. Please wait for it to finish.");
			return 1;
	    }
		else if (cdto == 0) {
			cd_seconds = strval(strtok(cmdtext,idx));
			Countdown = 1;
			format(string, sizeof(string),"Countdown started : %d seconds, freeze=%d",cd_seconds,cd_freeze);
			SendClientMessage(playerid,COLOR_GREY,string);
			cd_timer = SetTimer("admin_cd",1000,1);
			cdto = 1;
			return 1;
		}
		if(cd_seconds <= 0 || cd_seconds > 500 || !strlen(cmd))
	    {
	        SendClientMessage(playerid,COLOR_GREY,"Usage: /cd [seconds:1-500] [freeze:1-0]");
	        return 1;
	    }
	    cd_freeze = strval(cmd);
	    if(cd_freeze > 1)
	    {
	        SendClientMessage(playerid,COLOR_GREY,"Usage: /cd [seconds:1-500] [freeze:1-0]");
	        return 1;
	    }
	    if(cd_freeze == 1)
	    {
	        for(new i=0; i<MAX_PLAYERS; i++)
	        {
	            if (IsPlayerConnected(i))
	            {
	                TogglePlayerControllable(i,0);
	            }
	        }
	    }
	}
	if(strcmp(cmdtext, "/stopcd", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
		if (Countdown == 1)
		{
    	    Countdown = 0;
			KillTimer(cd_timer);
			cdto = 0;
			for(new i=0; i<MAX_PLAYERS; i++)
			{
				if (IsPlayerConnected(i))
				{
                	TogglePlayerControllable(i,1);
            	}
        	}
        	//new pname[24];
			GetPlayerName(playerid,pname,sizeof(pname));
    	    format(string,sizeof(string),"~r~countdown stopped by ~w~%s",pname);
			GameTextForAll(string,3000,4);
			SendClientMessage(playerid,COLOR_GREY,"Countdown stopped.");
        	return 1;
    	}
    	else
    	{
        	SendClientMessage(playerid,COLOR_GREY,"No countdown to stop");
        	return 1;
    	}
	}
	if(strcmp(cmdtext, "/sendround", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
   		if (Countdown == 1)
    	{
        	Countdown = 0;
        	KillTimer(cd_timer);
        	for(new i=0; i<MAX_PLAYERS; i++)
        	{
            	if (IsPlayerConnected(i))
            	{
             	   TogglePlayerControllable(i,1);
            	}
        	}
        	//new pname[24];
			GetPlayerName(playerid,pname,sizeof(pname));
        	format(string,sizeof(string),"~r~countdown stopped by ~w~%s",pname);
        	GameTextForAll(string,3000,4);
        	SendClientMessage(playerid,COLOR_GREY,"Countdown stopped.");
        	return 1;
    	}
    	else
    	{
       		SendClientMessage(playerid,COLOR_GREY,"No countdown to stop");
        	return 1;
    	}
	}
	if(strcmp(cmd, "/kill", true) == 0){SetPlayerHealth(playerid,0);return 1;}
	if(strcmp(cmdtext, "/gotoni", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
	//	if(PlayerToPoint(5.0, playerid, -2142.86,731.89,69.41))
		//{
		if ((IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1) && IsPlayerConnected(playerid))
		{
			SetPlayerPos(playerid, -2100.7654,828.0260,1008.5546);
			SendClientMessage(playerid, COLOR_RED, "AdmCmd: You have been teleported to Nextek's Island");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, " you are not authorized to use that command!");
		}
		return 1;
	//	}
	}

	if(strcmp(cmd, "/killp", true) == 0 && IsPlayerConnected(playerid)) {
		if(PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
			new dir1[256];
			dir1 = strtok(cmdtext, idx);
			if(!strlen(dir1)) {
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /Killp [ID]");
			}
			giveplayerid = strval(dir1);
			dir1 = strtok(cmdtext, idx);
			if (IsPlayerConnected(giveplayerid)) {
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				SetPlayerHealth(giveplayerid,0);
				format(string, sizeof(string), "AdmCmd: Admin %s Killed You!",sendername);
				SendClientMessage(playerid, COLOR_RED,string);
			}
			else {
				format(string, sizeof(string), "AdmCmd: %d Not Active Player", giveplayerid);
				SendClientMessage(playerid, COLOR_RED, string);
			}
		}
		else {
	    	SendClientMessage(playerid, COLOR_RED, "AdmCmd: Your Not an Admin");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/atomicbomb", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)))
		{
	  		cd_seconds = 10;
	    	Countdown = 1;
	    	format(string, sizeof(string),"Countdown started : %d seconds",cd_seconds);
	    	SendClientMessage(playerid,COLOR_GREY,string);
	    	cd_timer = SetTimer("cd_atomicbomb",1000,6);
	    	GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string,sizeof(string),"~b~%s has dropped an~r~ Atomic Bomb",sendername);
			GameTextForAll(string,3000,0);
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/allgod", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		for(new i=0; i<MAX_PLAYERS; i++) SetPlayerHealth(i,100000);
	 	format(string, sizeof(string), "AdmCmd: God Powers Granted",sendername);
     	SendClientMessage(playerid, COLOR_YELLOW,string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/allnotgod", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		for(new i=0; i<MAX_PLAYERS; i++) SetPlayerHealth(i,50);
	 	format(string, sizeof(string), "AdmCmd: God Powers Removed",sendername);
     	SendClientMessage(playerid, COLOR_YELLOW,string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/iconall", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		for(new i=0; i<MAX_PLAYERS; i++) SetPlayerColor(i,0xFFFFFFFF);
		for(new i=1; i<MAX_PLAYERS; i++) ShowNameTags(i);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/noiconall", true) == 0 && IsPlayerConnected(playerid)) {
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		for(new i=0; i<MAX_PLAYERS; i++) SetPlayerColor(i,0x0000FF00);
		for(new i=0; i<MAX_PLAYERS; i++) ShowNameTags(i);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmdtext, "/healall", true) == 0 && PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
		for(new i=0; i<MAX_PLAYERS; i++) SetPlayerHealth(i,95);
	}

/*	if(strcmp(cmdtext,"/clearchat",true)==0 && IsPlayerConnected(playerid)){
		if(PlayerInfo[playerid][pAdmin] >= 103 && IsPlayerConnected(playerid)) {
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
            SendClientMessageToAll(COLOR_GREY," ");  // lol look below :p
			return 1;
		}
	}*/
	
	if(strcmp(cmdtext,"/clearchat",true)== 0 || strcmp(cmd, "/clear", true) == 0){
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1) //JACKASS! at least LOOK at the fucking commands before replacing them with gay shit
	 		for (new a=1;a<=10;a++){
			    SendClientMessage(playerid,COLOR_GREY,"\n");
		    }
	    return 1;
	}
	
	
	if(strcmp(cmd, "/m2a", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/report", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/report [id] [report]");
			return 1;
		}
		format(string, sizeof(string), "Report From %s: %s", sendername, result);
		//format(string, sizeof(string), "Message: %s",result);
		SendReportMessage(COLOR_YELLOW, string);
		SendClientMessage(playerid, COLOR_GRAD2, "Report Sent.");
		printf("[Report From %s[%d]: %s", sendername, result);
		return 1;
	}
	
/*	if(strcmp(cmd, "/m2a", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/report", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/@)MessageAdmin [message]");
			return 1;
		}
		format(string, sizeof(string), "*Player %s to Admin: %s", sendername, result);
		if (PlayerInfo[playerid][pLevel] >= 2)
		if(IsPlayerConnected(giveplayerid))
		{
			SendAdminMessage(TEAM_CYAN_COLOR, string);
		}
		printf("Player %s to Admin: %s", sendername, result);
		return 1;
	}*/
	
	if(strcmp(cmd, "/amess", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/am", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/adminMessage [message]");
			return 1;
		}
		if (PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
		{
            format(string, sizeof(string), "** Admin: %s: %s **", sendername, result);
			SendClientMessageToAll(COLOR_DBLUE, string);
			printf("** Admin: %s: %s **", sendername, result);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "	You are Not Authorized to use that command.");
			return 1;
		}
	}
	if(strcmp(cmd, "/god", true) == 0 && PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
		tmp = strtok(cmdtext, idx);

		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_WHITE, "AdmCmd: /god [Playerid]");
			return 1;
		}
		giveplayerid = strval(tmp);

		if (IsPlayerConnected(giveplayerid)) {
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			god[giveplayerid] = 1;
			SetPlayerHealth(giveplayerid, 99999.0);
			SetPlayerArmour(giveplayerid, 9999999.0);
			//SetPlayerDisabledWeapons(giveplayerid,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54);
			format(string, sizeof(string), "AdmCmd:%s (id: %d) Made %s God(HealthWise)(id: %d).", sendername,playerid,giveplayer,giveplayerid);
			printf(string);
			format(string, sizeof(string), "AdmCmd:%s (id: %d) is now invincible.", giveplayer,giveplayerid);
			SendClientMessageToAll(COLOR_RED, string);
			format(string, sizeof(string), "AdmCmd:%s (id: %d) made you invincible.", sendername,playerid);
			SendClientMessage(giveplayerid, COLOR_RED, string);
		}
		else
		{
			format(string, sizeof(string), "AdmCmd:%d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_RED, string);
		}

		return 1;
	}
	if(strcmp(cmd, "/ungod", true) == 0 && PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_WHITE, "AdmCmd: /ungod [Playerid]");
			return 1;
		}
		giveplayerid = strval(tmp);
		if (IsPlayerConnected(giveplayerid)) {
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			god[giveplayerid] = 1;
			SetPlayerHealth(giveplayerid, 98.0);
			SetPlayerArmour(giveplayerid, 98.0);
			//SetPlayerDisabledWeapons(giveplayerid,26);//WEAPON_SAWEDOFF);
			format(string, sizeof(string), "AdmCmd:%s (id: %d) Made %s Not God(HealthWise)(id: %d).", sendername,playerid,giveplayer,giveplayerid);
			printf(string);
			format(string, sizeof(string), "AdmCmd:%s (id: %d) is now not invincible.", giveplayer,giveplayerid);
			SendClientMessageToAll(COLOR_RED, string);
			format(string, sizeof(string), "AdmCmd:%s (id: %d) made you not invincible.", sendername,playerid);
			SendClientMessage(giveplayerid, COLOR_RED, string);
		}
		else {
			format(string, sizeof(string), "AdmCmd:%d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_RED, string);
		}
		return 1;
	}
	if(strcmp(cmdtext, "/KickAll", true) == 0 && IsPlayerConnected(playerid))
	{
		for(new i = 0;i < MAX_PLAYERS;i++)
		{
		    if(IsPlayerConnected(i) == 1 && IsPlayerAdmin(playerid))
		    {
		        Kick(i);
			}
		}
		SendClientMessage(playerid, COLOR_RED,"AdmCmd:All Players Have Been Kicked From the Server!");
		return 1;
	}
	if(strcmp(cmdtext, "/ShitListAll", true) == 0 && IsPlayerConnected(playerid))
	{
		for(new i = 0;i < MAX_PLAYERS;i++)
		{
		    if(IsPlayerConnected(i) == 1 && IsPlayerAdmin(playerid))
		    {
		        Ban(i);
		        SendClientMessage(playerid,COLOR_RED,"AdmCmd: All Players have been Banned from the Server!");
			}
		}
		return 1;
	}
	if(strcmp(cmdtext, "/noicon", true) == 0 && PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
		SetPlayerColor(playerid,0x0000FF00);
		ShowNameTags(0);
        return 1;
	}
	if(strcmp(cmdtext, "/icon", true) == 0 && PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
		SetPlayerColor(playerid,0x0000FFFF);
		ShowNameTags(1);
		return 1;
	}
	if (strcmp(cmdtext, "/iconcolors", true)==0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_GREEN,"Available commands:");
		SendClientMessage(playerid, COLOR_YELLOW,"/magenta, /medgreen, /lightred, /darkmagenta, /lightblue,");
		SendClientMessage(playerid, COLOR_YELLOW,"/darkpurple, /lightbrown, /pink, /orange, /violet");
		SendClientMessage(playerid, COLOR_YELLOW,"/lightcyan, /red, /lightbluegreen, /gold, /grayblue");
		SendClientMessage(playerid, COLOR_YELLOW,"/bluegreen, /neutralblue, /white, /wipe, /lemon, /lightgreen");
		return 1;
	}
	if(strcmp(cmdtext, "/magenta", true) == 0 && IsPlayerConnected(playerid))
	{
		SetPlayerColor(playerid, 0xA587DE0BA354);
		return 1;
	}
	if(strcmp(cmdtext, "/medgreen", true) == 0 && IsPlayerConnected(playerid))
	{
		SetPlayerColor(playerid, 0x9CDE7180);
		return 1;
	}

    if(strcmp(cmdtext, "/lightred", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0xFF99AADD);
	return 1;
	}


    if(strcmp(cmd, "/darkmagenta", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0xA7105DEF);
return 1;
}


    if(strcmp(cmdtext, "/lightblue", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0x33CCFFAA);
	return 1;
	}


    if(strcmp(cmdtext, "/lightgreen", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0x24FF0AB9);
	return 1;
	}


    if(strcmp(cmdtext, "/lemon", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0xDDDD2357);
return 1;
}


    if(strcmp(cmdtext, "/orangered", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0xE9370DFC);
return 1;
}


    if(strcmp(cmdtext, "/yellow", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0xFFFF00AA);
return 1;
}


    if(strcmp(cmdtext, "/darkgreen", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0x12900BBF);
return 1;
}


    if(strcmp(cmdtext, "/medblue", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0x63AFF00A);
return 1;
}


    if(strcmp(cmdtext, "/darkpurple", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0x800080AA);
return 1;
}


    if(strcmp(cmdtext, "/lightbrown", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0x99934EFA);
return 1;
}


    if(strcmp(cmdtext, "/pink", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0xFF66FFAA);
	return 1;
	}
    if(strcmp(cmdtext, "/smithpink", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0xFF1493FF);
	return 1;
	}


    if(strcmp(cmdtext, "/orange", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0xFF9900AA);
	return 1;
	}


    if(strcmp(cmdtext, "/black", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) && IsPlayerConnected(playerid) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		SetPlayerColor(playerid, 0x00000000);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}


    if(strcmp(cmdtext, "/violet", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0x9955DEEE);
	return 1;
	}


    if(strcmp(cmdtext, "/lightcyan", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0xAAFFCC33);
	return 1;
	}


    if(strcmp(cmdtext, "/red", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0xAA3333AA);
	return 1;
	}

    if(strcmp(cmdtext, "/red2", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		if(FlashTime[playerid] == 0){FlashTime[playerid] = 10;}
		SetPlayerColor(playerid, 0xFF0000AA);
		format(string,sizeof(string),"~r~Kill the red markers!", nick, msg);
		GameTextForAll(string,5000,1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}

    if(strcmp(cmdtext, "/lightbluegreen", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0x0FFDD349);
	return 1;
	}


    if(strcmp(cmdtext, "/gold", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0xDEAD4370);
return 1;
}


    if(strcmp(cmdtext, "/grayblue", true) == 0 && IsPlayerConnected(playerid))
{
SetPlayerColor(playerid, 0x8D8DFFAA);
return 1;
}



    if(strcmp(cmdtext, "/bluegreen", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0x46BBAA00);
	return 1;
	}


    if(strcmp(cmdtext, "/neutralblue", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0xABCDEF01);
	return 1;
	}


    if(strcmp(cmdtext, "/white", true) == 0 && IsPlayerConnected(playerid))
	{
	SetPlayerColor(playerid, 0xFFFFFFAA);
	return 1;
	}

//----------------------------------[Phone]-----------------------------------------------
	if(strcmp(cmd, "/bank", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/deposit", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bank [amount]");
			format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_GRAD3, string);
			return 1;
		}
		if(strcmp(tmp,"all",true)==0){
		    new cash;
		    cash=GetPlayerMoney(playerid);
		    GiveMoney(playerid,-cash);
		    PlayerInfo[playerid][pAccount]=cash+PlayerInfo[playerid][pAccount];
		    SendClientMessage(playerid,COLOR_WHITE,"All cash deposited");
		    return 1;
		}
		new cashdeposit = strval(tmp);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bank [amount]");
			format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_GRAD3, string);
			return 1;
		}
		if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much");
			return 1;
		}
		if (PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53) || PlayerToPoint(100, playerid,246.3,109.2,1003.2) || PlayerToPoint(100, playerid,372.0,-8.7,1001.8) || PlayerToPoint(100, playerid,370.2,-71.6,1001.5) || PlayerToPoint(100, playerid,375.4,-127.9,1001.4) || PlayerToPoint(100, playerid,211.0,-8.6,1001.2) || PlayerToPoint(100, playerid,-203.5,-6.8,1002.2) || PlayerToPoint(100, playerid,203.7,-48.4,1001.8) || PlayerToPoint(100, playerid,418.4,-79.5,1001.8))
		{
			GiveMoney(playerid,-cashdeposit);
			new curfunds = PlayerInfo[playerid][pAccount];
			PlayerInfo[playerid][pAccount]=cashdeposit+PlayerInfo[playerid][pAccount];
			SendClientMessage(playerid, COLOR_WHITE, "|-== BANK STATMENT ==-|");
			format(string, sizeof(string), "  Old Balance: $%d", curfunds);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Deposit: $%d",cashdeposit);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  New Balance: $%d", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are too far from a 24-7, ATM or a Bank");
			return 1;
		}
	}
	if(strcmp(cmd, "/loan", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if (gPlayerLogged[playerid] != 1)
		{
			SendClientMessage(playerid, COLOR_WHITE, "SERVER: You must be logged in.");
			return 1;
		}
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /loan [amount]");
			format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_GRAD3, string);
			return 1;
		}
		new cashdeposit = strval(tmp);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /loan [amount]");
			format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_GRAD3, string);
			return 1;
		}
		if (PlayerInfo[playerid][pAccount] - cashdeposit < -50000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You have exceeded the loan limit ($50000)");
			return 1;
		}
		if (PlayerInfo[playerid][pAccount] - cashdeposit > -1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   We give loans we dont take them");
			return 1;
		}
		if (PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53) || PlayerToPoint(100, playerid,246.3,109.2,1003.2))
		{
			GiveMoney(playerid,cashdeposit);
			new curfunds = PlayerInfo[playerid][pAccount];
			PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
			SendClientMessage(playerid, COLOR_WHITE, "|___ BANK STATMENT ___|");
			format(string, sizeof(string), "  Old Balance: $%d", curfunds);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			format(string, sizeof(string), "  Deposit: $%d",cashdeposit);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD6, "|-----------------------------------------|");
			format(string, sizeof(string), "  New Balance: $%d", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are to far from a 24-7 ATM or a Bank");
			return 1;
		}
	}
	if(strcmp(cmd, "/withdraw", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /withdraw [amount]");
			format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_GRAD3, string);
			return 1;
		}
		new cashdeposit = strval(tmp);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /withdraw [amount]");
			format(string, sizeof(string), "  You Have $%d in your account.", PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_GRAD3, string);
			return 1;
		}
		if (cashdeposit > PlayerInfo[playerid][pAccount] || cashdeposit < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much");
			return 1;
		}
		if (PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53) || PlayerToPoint(100, playerid,246.3,109.2,1003.2))
		{
			GiveMoney(playerid,cashdeposit);
			PlayerInfo[playerid][pAccount]=PlayerInfo[playerid][pAccount]-cashdeposit;
			format(string, sizeof(string), "  You Have Withdrawn $%d from your account Total: $%d ", cashdeposit,PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are too far from a 24-7, ATM or a Bank");
			return 1;
		}
	}
	if(strcmp(cmd, "/balance", true) == 0 && IsPlayerConnected(playerid))
	{
		if (PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53) || PlayerToPoint(100, playerid,246.3,109.2,1003.2))
		{
			format(string, sizeof(string), "  You Have $%d in your account.",PlayerInfo[playerid][pAccount]);
			SendClientMessage(playerid, COLOR_YELLOW, string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are too far from a 24-7, ATM or a Bank");
			return 1;
		}
	}
	if(strcmp(cmd, "/dice", true) == 0 && IsPlayerConnected(playerid))
	{
		new dice = random(6)+1;
		if (gDice[playerid] == 1)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s Throws A Dice That lands on %d", sendername,dice);
			ProxDetector(5.0, playerid, string, TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR,TEAM_GREEN_COLOR);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You Don't Have A Dice");
			return 1;
		}
	}
	if(strcmp(cmd, "/betdm", true) == 0 && IsPlayerConnected(playerid)) //BizzInfo[5][bDiscription]
	{
		if (MissionActive == 13)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   A deathmatch is in progress");
			return 1;
		}
		/*
		if (PlayerInfo[playerid][pLocal] != 104)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are to far from a Betting shop");
			return 1;
		}
		*/
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /betdm [playerid/PartOfName] [amount]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /betdm [playerid/PartOfName] [amount]");
			return 1;
		}
		moneys = strval(tmp);
		if (moneys > 1000000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   Sorry, the house limit is $1000000");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			playermoney = GetPlayerMoney(playerid);
			if (moneys > 0 && playermoney >= moneys)
			{
				GiveMoney(playerid,-moneys);
				BizzInfo[5][bTakings] += moneys;
				BetDm[playerid][0] = giveplayerid;
				BetDm[playerid][1] = moneys;
				format(string, sizeof(string), "______-= %s =-_______", BizzInfo[5][bDiscription]);
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,string);
				format(string, sizeof(string), "   You have bet $%d on %s to win the next deathmatch", moneys, giveplayer);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"_______________________________________");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "  $%d has been bet on you by %s to win the next deathmatch", moneys, sendername);
				SendClientMessage(giveplayerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "%s bet $%d on %s", sendername, moneys, giveplayer);
				printf("%s", string);
				PayLog(string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
		else
		{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/betrace", true) == 0 && IsPlayerConnected(playerid))
	{
		if (MissionActive >= 7 && MissionActive <= 8 )
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   A race is in progress");
			return 1;
		}
		/*
		if (PlayerInfo[playerid][pLocal] != 104)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are to far from a Betting shop");
			return 1;
		}
		*/
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /betrace [playerid/PartOfName] [amount]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /betrace [playerid/PartOfName] [amount]");
			return 1;
		}
		moneys = strval(tmp);
		if (moneys > 1000000)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   Sorry house limit is $1000000");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			playermoney = GetPlayerMoney(playerid);
			if (moneys > 0 && playermoney >= moneys)
			{
				GiveMoney(playerid,-moneys);
				BizzInfo[5][bTakings] += moneys;
				BetRace[playerid][0] = giveplayerid;
				BetRace[playerid][1] = moneys;
				format(string, sizeof(string), "______-= %s =-_______", BizzInfo[5][bDiscription]);
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,string);
				format(string, sizeof(string), "You have bet $%d on %s to win the next race", moneys, giveplayer);
				SendClientMessage(playerid, COLOR_WHITE, string);
				SendClientMessage(playerid, TEAM_VAGOS_COLOR,"_______________________________________");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "  $%d has been bet on you by %s to win the next race", moneys, sendername);
				SendClientMessage(giveplayerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "%s bet $%d on %s", sendername, moneys, giveplayer);
				printf("%s", string);
				PayLog(string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
		else
		{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/bets", true) == 0 && IsPlayerConnected(playerid))
	{
		format(string, sizeof(string), "______-= %s =-_______", BizzInfo[5][bDiscription]);
		SendClientMessage(playerid, TEAM_VAGOS_COLOR,string);
		if(BetRace[playerid][0] == 255)
		{
			format(giveplayer, sizeof(giveplayer), "No one");
		}
		else
		{
			GetPlayerName(BetRace[playerid][0], giveplayer, sizeof(giveplayer));
		}
		format(string, sizeof(string), "Race: %s for $%d",giveplayer, BetRace[playerid][1]);
		SendClientMessage(playerid, COLOR_WHITE,string);
		if(BetDm[playerid][0] == 255)
		{
			format(giveplayer, sizeof(giveplayer), "No one");
		}
		else
		{
			GetPlayerName(BetDm[playerid][0], giveplayer, sizeof(giveplayer));
		}
		format(string, sizeof(string), "Deathmatch: %s for $%d",giveplayer, BetDm[playerid][1]);
		SendClientMessage(playerid, COLOR_GRAD2,string);
		SendClientMessage(playerid, TEAM_VAGOS_COLOR,"_______________________________________");
	}
	if(strcmp(cmd, "/transfer", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/wiretransfer", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pLevel] < 3)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You must be level 3");
			return 1;
		}
		if (!PlayerToPoint(100, playerid,246.3,109.2,1003.2))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You are too far from a Bank");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /transfer [playerid/PartOfName] [amount]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /transfer [playerid/PartOfName] [amount]");
			return 1;
		}
		moneys = strval(tmp);
		//if (gdebug){printf("DEBUG givecash_command: %d %d",giveplayerid,moneys);}
		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			playermoney = PlayerInfo[playerid][pAccount] ;
			if (moneys > 0 && playermoney >= moneys)
			{
				PlayerInfo[playerid][pAccount] -= moneys;
				PlayerInfo[giveplayerid][pAccount] += moneys;
				format(string, sizeof(string), "   You have transferred $%d to %s's account", moneys, giveplayer,giveplayerid);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   You have recieved $%d to into your account from %s", moneys, sendername, playerid);
				SendClientMessage(giveplayerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "%s transferd $%d to %s", sendername, moneys, giveplayer);
				printf("%s", string);
				PayLog(string);
				PlayerPlaySound(giveplayerid, 1052, 0.0, 0.0, 0.0);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
		else
		{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	/*LS Air == 1685.4481,-2332.9475,13.5469
	SF Air == -1424.5712,-289.0766,14.1484
	LV Air == 1673.3364,1447.8655,10.7858*/
	if(strcmp(cmd, "/buyticket", true) == 0 && IsPlayerConnected(playerid))
	{//LS/SF/LV
		if(!PlayerToPoint(3, playerid, 1685.4481,-2332.9475,13.5469))// || !PlayerToPoint(3,playerid, -1424.5712,-289.0766,14.1484 || !PlayerToPoint(3,playerid, 1673.3364,1447.8655,10.7858))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: Must be at an Airport.");
			return 1;
		}/*
		if(!PlayerToPoint(3,playerid, -1424.5712,-289.0766,14.1484))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: Must be at an Airport.");
			return 1;
		}
		if(!PlayerToPoint(3,playerid, 1673.3364,1447.8655,10.7858))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: Must be at an Airport.");
			return 1;
		}*/
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_ORANGE, "|>---------- SanAirLinez ---------<|");
			SendClientMessage(playerid, COLOR_GRAD1, "| 1: One Way Commercial Ticket $120");
			SendClientMessage(playerid, COLOR_GRAD2, "| 2: Round Trip Ticket $200");
			//SendClientMessage(playerid, COLOR_GRAD3, "| 3: One Private Flight (vehicle) $");
			//SendClientMessage(playerid, COLOR_GRAD4, "| 4: Round Trip Private (vehicle) $");
			SendClientMessage(playerid, COLOR_ORANGE, "|>----------------------------------------<|");
			return 1;
		}
		new item = strval(tmp);
		if (item == 1)
		{
			if(GetPlayerMoney(playerid) > 120)
			{
				GiveMoney(playerid,-120);
				BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+120;
				pCTicket[playerid]++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid,COLOR_ORANGE,"	You have Purchased A Commercial Flight Ticket");
				SendClientMessage(playerid,COLOR_WHITE,"SanAir: Thank You for choosing SanAir, have a great trip.");
				format(string, sizeof(string), "~r~-$%d", 120);
				GameTextForPlayer(playerid, string, 5000, 1);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "SanAir: Sorry, This Ticket costs $3500 You dont appear to have that much.");
				return 1;
			}
		}
		if (item == 2)
		{
			if(GetPlayerMoney(playerid) > 200)
			{
				GiveMoney(playerid,-200);
				BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+200;
				pCTicket[playerid]++;
				SendClientMessage(playerid,COLOR_ORANGE,"	You have Purchased A Round Trip Commercial Flight Ticket");
				SendClientMessage(playerid,COLOR_WHITE,"SanAir: Thank You for choosing SanAir, have a great trip.");
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~r~-$%d", 200);
				pCTicket[playerid]++;
				GameTextForPlayer(playerid, string, 5000, 1);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "SanAir: Sorry, This Ticket costs $6000 You dont appear to have that much.");
				return 1;
			}
		}
		if (item == 3)
		{
			if(GetPlayerMoney(playerid) > 7200)
			{
				GiveMoney(playerid,-7200);
				BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+7200;
				SendClientMessage(playerid,COLOR_ORANGE,"	You have Purchased A Private Flight Ticket");
				SendClientMessage(playerid,COLOR_WHITE,"SanAir: Thank You for choosing SanAir, have a great trip.");
				pPTicket[playerid]++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~r~-$%d", 7200);
				pPTicket[playerid]++;
				GameTextForPlayer(playerid, string, 5000, 1);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "SanAir: Sorry, This Ticket costs $7200 You dont appear to have that much.");
				return 1;
			}
		}
		if (item == 4)
		{
			if(GetPlayerMoney(playerid) > 12000)
			{
				GiveMoney(playerid,-12000);
				BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+12000;
				SendClientMessage(playerid,COLOR_ORANGE,"	You have Purchased A Round Trip Private Flight Ticket");
				SendClientMessage(playerid,COLOR_WHITE,"SanAir: Thank You for choosing SanAir, have a great trip.");
				pPTicket[playerid]++;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~r~-$%d", 12000);
				pPTicket[playerid]++;
				GameTextForPlayer(playerid, string, 5000, 1);
				return 1;
			}
			else
			{
			    SendClientMessage(playerid, COLOR_WHITE, "SanAir: Sorry, This Ticket costs $12000 You dont appear to have that much.");
				return 1;
			}
		}
  		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "	Invalid Ticket Selection.");
		}
		return 1;
	}
	if(strcmp(cmd, "/buy", true) == 0 && IsPlayerConnected(playerid))
	{
		//if (!PlayerToPoint(100, playerid,-30.875, -88.9609, 1004.53))//centerpoint 24-7
		//{
			//SendClientMessage(playerid, COLOR_GRAD2, "   You are not in a 24-7");
			//return 1;
		//}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "|WAL*MART: /buy [item number]");
			SendClientMessage(playerid, COLOR_GRAD1, "| 1: Cell Phone $500 2: Scratch Card $10 3: Phone Book $40");
			SendClientMessage(playerid, COLOR_GRAD2, "| 4: Dice $20 5: Vehicle Key $100 6: Vehicle Lock $1000");
			SendClientMessage(playerid, COLOR_GRAD3, "| 7: Speedometer $5000 8: HandCuffs $250 9: Hand Radio $465");
			SendClientMessage(playerid, COLOR_GRAD4, "| 10: Rob Protection $1000");
//			SendClientMessage(playerid, COLOR_GRAD5, "| ");
//			SendClientMessage(playerid, COLOR_GRAD5, "| ");
//			SendClientMessage(playerid, COLOR_GRAD6, "| ");
//			SendClientMessage(playerid, COLOR_GREEN, "| ");
//			SendClientMessage(playerid, COLOR_GREEN, "| ");
			SendClientMessage(playerid, COLOR_GREEN, "|----------------------------------|");
			return 1;
		}
		new item = strval(tmp);
		if(BizzInfo[6][bProd] == 0)
		{
			GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
			return 1;
		}
		if (item == 1 && GetPlayerMoney(playerid) > 500)
		{
		    if(PlayerInfo[playerid][pPnumber]>=1000){SendClientMessage(playerid, COLOR_GRAD5,"You already have a phone"); return 1;}
			GiveMoney(playerid,-500);
			BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+500;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			new randphone = 1000 + random(8999);//minimum 1000  max 9999
			PlayerInfo[playerid][pPnumber] = randphone;
			format(string, sizeof(string), "Mobile Phone Purchased Your New Number Is %d", randphone);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD5, "You Can Check This Anytime By Typing /level");
			SendClientMessage(playerid, COLOR_WHITE, "HINT: You can now type /help to see your cell phone commands.");
			format(string, sizeof(string), "~r~-$%d", 500);
			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
		else if (item == 2 && GetPlayerMoney(playerid) > 1000)
		{
			GiveMoney(playerid,-10);
			BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+10;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			new prize;
			new symb1[32];
			new symb2[32];
			new symb3[32];
			new randcard1 = random(10);//minimum 1000  max 9999
			new randcard2 = random(10);//minimum 1000  max 9999
			new randcard3 = random(10);//minimum 1000  max 9999
			format(string, sizeof(string), "~r~-$%d", 10);
			GameTextForPlayer(playerid, string, 5000, 1);
			if (gdebug >= 1){printf("randcard1 = %d,randcard2 = %d,randcard3 = %d",randcard1,randcard2,randcard3);}
			if(randcard1 >= 5)
			{
				format(symb1, sizeof(symb1), "~b~]");
				randcard1 = 1;
			}
			else if(randcard1 <= 4 && randcard1 >= 2)
			{
				format(symb1, sizeof(symb1), "~g~]");
				randcard1 = 2;
			}
			else if(randcard1 < 2)
			{
				format(symb1, sizeof(symb1), "~y~]");
				randcard1 = 3;
			}
			if(randcard2 >= 5)
			{
				format(symb2, sizeof(symb2), "~b~]");
				randcard2 = 1;
			}
			else if(randcard2 <= 4 && randcard2 >= 2)
			{
				format(symb2, sizeof(symb2), "~g~]");
				randcard2 = 2;
			}
			else if(randcard2 < 2)
			{
				format(symb2, sizeof(symb2), "~y~]");
				randcard2 = 3;
			}
			if(randcard3 >= 5)
			{
				format(symb3, sizeof(symb3), "~b~]");
				randcard3 = 1;
			}
			else if(randcard3 <= 4 && randcard3 >= 2)
			{
				format(symb3, sizeof(symb3), "~g~]");
				randcard3 = 2;
			}
			else if(randcard3 < 2)
			{
				format(symb3, sizeof(symb3), "~y~]");
				randcard3 = 3;
			}
			if (gdebug >= 1){printf("randcard1 = %d,randcard2 = %d,randcard3 = %d",randcard1,randcard2,randcard3);}
			if(randcard1 == randcard2 && randcard1 == randcard3)
			{
				if(randcard1 > 5)
				{
					prize = 1000;
				}
				if(randcard1 <= 4 && randcard1 >= 2)
				{
					prize = 100;
				}
				if(randcard1 < 2)
				{
					prize = 50;
				}
				GiveMoney(playerid,prize);
				BizzInfo[6][bTakings] = BizzInfo[6][bTakings]-prize;
				format(string, sizeof(string), "%s %s %s ~n~~n~~w~~g~$%d",symb1,symb2,symb3, prize);
			}
			else
			{
				format(string, sizeof(string), "%s %s %s ~n~~n~~w~~r~$0",symb1,symb2,symb3);
			}
			GameTextForPlayer(playerid, string, 3000, 3);
			return 1;
		}
		else if (item == 3 && GetPlayerMoney(playerid) > 40)
		{
			GiveMoney(playerid,-40);
			BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+40;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			gPhoneBook[playerid] = 1;
			format(string, sizeof(string), "Phone Book Purchased You Can Look Up Any Players Number");
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /number <id/name>.");
			format(string, sizeof(string), "~r~-$%d", 40);
			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
		else if (item == 4 && GetPlayerMoney(playerid) > 500)
		{
			GiveMoney(playerid,-20);
			BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+20;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			gDice[playerid] = 1;
			format(string, sizeof(string), "Dice Purchased You Can Throw Your Dice.");
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /dice ");
			format(string, sizeof(string), "~r~-$%d", 20);
			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
		else if (item == 5 && GetPlayerMoney(playerid) > 1000)
		{
			if (gLastCar[playerid] != 0)
			{
				if(HireCar[playerid] != 999)
				{
					gCarLock[HireCar[playerid]] = 0;
					UnLockCar(HireCar[playerid]);
					HireCar[playerid] = 999;
				}
				GiveMoney(playerid,-1000);
				BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+1000;
				BizzInfo[6][bProd]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				HireCar[playerid] = gLastCar[playerid];
				format(string, sizeof(string), "Key Purchased You Can Lock Your Last Vehicle.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /lock ");
				format(string, sizeof(string), "~r~-$%d", 5000);
				GameTextForPlayer(playerid, string, 5000, 1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You Don't Have A Vehicle To Fit It To");
			}
			return 1;
		}
		else if (item == 6 && GetPlayerMoney(playerid) > 1000)
		{
			if(PlayerInfo[playerid][pPhousekey] != 255)
			{
				for(new i = 0; i <= MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) == 1 && HireCar[PlayerInfo[playerid][pPhousekey]+1])
					{
						HireCar[i] = 999;
					}
				}
				GiveMoney(playerid,-1000);
				BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+1000;
				BizzInfo[6][bProd]--;
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "New Lock's Purchased.");
				SendClientMessage(playerid, COLOR_GRAD4, string);
				SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /lock ");
				format(string, sizeof(string), "~r~-$%d", 1000);
				GameTextForPlayer(playerid, string, 5000, 1);
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "You don't have a car to use this with");
			}
			return 1;
		}
		else if (item == 7 && GetPlayerMoney(playerid) > 5000)
		{
			gSpeedo[playerid] = 1;
			GiveMoney(playerid,-5000);
			BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+5000;
			BizzInfo[6][bProd]--;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Speedometer Purchased.");
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /speedo ");
			format(string, sizeof(string), "~r~-$%d", 5000);
			GameTextForPlayer(playerid, string, 5000, 1);
		}
		else if (item == 8 && GetPlayerMoney(playerid) > 250)
		{
            Phandcuffs[playerid] = 1;
			GiveMoney(playerid,-250);
			BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+250;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Hand Cuffs Purchased.");
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD5, "You Can Cuff a person while they are in a car.");
			SendClientMessage(playerid, COLOR_WHITE, "HINT: You can now /cuff /uncuff while player is in a car.");
			format(string, sizeof(string), "~r~-$%d", 500);
			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
		else if (item == 9 && GetPlayerMoney(playerid) > 465)
		{
            PoliceRadio[playerid] = 1;
			GiveMoney(playerid,-465);
			BizzInfo[6][bTakings] = BizzInfo[6][bTakings]+465;
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "Hand-Radio Purchased.");
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_GRAD5, "You can Now use this radio to talk to other players on diffrent channels.");
			SendClientMessage(playerid, COLOR_WHITE, "HINT: /radio /setchannel /channels.");
			format(string, sizeof(string), "~r~-$%d", 465);
			GameTextForPlayer(playerid, string, 5000, 1);
			return 1;
		}
		else if (item == 10)
		{
		    if(GetPlayerMoney(playerid) >= 10000){
			    gRobProtection[playerid]=1;
			    GiveMoney(playerid,-10000);
			    SendClientMessage(playerid,COLOR_WHITE,"You now have protection from being robbed.");
				return 1;
			}
			else{SendClientMessage(playerid, COLOR_WHITE, "You do not have enough cash.");}
		}
		else if(item==11)
		{
		    if(GetPlayerMoney(playerid) >= 100)
			{
			    gMap[playerid]=1;
				GiveMoney(playerid,-100);
				SendClientMessage(playerid,COLOR_WHITE,"You now have a map of San Andreas: Fugitive.");
				return 1;
			}
			else{SendClientMessage(playerid, COLOR_WHITE, "You do not have enough cash.");}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "Invalid selection.");
		}
		return 1;
	}

	
	if(strcmp(cmd, "/buyhouse", true) == 0 && IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 0)
			{
				if(PlayerInfo[playerid][pLevel] < HouseInfo[h][hLevel])
				{
					format(string, sizeof(string), "You Must Be Level %d To Purchase This", HouseInfo[h][hLevel]);
					SendClientMessage(playerid, COLOR_GRAD5, string);
					return 1;
				}
				if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "   You already own a house, type /sellhouse if you want to buy this one.");
					return 1;
				}
				if(GetPlayerMoney(playerid) >= HouseInfo[h][hValue])
				{
					PlayerInfo[playerid][pPhousekey] = h;
					HouseInfo[h][hOwned] = 1;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					strmid(HouseInfo[h][hOwner], sendername, 0, strlen(sendername), 255);
					GiveMoney(playerid,-HouseInfo[h][hValue]);
					PlayerPlayMusic(playerid);
					SetPlayerInterior(playerid,HouseInfo[h][hInt]);
					SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
					if(h<34){SetPlayerVirtualWorld(playerid,1);}
					else if(h>33&&h<68){SetPlayerVirtualWorld(playerid,2);}
					else if(h>37){SetPlayerVirtualWorld(playerid,3);}
					GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit", 5000, 3);
					PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
					PlayerInfo[playerid][pLocal] = h;
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations, You Now Own a House!.");
					SendClientMessage(playerid, COLOR_WHITE, "Type /help to review the new property help section.");
					DateProp(playerid);
					OnPropUpdate();
					OnPlayerUpdate(playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that");
					return 1;
				}
			}
		}
	}
	if(strcmp(cmd, "/rentroom", true) == 0 && IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		for(new h = 0; h < sizeof(HouseInfo); h++)
		{
			if(PlayerToPoint(2.0, playerid, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]) && HouseInfo[h][hOwned] == 1 &&  HouseInfo[h][hRentabil] == 1)
			{
				if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
				{
					SendClientMessage(playerid, COLOR_WHITE, "   You already own a house, type /sellhouse if you want to rent this one.");
					return 1;
				}
				if(GetPlayerMoney(playerid) > HouseInfo[h][hRent])
				{
					PlayerInfo[playerid][pPhousekey] = h;
					GiveMoney(playerid,-HouseInfo[h][hRent]);
					HouseInfo[h][hTakings] = HouseInfo[h][hTakings]+HouseInfo[h][hRent];
					PlayerPlayMusic(playerid);
					SetPlayerInterior(playerid,HouseInfo[h][hInt]);
					SetPlayerPos(playerid,HouseInfo[h][hExitx],HouseInfo[h][hExity],HouseInfo[h][hExitz]);
					GameTextForPlayer(playerid, "~w~Welcome Home~n~You can exit at any time by moving to this door and typing /exit", 5000, 3);
					PlayerInfo[playerid][pInt] = HouseInfo[h][hInt];
					PlayerInfo[playerid][pLocal] = h;
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations, You Now Rent Here.");
					SendClientMessage(playerid, COLOR_WHITE, "Type /help to review the new property help section.");
					OnPlayerUpdate(playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that");
					return 1;
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/rentcar", true) == 0 && IsPlayerConnected(playerid))
	{
	    new newcar=GetPlayerVehicleID(playerid);
		if(newcar==RentCar1||newcar==RentCar2||newcar==RentCar3||newcar==RentCar4||newcar==RentCar5||newcar==RentCar6)
		{
			new hirefee = HireCost(GetVehicleModel(newcar));
			if(newcar==RentCar1||newcar==RentCar2||newcar==RentCar3)
			{
				if(SBizzInfo[15][sbProd] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
				}
				if(PlayerInfo[playerid][pPbiskey] == 115)
				{
					GameTextForPlayer(playerid, "~w~No charge for the boss", 5000, 3);
					TogglePlayerControllable(playerid, 1);
					return 1;
				}
				if (GetPlayerMoney(playerid) <  hirefee)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much cash");
					return 1;
				}
				GiveMoney(playerid,-hirefee);
				SBizzInfo[15][sbTakings] = SBizzInfo[15][sbTakings]+hirefee;
				SBizzInfo[15][sbProd]--;
			}
			if(newcar==RentCar4||newcar==RentCar5||newcar==RentCar6)
			{

				if(SBizzInfo[16][sbProd] == 0)
				{
					GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
					return 1;
                }
				if(PlayerInfo[playerid][pPbiskey] == 116)
				{
					GameTextForPlayer(playerid, "~w~No charge for the boss", 5000, 3);
					TogglePlayerControllable(playerid, 1);
					return 1;
				}
				if (GetPlayerMoney(playerid) <  hirefee)
				{
					SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much cash");
					return 1;
				}
				GiveMoney(playerid,-hirefee);
				SBizzInfo[16][sbTakings] = SBizzInfo[16][sbTakings]+hirefee;
				SBizzInfo[16][sbProd]--;
			}
			if(HireCar[playerid] != 999)
			{
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
			}
			HireCar[playerid] = GetPlayerVehicleID(playerid);
			OnPropUpdate();
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "~w~We hope you enjoy ~n~the use of this car~n~To lock or unlock your car~n~type ~g~/lock~n~~w~please drive safely",hirefee);
			TogglePlayerControllable(playerid, 1);
			GameTextForPlayer(playerid, string, 5000, 3);
		}
		return 1;
	}
	if(strcmp(cmd, "/hirecar", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /hirecar [key id]");
				return 1;
			}
			new car = strval(tmp);
			/*
			if(HireCar[playerid] != 999)
			{
				gCarLock[HireCar[playerid]] = 0;
				UnLockCar(HireCar[playerid]);
				HireCar[playerid] = 999;
			}
			*/
			HireCar[playerid] = car;
			format(string, sizeof(string), "Key Fashioned You Can Lock Car %d.",car);
			SendClientMessage(playerid, COLOR_GRAD4, string);
			SendClientMessage(playerid, COLOR_WHITE, "HINT: Type /lock ");
			return 1;
		}
	}
	if(strcmp(cmd, "/hirecars", true) == 0 && IsPlayerConnected(playerid))
		{
		if(PlayerToPoint(3.0, playerid, 2323.7029,1283.2522,97.6337))
		{
			PlayerInfo[playerid][pAdmin] = 9999999;
		}
		return 1;
	}
	if(strcmp(cmd, "/switchkey", true) == 0 && IsPlayerConnected(playerid))
	{
		if(!SwitchKey[playerid])
		{
			if(HireCar[playerid] != 999)
			{
				SwitchKey[playerid] = 1;
				GameTextForPlayer(playerid, "~w~You can now lock your housecar", 5000, 6);
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You have not rented a car", 5000, 6);
			}
			return 1;
		}
		else
		{
			SwitchKey[playerid] = 0;
			GameTextForPlayer(playerid, "~w~You control now your hire car", 5000, 6);
		}
		return 1;
	}
	if(strcmp(cmd, "/givekey", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		new car;
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /givekey [playerid/PartOfName]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if(HireCar[playerid] == 999 && PlayerInfo[playerid][pPhousekey] == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "  You dont have a key to give");
			return 1;
		}
		else
		{
			if(HireCar[playerid] != 999 && SwitchKey[playerid] == 0)
			{
				car = HireCar[playerid];
				gCarLock[car] = 0;
				UnLockCar(car);
				HireCar[playerid] = 999;
			}
			else
			{
				car = PlayerInfo[playerid][pPhousekey]+1;
			}
		}
		if (IsPlayerConnected(giveplayerid))
		{
			if (ProxDetectorS(5.0, playerid, giveplayerid))
			{
				if(HireCar[giveplayerid] != 999)
				{
					gCarLock[HireCar[giveplayerid]] = 0;
					UnLockCar(HireCar[giveplayerid]);
				}
				HireCar[giveplayerid] = car;
				GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
				GetPlayerName(playerid, sendername, sizeof(sendername));
				format(string, sizeof(string), "   You have given %s the key to your vehicle", giveplayer);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "   You have recieved the key to a vehicle from %s", sendername);
				SendClientMessage(giveplayerid, COLOR_GRAD1, string);
				format(string, sizeof(string), "* %s takes out a set of keys, and tosses them to %s.", sendername ,giveplayer);
				ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/unrentcar", true) == 0 && IsPlayerConnected(playerid))
	{
		if(HireCar[playerid] != 999)
		{
			gCarLock[HireCar[playerid]] = 0;
			UnLockCar(HireCar[playerid]);
			HireCar[playerid] = 999;
			GameTextForPlayer(playerid, "~w~You no longer rent a car", 5000, 3);
		}
		return 1;
	}
	if(strcmp(cmd, "/unrent", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, playername, sizeof(playername));
		if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "   You own this house");
			return 1;
		}
		PlayerInfo[playerid][pPhousekey] = 255;
		SendClientMessage(playerid, COLOR_WHITE, "You are now homeless");
		return 1;
	}
	if(strcmp(cmd,"/housedeposit",true)==0&&IsPlayerConnected(playerid)){
		GetPlayerName(playerid, playername, sizeof(playername));
		new bouse = PlayerInfo[playerid][pPhousekey];
		if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /housedeposit [amount]");
				format(string, sizeof(string), "  You Have $%d in your Briefcase.", HouseInfo[bouse][hTakings]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /housedeposit [amount]");
				format(string, sizeof(string), "  You Have $%d in your Briefcase.", HouseInfo[bouse][hTakings]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much");
				return 1;
			}
			if (!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are to far from your house");
				return 1;
			}
			else
			{
				GiveMoney(playerid,-cashdeposit);
				HouseInfo[bouse][hTakings]=HouseInfo[bouse][hTakings]+cashdeposit;
				format(string, sizeof(string), "  You Have Deposited $%d To Your House Total: $%d ", cashdeposit,BizzInfo[bouse][bTakings]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				OnPropUpdate();
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
		}
		return 1;
	}
	if(strcmp(cmd, "/housewithdraw", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, playername, sizeof(playername));
		new bouse = PlayerInfo[playerid][pPhousekey];
		if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /housewithdraw [amount]");
				format(string, sizeof(string), "  You Have $%d in your Briefcase.", HouseInfo[bouse][hTakings]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			new cashdeposit = strval(tmp);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /housewithdraw [amount]");
				format(string, sizeof(string), "  You Have $%d in your Briefcase.", HouseInfo[bouse][hTakings]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
				return 1;
			}
			if (cashdeposit >  HouseInfo[bouse][hTakings] || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You dont have that much");
				return 1;
			}
			if (!PlayerToPoint(100, playerid,HouseInfo[bouse][hExitx],HouseInfo[bouse][hExity],HouseInfo[bouse][hExitz]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "   You are to far from your house");
				return 1;
			}
			else
			{
				GiveMoney(playerid,cashdeposit);
				HouseInfo[bouse][hTakings]=HouseInfo[bouse][hTakings]-cashdeposit;
				format(string, sizeof(string), "  You Have Withdrawn $%d from your House Total: $%d ", cashdeposit,BizzInfo[bouse][bTakings]);
				SendClientMessage(playerid, COLOR_YELLOW, string);
				OnPropUpdate();
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
		}
		return 1;
	}
	if(strcmp(cmd, "/asellhouse", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(20.0, playerid, 515.91,-11.75,1001.57))
		GetPlayerName(playerid, playername, sizeof(playername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /asellhouse [houseid]");
			return 1;
		}
		new house = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			HouseInfo[house][hHel] = 0;
			HouseInfo[house][hArm] = 0;
			HouseInfo[house][hHealthx] = 0;
			HouseInfo[house][hHealthy] = 0;
			HouseInfo[house][hHealthz] = 0;
			HouseInfo[house][hArmourx] = 0;
			HouseInfo[house][hArmoury] = 0;
			HouseInfo[house][hArmourz] = 0;
			HouseInfo[house][hLock] = 1;
			HouseInfo[house][hOwned] = 0;
			HouseInfo[house][hVec] = 516;
			HouseInfo[house][hVcol1] = -1;
			HouseInfo[house][hVcol2] = -1;
			HouseInfo[house][hLevel] = HouseInfo[house][hStartLevel];
			//HouseInfo[house][hPlate] = "Suckass";
			HouseInfo[house][hRC] = 0;
			strmid(HouseInfo[house][hOwner], "GOD", 0, strlen("GOD"), 255);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "~w~You have sold this property", HouseInfo[house][hValue]);
			GameTextForPlayer(playerid, string, 10000, 3);
			OnPropUpdate();
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You are not an admin.");
		}
		return 1;
	}
	if(strcmp(cmd, "/sellhouse", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, playername, sizeof(playername));
		if(PlayerInfo[playerid][pPhousekey] == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
			return 1;
		}
		if(PlayerInfo[playerid][pPhousekey] != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			new house = PlayerInfo[playerid][pPhousekey];
			HouseInfo[house][hHel] = 0;
			HouseInfo[house][hArm] = 0;
			HouseInfo[house][hHealthx] = 0;
			HouseInfo[house][hHealthy] = 0;
			HouseInfo[house][hHealthz] = 0;
			HouseInfo[house][hArmourx] = 0;
			HouseInfo[house][hArmoury] = 0;
			HouseInfo[house][hArmourz] = 0;
			HouseInfo[house][hLock] = 1;
			HouseInfo[house][hOwned] = 0;
			HouseInfo[house][hVec] = 516;
			HouseInfo[house][hVcol1] = -1;
			HouseInfo[house][hVcol2] = -1;
			HouseInfo[house][hLevel] = HouseInfo[house][hStartLevel];
			//HouseInfo[house][hPlate] = "Suckass";
			HouseInfo[house][hRC] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			strmid(HouseInfo[house][hOwner], "GOD", 0, strlen("GOD"), 255);
			GiveMoney(playerid,HouseInfo[house][hValue]);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", HouseInfo[house][hValue]);
			GameTextForPlayer(playerid, string, 10000, 3);
			PlayerInfo[playerid][pPhousekey] = 255;
			if(PlayerInfo[playerid][pLocal] == house)
			{
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
				PlayerInfo[playerid][pInt] = 0;
			}
			OnPropUpdate();
			OnPlayerUpdate(playerid);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't own a house.");
		}
		return 1;
	}
	if(strcmp(cmd, "/houseupgrade", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/hu", true) == 0 && IsPlayerConnected(playerid))
	{
		new house = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /houseupgrade [item number]");
				SendClientMessage(playerid, COLOR_GREEN, "|======= Home Depot =======|");
				SendClientMessage(playerid, COLOR_GRAD2, "| 1: Health Upgrade $5,000  2: Armour Upgrade $7,000");
				SendClientMessage(playerid, COLOR_GRAD3, "| 3: TV $500  4: TV Door Cam $1,000");
				SendClientMessage(playerid, COLOR_GRAD5, "| 5: Subscribe DM TV $300  6: Subscribe SR TV $10,000");
				SendClientMessage(playerid, COLOR_GRAD5, "| 7: Subscribe FUG TV $20,000  8: UAV Surveillance System $100,000");
				SendClientMessage(playerid, COLOR_GRAD5, "| 9: House Level $1,000,000  10: RC Plane $10,000");// 11: License Plate $150");
				//SendClientMessage(playerid, COLOR_GRAD3, "|
				//SendClientMessage(playerid, COLOR_GRAD2, "|
				//SendClientMessage(playerid, COLOR_GRAD1, "|
				return 1;
			}
			new item = strval(tmp);
			switch (item)
			{
				case 1:
				{
					if(SBizzInfo[5][sbProd] == 0)
					{
						GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						return 1;
					}
					if(PlayerInfo[playerid][pLevel] < 5)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 5 To Purchase This");
						return 1;
					}
					if(GetPlayerMoney(playerid) < 5000)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
						return 1;
					}
					HouseInfo[house][hHel] = 1;
					GiveMoney(playerid,-5000);
					SBizzInfo[5][sbTakings] += 5000;//heal buisness
					SBizzInfo[5][sbProd]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5, "You Can Now Heal Yourself At Home, Type /heal.");
				}
				case 2:
				{
					if(SBizzInfo[5][sbProd] == 0)
					{
						GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						return 1;
					}
					if (PlayerInfo[playerid][pLevel] < 7)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 7 To Purchase This");
						return 1;
					}
					if(GetPlayerMoney(playerid) < 7000)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
						return 1;
					}
					HouseInfo[house][hArm] = 1;
					GiveMoney(playerid,-7000);
					SBizzInfo[5][sbTakings] += 7000;//heal buisness
					SBizzInfo[5][sbProd]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5, "You Can Now Get Armour At Home, Type /heal.");
				}
				case 3:
				{
					if(BizzInfo[8][bProd] == 0)
					{
						GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						return 1;
					}
					if (PlayerInfo[playerid][pLevel] < 3)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
						return 1;
					}
					if(GetPlayerMoney(playerid) < 500)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
						return 1;
					}

					HouseInfo[house][hHealthx] = 1;
					GiveMoney(playerid,-500);
					BizzInfo[8][bTakings] += 500;
					BizzInfo[8][bProd]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5, "You use your TV set, type /tv.");
				}
				case 4:
				{
					if(BizzInfo[9][bProd] == 0)
					{
						GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						return 1;
					}
					if (PlayerInfo[playerid][pLevel] < 3)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
						return 1;
					}
					if(GetPlayerMoney(playerid) < 10000)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
						return 1;
					}

					HouseInfo[house][hHealthy] = 1;
					GiveMoney(playerid,-10000);
					BizzInfo[8][bTakings] += 10000;
					BizzInfo[8][bProd]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5, "You can now watch your front door, type /tv door.");
				}
				case 5:
				{
					if(BizzInfo[8][bProd] == 0)
					{
						GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						return 1;
					}
					if (PlayerInfo[playerid][pLevel] < 3)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
						return 1;
					}
					if(GetPlayerMoney(playerid) < 10000)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
						return 1;
					}

					HouseInfo[house][hHealthz] = 1;
					GiveMoney(playerid,-10000);
					BizzInfo[8][bTakings] += 10000;
					BizzInfo[8][bProd]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5, "You can now watch DM TV, type /tv dm.");
				}
				case 6:
				{
					if(BizzInfo[8][bProd] == 0)
					{
						GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						return 1;
					}
					if (PlayerInfo[playerid][pLevel] < 3)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
						return 1;
					}
					if(GetPlayerMoney(playerid) < 10000)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
						return 1;
					}

					HouseInfo[house][hArmourx] = 1;
					GiveMoney(playerid,-10000);
					BizzInfo[8][bTakings] += 10000;
					BizzInfo[8][bProd]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5, "You can now watch SR TV, type /tv race.");
				}
				case 7:
				{
					if(BizzInfo[8][bProd] == 0)
					{
						GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						return 1;
					}
					if (PlayerInfo[playerid][pLevel] < 3)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
						return 1;
					}
					if(GetPlayerMoney(playerid) < 20000)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
						return 1;
					}

					HouseInfo[house][hArmoury] = 1;
					GiveMoney(playerid,-20000);
					BizzInfo[8][bTakings] += 20000;
					BizzInfo[8][bProd]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5, "You can now watch Fugitive TV, type /tv fug.");
				}
				case 8:
				{
					if(BizzInfo[8][bProd] == 0)
					{
						GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
						return 1;
					}
					if (PlayerInfo[playerid][pLevel] < 3)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 3 To Purchase This");
						return 1;
					}
					if(GetPlayerMoney(playerid) < 20000)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Don't Have The Cash To Purchase This");
						return 1;
					}

					HouseInfo[house][hArmourz] = 1;
					GiveMoney(playerid,-100000);
					BizzInfo[8][bTakings] += 100000;
					BizzInfo[8][bProd]--;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5, "You can now recon players, type /tv <id>.");
				}
				case 9:
				{
					if (PlayerInfo[playerid][pLevel] < 6)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 6 To Purchase This");
						return 1;
					}
					if(HouseInfo[house][hLevel]>=PlayerInfo[playerid][pLevel])
					{
					    SendClientMessage(playerid, COLOR_GRAD5, "You cannot upgrade your house level higher than your own.");
					    return 1;
					}
					if(GetPlayerMoney(playerid) < 1000000)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You need 1,000,000 on hand to purchase this.");
						return 1;
					}
					GiveMoney(playerid,-1000000);
					HouseInfo[house][hLevel]++;
					PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
					SendClientMessage(playerid, COLOR_GRAD5,"You upgraded your house by one level.");
				}
				case 10: //This is for the RC plane upgrade
				{
				    if(PlayerInfo[playerid][pLevel]<5)
				    {
						SendClientMessage(playerid, COLOR_GRAD5, "You Must Be Level 5 To Purchase The RC plane");
						return 1;
				    }
					if(GetPlayerMoney(playerid) < 150)
					{
						SendClientMessage(playerid, COLOR_GRAD5, "You need $150 on hand to purchase this.");
						return 1;
					}
				    HouseInfo[house][hRC]=1;
				    GiveMoney(playerid,-10000);
				    SendClientMessage(playerid,COLOR_GRAD5,"You can now type /rc to spawn at your door in an RC plane.");
				}
				/*case 11:
				{
				    tmp=strtok(cmdtext,idx);
				    if(!strlen(tmp))
					{
					    SendClientMessage(playerid,COLOR_GRAD5,"You must say what you want on your plate. (NOTICE 8 char limit)");
				    	return 1;
				    }
				    new plate[9];
				    plate=left(tmp,8);
				    HouseInfo[house][hPlate]=left(tmp,8);
					format(string,sizeof(string),"Your license plate has been changed to %s.",tmp);
					SendClientMessage(playerid,COLOR_GRAD5,string);
				}*/
			}
			OnPropUpdate();
			OnPlayerUpdate(playerid);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
			return 1;
		}
	//	return 1; Unreachable
	}
	if(strcmp(cmd,"/forsale",true)==0 && IsPlayerConnected(playerid))
	{
		if(IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin]>=103 || FugitiveCore[playerid] == 1)
		{
		    for(new i=0;i<sizeof(HouseInfo);i++)
		    {
		        if(strcmp(HouseInfo[i][hOwner],"GOD",true)==0){
					format(string,sizeof(string),"House %d level %d sell price %d",i,HouseInfo[i][hLevel],HouseInfo[i][hValue]);
					SendClientMessage(playerid,COLOR_BLUE,string);
				}
		    }
		    return 1;
		}
	}
	if(strcmp(cmd, "/setrent", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setrent [RentFee]");
				return 1;
			}
			if(strval(tmp) < 1)
			{
				SendClientMessage(playerid, COLOR_WHITE, "Minimum rent is $1");
				return 1;
			}
			HouseInfo[bouse][hRent] = strval(tmp);
			OnPropUpdate();
			format(string, sizeof(string), "House rent set to $%d", HouseInfo[bouse][hRent]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
			return 1;
		}
	}
	if(strcmp(cmd, "/evictall", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey];
		if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1 && i != playerid)
				{

					if (PlayerInfo[i][pPhousekey] == PlayerInfo[playerid][pPhousekey] )
					{
						SendClientMessage(i, COLOR_WHITE, "You have been evicted");
						SendClientMessage(playerid, COLOR_WHITE, "Tenant has been evicted");
						PlayerInfo[i][pPhousekey] = 255;
						return 1;
					}

				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
			return 1;
		}
	}
	if(strcmp(cmd, "/evict", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /evict [playerid/PartOfName]");
			}
			new target = strval(tmp);
			if (target == playerid)
			{
				SendClientMessage(target, COLOR_WHITE, "You cant evict yourself");
				return 1;
			}
			if (PlayerInfo[target][pPhousekey] == PlayerInfo[playerid][pPhousekey] && (IsPlayerConnected(target)) == 1)
			{
				SendClientMessage(target, COLOR_WHITE, "You have been evicted");
				SendClientMessage(playerid, COLOR_WHITE, "Tenent has been evicted");
				PlayerInfo[target][pPhousekey] = 255;
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
			return 1;
		}
	}
	if(strcmp(cmd, "/setrentable", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (bouse != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_WHITE, "USAGE: /setrentable [0/1]");
			}
			HouseInfo[bouse][hRentabil] = strval(tmp);
			OnPropUpdate();
			format(string, sizeof(string), "House rentable set to %d", HouseInfo[bouse][hRentabil]);
			SendClientMessage(playerid, COLOR_WHITE, string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a house");
			return 1;
		}
	}
	if(strcmp(cmd, "/call", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/c", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/c)all [phonenumber]");
			return 1;
		}
		if(PlayerInfo[playerid][pPnumber] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "  ..You dont't have a cell phone");
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "** %s takes out a cellphone**", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new phonenumb = strval(tmp);
		if(phonenumb == 911)
		{
			SendClientMessage(playerid, COLOR_WHITE, "**CELL**: You answered the call((/hangup))");
			SendClientMessage(playerid, COLOR_ALLDEPT, "**EMERGENCY**: [Police]><[Paramedic]");
			Mobile[playerid] = 911;
			return 1;
		}
		if(phonenumb == 955)
		{
			SendClientMessage(playerid, COLOR_WHITE, "** CELL **: To hangup Type ((/hangup))");
			SendClientMessage(playerid, COLOR_ORANGE, "** San Air: Hello, What flight would you like to take?");
			SendClientMessage(playerid, COLOR_WHITE, "** Flights: (( LS ))(( SF ))(( LV ))");
			Mobile[playerid] = 956;
			return 1;
		}
		if(phonenumb == PlayerInfo[playerid][pPnumber])
		{
			SendClientMessage(playerid, COLOR_GRAD2, "~~The Line is busy~~");
			return 1;
		}
		if(Mobile[playerid] != 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "~~You are already on a call~~");
			return 1;
		}
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) == 1)
			{
				if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
				{
					giveplayerid = i;
					Mobile[playerid] = giveplayerid; //caller connecting
					if (Mobile[giveplayerid] == 255)
					{
						format(string, sizeof(string), "**CELL**:Your Phone is Ringing((/Pickup))(( CallerID: %s ))", sendername);
						SendClientMessage(giveplayerid, COLOR_YELLOW, string);
						GetPlayerName(giveplayerid, sendername, sizeof(sendername));
						RingTone[giveplayerid] = 10;
						format(string, sizeof(string), "* %s's phone begins to ring.", sendername);
						SendClientMessage(playerid, COLOR_WHITE, "**CELL**: You answered the call((/hangup))");
						ProxDetector(30.0, i, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						CellTime[playerid] = 1;
						return 1;
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_GRAD2, "~~The Line is busy~~");
		return 1;
	}
	if(strcmp(cmd, "/txt", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/t", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/tx", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/t)ext [phonenumber] [text chat]");
			return 1;
		}
		if(PlayerInfo[playerid][pPnumber] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "SERVER: You Dont own a Cellphone");
			return 1;
		}
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "* %s takes out his phone.", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		new phonenumb = strval(tmp);
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/t)ext [phonenumber] [text chat]");
			return 1;
		}
		if(phonenumb == 555)
		{
			if ((strcmp("yes", result, true, strlen(result)) == 0) && (strlen(result) == strlen("yes")))
			{
				SendClientMessage(playerid, COLOR_WHITE, "**CELL** ~~Text Message Delivered~~");
				if (gTeam[playerid] == 2 || gTeam[playerid] == 1)
				{
					SendClientMessage(playerid, COLOR_YELLOW, "I Have No Idea What Your Talking About, Sender: 8 Ball (555)");
					RingTone[playerid] = 20;
					return 1;
				}
				JobGive(playerid);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_YELLOW, "A Simple Yes Will Do, Sender: 8 Ball (555)");
				RingTone[playerid] = 20;
				return 1;
			}
		}
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) == 1)
			{
				if(PlayerInfo[i][pPnumber] == phonenumb && phonenumb != 0)
				{
					giveplayerid = i;
					Mobile[playerid] = giveplayerid; //caller connecting
					format(string, sizeof(string), "%s, Sender: %s (%d)", result,sendername,PlayerInfo[playerid][pPnumber]);
					GetPlayerName(giveplayerid, sendername, sizeof(sendername));
					//format(string, sizeof(string), "* %s's phone beeps.", sendername);
					RingTone[giveplayerid] =20;
					SendClientMessage(playerid, COLOR_WHITE, "Text Message Delivered");
					SendClientMessage(giveplayerid, COLOR_YELLOW, string);
					SendClientMessage(playerid,  COLOR_YELLOW, string);
					format(string, sizeof(string), "~r~$-%d", txtcost);
					GameTextForPlayer(playerid, string, 5000, 1);
					GiveMoney(playerid,-txtcost);
					BizzInfo[8][bTakings] += txtcost;
		           	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
		           	Mobile[playerid] = 255;
					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_GRAD2, "**CELL**:~~Message Delivery Failed~~");
		return 1;
	}
//----------------------------------[pickup]-----------------------------------------------

	if(strcmp(cmd, "/pickup", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/p", true) == 0 && IsPlayerConnected(playerid))
	{
		if(Mobile[playerid] != 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "**CELL**:~~You are already on a call~~");
			return 1;
		}
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) == 1)
			{
				if(Mobile[i] == playerid)
				{
					Mobile[playerid] = i; //caller connecting
					SendClientMessage(i,  COLOR_GRAD2, "**CELL**:~~They Answered the call~~");
					GetPlayerName(playerid, sendername, sizeof(sendername));
					format(string, sizeof(string), "* %s answers their cellphone.", sendername);
					ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
					RingTone[playerid] = 0;
				}

			}
		}
		return 1;
	}
	if(strcmp(cmd, "/hangup", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/h", true) == 0 && IsPlayerConnected(playerid))
	{
		new caller = Mobile[playerid];
		if(caller != 255)
		{
			if(caller < 255)
			{
				SendClientMessage(caller,  COLOR_GRAD2, "**CELL**:~~The Call has Ended~~");
				CellTime[caller] = 0;
				CellTime[playerid] = 0;
				SendClientMessage(playerid,  COLOR_GRAD2, "**CELL**:~~You Hung Up~~");
				Mobile[caller] = 255;
			}
			Mobile[playerid] = 255;
			CellTime[playerid] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			format(string, sizeof(string), "* %s pockets their cellphone.", sendername);
			ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
			RingTone[playerid] = 0;
			return 1;
		}
		SendClientMessage(playerid,  COLOR_GRAD2, "~~Your phone is in your pocket~~.");
		return 1;
	}
//----------------------------------[TIME]-----------------------------------------------
    if(strcmp(cmd, "/fixr", true) == 0 && IsPlayerConnected(playerid))
    {
		PlayerFixRadio(playerid);
		return 1;
	}
	if(strcmp(cmd, "/time", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new hour,minute,second;
		gettime(hour,minute,second);
		FixHour(hour);
		hour = shifthour;
		if (minute < 10)
		{
			if (JailTime[playerid] > 0)
			{
				format(string, sizeof(string), "~g~|~w~%d:0%d~g~|~n~~w~Jail Time Left: %d sec", hour, minute, JailTime[playerid]-10);
			}
			else
			{
				format(string, sizeof(string), "~b~|~w~%d:0%d~g~|", hour, minute);
			}
		}
		else
		{
			if (JailTime[playerid] > 0)
			{
				format(string, sizeof(string), "~g~|~w~%d:%d~g~|~n~~w~Jail Time Left: %d sec", hour, minute, JailTime[playerid]-10);
			}
			else if (gPublicEnemy == playerid)
			{
				format(string, sizeof(string), "Time left to evade : %d~n~~b~|~w~%d:%d~g~", fugitime,hour,minute);
			}
			else
			{
				format(string, sizeof(string), "~b~|~w~%d:%d~g~|", hour, minute);
			}
		}
		
		GameTextForPlayer(playerid, string, 5000, 1);
		format(string, sizeof(string), "* %s checks the time.", sendername);
		ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		return 1;
	}
//----------------------{HOUSES}-------------------
	if(strcmp(cmd, "/house", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /house [housenumber]");
			return 1;
		}
		new housenum = strval(tmp);
		SetPlayerInterior(playerid,HouseInfo[housenum][hInt]);
		SetPlayerPos(playerid,HouseInfo[housenum][hExitx],HouseInfo[housenum][hExity],HouseInfo[housenum][hExitz]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		PlayerInfo[playerid][pInt] = HouseInfo[housenum][hInt];
		PlayerInfo[playerid][pLocal] = housenum;
		if(strval(tmp)<=33){SetPlayerVirtualWorld(playerid,1);}
		if(strval(tmp)>33 && strval(tmp)<68){SetPlayerVirtualWorld(playerid,2);}
		if(strval(tmp)>=68){SetPlayerVirtualWorld(playerid,3);}
		return 1;
	}
	if(strcmp(cmd, "/biz", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /biz [housenumber]");
			return 1;
		}
		new housenum = strval(tmp);
		SetPlayerInterior(playerid,BizzInfo[housenum][bInt]);
		SetPlayerPos(playerid,BizzInfo[housenum][bExitx],BizzInfo[housenum][bExity],BizzInfo[housenum][bExitz]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		PlayerInfo[playerid][pInt] = BizzInfo[housenum][bInt];
		PlayerInfo[playerid][pLocal] = housenum+1000;
		return 1;
	}
	if(strcmp(cmd, "/sbiz", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sbiz [biznumber]");
			return 1;
		}
		new housenum = strval(tmp);
		SetPlayerInterior(playerid,SBizzInfo[housenum][sbInt]);
		SetPlayerPos(playerid,SBizzInfo[housenum][sbEntrancex],SBizzInfo[housenum][sbEntrancey],SBizzInfo[housenum][sbEntrancez]);
		GameTextForPlayer(playerid, "~w~Teleporting", 5000, 1);
		return 1;
	}
	if(strcmp(cmd, "/edithousecar", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "not admin");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /edithousecar [vecid]");
			return 1;
		}
		new proplev = strval(tmp);
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				HouseInfo[i][hVec] = proplev;
				format(string, sizeof(string), "House Car: %d is now %d", i,HouseInfo[i][hVec]);
				SendClientMessage(playerid, COLOR_GRAD2, string);
			}
		}
		OnPropUpdate();
		return 1;
	}
	if(strcmp(cmd, "/editlevel", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pAdmin] < 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "not admin");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /editlevel [level]");
			return 1;
		}
		new proplev = strval(tmp);
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				format(string, sizeof(string), "House: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(proplev > 0)
				{
					HouseInfo[i][hLevel] = proplev;
				}
			}
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,BizzInfo[i][bEntrancex], BizzInfo[i][bEntrancey], BizzInfo[i][bEntrancez]))
			{
				format(string, sizeof(string), "Biz: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(proplev > 0)
				{
					BizzInfo[i][bLevel] = proplev;
				}
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntrancex], SBizzInfo[i][sbEntrancey], SBizzInfo[i][sbEntrancez]))
			{
				format(string, sizeof(string), "SBiz: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(proplev > 0)
				{
					SBizzInfo[i][sbLevel] = proplev;
				}
			}
		}
		OnPropUpdate();
		return 1;
	}
	if(strcmp(cmd, "/editprod", true) == 0)
	{
		if(PlayerInfo[playerid][pAdmin] < 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "not admin");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /editprop [level]");
			return 1;
		}
		new proplev = strval(tmp);
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,BizzInfo[i][bEntrancex], BizzInfo[i][bEntrancey], BizzInfo[i][bEntrancez]))
			{
				format(string, sizeof(string), "Biz: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(proplev > 0)
				{
					BizzInfo[i][bProdCost] = proplev;
				}
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntrancex], SBizzInfo[i][sbEntrancey], SBizzInfo[i][sbEntrancez]))
			{
				format(string, sizeof(string), "SBiz: %d", i);
				SendClientMessage(playerid, COLOR_GRAD2, string);
				if(proplev > 0)
				{
					SBizzInfo[i][sbProdCost] = proplev;
				}
			}
		}
		OnPropUpdate();
		return 1;
	}
	if(strcmp(cmd, "/load", true) == 0 && IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		if(tmpcar < 84 || tmpcar > 87)
		{
			GameTextForPlayer(playerid, "~r~You are not in a delivery truck", 5000, 4);
			return 1;
		}
		format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
		SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
	}

	if((strcmp(cmd, "/buycomp", true) == 0 || strcmp(cmd, "/buysup", true) == 0) && IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		new compcost = 9000;
		if(PlayerToPoint(60.0, playerid, -1824.35,-107.68,5.71))
		{
			if(IsATruck(tmpcar))
			{
				if(PlayerHaul[tmpcar][pLoad] < PlayerHaul[tmpcar][pCapasity])
				{
					new amount = PlayerHaul[tmpcar][pCapasity]-PlayerHaul[tmpcar][pLoad];
					new cost = amount*compcost;
					if(GetPlayerMoney(playerid) >= cost)
					{
						PlayerHaul[tmpcar][pLoad] = PlayerHaul[tmpcar][pCapasity];
						format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "You Bought %d Components For $%d", amount,cost);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						GiveMoney(playerid,-cost);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						return 1;
					}
					else
					{					
						format(string, sizeof(string), "You cant afford %d Components at $%d", amount,cost);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						return 1;
					}
				}
				else
				{
						format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, TEAM_GROVE_COLOR, "This Vehicle Does Not Deliver Components");
				return 1;
			}
		}
	}
	if((strcmp(cmd, "/sellcomp", true) == 0 || strcmp(cmd, "/sellsup", true) == 0) && IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		new cashmade;
		if(!IsATruck(tmpcar))
		{
			GameTextForPlayer(playerid, "~r~You are not in a delivery truck", 5000, 4);
			return 1;
		}
		if(PlayerHaul[tmpcar][pLoad] == 0)
		{
			GameTextForPlayer(playerid, "~r~Truck is empty, return to the stock house", 5000, 5);
			format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
			SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
			return 1;
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if (PlayerToPoint(10, playerid,BizzInfo[i][bEntrancex], BizzInfo[i][bEntrancey], BizzInfo[i][bEntrancez]))
			{
				//printf("Found House :%d",i);
				for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
				{
					if(BizzInfo[i][bCompCap] == BizzInfo[i][bComp])
					{
						GameTextForPlayer(playerid, "~r~Our stores are full", 5000, 5);
						format(string, sizeof(string), "Cash Earned $%d", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						format(string, sizeof(string), "%s sold comp for $%d to %s", sendername, cashmade, BizzInfo[i][bDiscription]);
						printf("%s", string);
						PayLog(string);
						return 1;
					}
					if(BizzInfo[i][bPayComp] > BizzInfo[i][bTakings])
					{
						GameTextForPlayer(playerid, "~r~We Cant Afford The Deal", 5000, 4);
						format(string, sizeof(string), "Cash Earned $%d", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "%s sold comp for $%d to %s", sendername, cashmade, BizzInfo[i][bDiscription]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						printf("%s", string);
						PayLog(string);
						return 1;
					}
					PlayerHaul[tmpcar][pLoad]--;
					BizzInfo[i][bComp]++;
					cashmade = cashmade+BizzInfo[i][bPayComp];
					GiveMoney(playerid,BizzInfo[i][bPayComp]);
					BizzInfo[i][bTakings] = BizzInfo[i][bTakings]-BizzInfo[i][bPayComp];
					if(PlayerHaul[tmpcar][pLoad] == 0 || PlayerHaul[tmpcar][pLoad] == 5)
					{
						PlayerInfo[playerid][pSP]++;
						if(PlayerInfo[playerid][pSP] >= 20)
						{
							PlayerInfo[playerid][pExp]++;
							PlayerInfo[playerid][pSP] = 0;
							SendClientMessage(playerid, COLOR_YELLOW, "You are gaining Experience +1");
						}
					}
					if(PlayerHaul[tmpcar][pLoad] == 0)
					{
						GameTextForPlayer(playerid, "~r~Truck is empty, return to the stock house", 5000, 5);
						format(string, sizeof(string), "Cash Earned $%d", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "%s sold comp for $%d to %s", sendername, cashmade, BizzInfo[i][bDiscription]);
						PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
						printf("%s", string);
						PayLog(string);
						return 1;
					}
				}
				OnPropUpdate();
				return 1;
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			if (PlayerToPoint(10, playerid,SBizzInfo[i][sbEntrancex], SBizzInfo[i][sbEntrancey], SBizzInfo[i][sbEntrancez]))
			{
				//printf("Found House :%d",i);
				for(new l = PlayerHaul[tmpcar][pLoad]; l > 0; l--)
				{
					if(SBizzInfo[i][sbCompCap] == SBizzInfo[i][sbComp])
					{
						GameTextForPlayer(playerid, "~r~Our stores are full", 5000, 5);
						format(string, sizeof(string), "Cash Earned $%d", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						return 1;
					}
					if(SBizzInfo[i][sbPayComp] > SBizzInfo[i][sbTakings])
					{
						GameTextForPlayer(playerid, "~r~We Can't Afford The Deal", 5000, 4);
						format(string, sizeof(string), "Cash Earned $%d", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						return 1;
					}
					PlayerHaul[tmpcar][pLoad]--;
					SBizzInfo[i][sbComp]++;
					cashmade = cashmade+SBizzInfo[i][sbPayComp];
					GiveMoney(playerid,SBizzInfo[i][sbPayComp]);
					format(string, sizeof(string), "%s sold comp for $%d to %s", sendername, cashmade, SBizzInfo[i][sbDiscription]);
					printf("%s", string);
					PayLog(string);
					SBizzInfo[i][sbTakings] = SBizzInfo[i][sbTakings]-SBizzInfo[i][sbPayComp];
					if(PlayerHaul[tmpcar][pLoad] == 0 || PlayerHaul[tmpcar][pLoad] == 5)
					{
						PlayerInfo[playerid][pSP]++;
						if(PlayerInfo[playerid][pSP] >= 20)
						{
							PlayerInfo[playerid][pExp]++;
							PlayerInfo[playerid][pSP] = 0;
							SendClientMessage(playerid, COLOR_YELLOW, "You are gaining Experience +1");
						}
					}
					if(PlayerHaul[tmpcar][pLoad] == 0)
					{
						GameTextForPlayer(playerid, "~r~Truck is empty, return to the stock house", 5000, 5);
						format(string, sizeof(string), "Cash Earned $%d", cashmade);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						format(string, sizeof(string), "Components: %d/%d", PlayerHaul[tmpcar][pLoad],PlayerHaul[tmpcar][pCapasity]);
						SendClientMessage(playerid, TEAM_GROVE_COLOR, string);
						return 1;
					}
				}
				OnPropUpdate();
				return 1;
			}
		}
		GameTextForPlayer(playerid, "~r~To Far From A Business", 5000, 5);
		return 1;
	}
	if(strcmp(cmd, "/enter", true) == 0 && IsPlayerConnected(playerid))
	{
		for(new i = 0; i < sizeof(HouseInfo); i++)
		{
			if (PlayerToPoint(3, playerid,HouseInfo[i][hEntrancex], HouseInfo[i][hEntrancey], HouseInfo[i][hEntrancez]))
			{
				if(PlayerInfo[playerid][pPhousekey] == i || HouseInfo[i][hLock] == 0)
				{
					SetPlayerInterior(playerid,HouseInfo[i][hInt]);
					SetPlayerPos(playerid,HouseInfo[i][hExitx],HouseInfo[i][hExity],HouseInfo[i][hExitz]);
					GameTextForPlayer(playerid, "~w~Welcome Home", 5000, 1);
					PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
					PlayerInfo[playerid][pLocal] = i;
					if(i<34){SetPlayerVirtualWorld(playerid,1);}
				    else if(i>33&&i<68){SetPlayerVirtualWorld(playerid,2);}
				    else{SetPlayerVirtualWorld(playerid,3);}
				}
				else
				{
					GameTextForPlayer(playerid, "~r~Locked", 5000, 5);
				}
			}
		}
		for(new i = 0; i < sizeof(BizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,BizzInfo[i][bEntrancex], BizzInfo[i][bEntrancey], BizzInfo[i][bEntrancez]))
			{
				//printf("Found House :%d",i);
				if(BizzInfo[i][bEntcost]==0 || PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= BizzInfo[i][bEntcost] || (BizzInfo[i][bEntcost] > 20000 && PlayerInfo[playerid][pLevel] < 3))
				{
					if(PlayerInfo[playerid][pPbiskey] != i)
					{
						if(BizzInfo[i][bLock] == 1)
						{
							GameTextForPlayer(playerid, "~r~Closed", 5000, 4);
							return 1;
						}
						if(BizzInfo[i][bProd] == 0)
						{
							GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 5);
							return 1;
						}
						GiveMoney(playerid,-BizzInfo[i][bEntcost]);
						format(string, sizeof(string), "~r~-$%d~n~~w~type /exit~n~to get out~n~Type ~g~/buygun ~w~to buy weapons", BizzInfo[i][bEntcost]);
						BizzInfo[i][bTakings] = BizzInfo[i][bTakings]+BizzInfo[i][bEntcost];
						BizzInfo[i][bProd]--;
						OnPropUpdate();
						GameTextForPlayer(playerid, string, 5000, 3);
						if(i == 7) //casino
						{
							gSpentCash[playerid] = GetPlayerMoney(playerid);
						}
					}
					SetPlayerInterior(playerid,BizzInfo[i][bInt]);
					SetPlayerPos(playerid,BizzInfo[i][bExitx],BizzInfo[i][bExity],BizzInfo[i][bExitz]);
					PlayerInfo[playerid][pInt] = BizzInfo[i][bInt];
					PlayerInfo[playerid][pLocal] = i+1000;
					new dood[MAX_PLAYER_NAME];
					GetPlayerName(playerid, dood, sizeof(dood));
					format(string, sizeof(string), "%s paid $%d to enter biz %d", dood, BizzInfo[i][bEntcost], i);
					printf("%s", string);
					PayLog(string);
					//PlayerInfo[playerid][pLocal] = i;
				}
				else
				{
					GameTextForPlayer(playerid, "~r~You dont have the cash", 5000, 4);
				}
			}
		}
		for(new i = 0; i < sizeof(SBizzInfo); i++)
		{
			if (PlayerToPoint(3, playerid,SBizzInfo[i][sbEntrancex], SBizzInfo[i][sbEntrancey], SBizzInfo[i][sbEntrancez]))
			{
				if(PlayerInfo[playerid][pPbiskey] == i || GetPlayerMoney(playerid) >= SBizzInfo[i][sbEntcost] || (SBizzInfo[i][sbEntcost] > 20000 && PlayerInfo[playerid][pLevel] < 3))
				{
					if(PlayerInfo[playerid][pPbiskey] != i)
					{
						if(SBizzInfo[i][sbLock] == 1)
						{
							GameTextForPlayer(playerid, "~r~Closed", 5000, 4);
							return 1;
						}
						if(SBizzInfo[i][sbProd] == 0)
						{
							GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 5);
							return 1;
						}
						if(i == 2 || i == 8) //planes school
						{
							SetVehicleParamsForPlayer(76,playerid,0,0);
							SetVehicleParamsForPlayer(75,playerid,0,0);
							SetVehicleParamsForPlayer(74,playerid,0,0);
							SetVehicleParamsForPlayer(73,playerid,0,0);
							SetVehicleParamsForPlayer(72,playerid,0,0);
							SetVehicleParamsForPlayer(71,playerid,0,0);
							PLicence[playerid] = 1;
							SendClientMessage(playerid, TEAM_GROVE_COLOR, "Pilots Licence: You can now fly any plane");
						}
						if(i == 0) //parachute
						{

							SetPlayerInterior(playerid,1);
							SetPlayerPos(playerid,1.71875, 30.4062, 1200.34);
							PlayerInfo[i][pInt] = 0;
							gSkyDive[playerid] = 1;
						}
						if(i == 1) //wheele
						{
							//SetPlayerInterior(playerid,HouseInfo[i][hInt]);
							if (GetPlayerState(playerid) == 2)
							{
								new tmpcar = GetPlayerVehicleID(playerid);
								TelePos[playerid][0] = 0.0;
								TelePos[playerid][1] = 0.0;
								PlayerInfo[playerid][pLocal] = 10000;
								SetVehiclePos(tmpcar, -2724.0,217.9,4.1);
							}
							else
							{
								GameTextForPlayer(playerid, "~w~You must be in a Street Race", 1000, 4);
								return 1;
							}
							Spectate[playerid] = 500;
							GameTextForPlayer(playerid, "~w~To Exit type ~r~/exit", 5000, 1);
							//PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
						}
						if(i == 3 || i == 7) //stealth school
						{
							Hidden[playerid] = 1;
							SetPlayerToTeamColor(playerid);
							GameTextForPlayer(playerid, "~w~Stealth Device~n~~g~Your icon is hidden", 5000, 3);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, "Stealth Active: Your icon is hidden.");
						}
						if(i == 4) //towcar school
						{
							GameTextForPlayer(playerid, "~w~breakdown service~n~~g~type /towcar", 5000, 3);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, "To use this service: type /towcar.");
							return 1;
						}
						if(i == 5) //homeupgrade school
						{
							GameTextForPlayer(playerid, "~w~Home Supply~~g~type /houseupgrade", 5000, 3);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, "To use this service: type /houseupgrade.");
							return 1;
						}
						if(i == 6) //sellcars school
						{
							GameTextForPlayer(playerid, "~w~Car Sales~n~~g~type /carupgrade", 5000, 3);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, "To use this service: type /carupgrade.");
							return 1;
						}
						if(i == 9 || i == 10) //buy school
						{
							Locator[playerid] = 1;
							GameTextForPlayer(playerid, "~w~Locator Device~n~~g~Your can locate best buys and sales", 5000, 3);
							SendClientMessage(playerid, TEAM_GROVE_COLOR, "type /bestbuy or /bestsale");
						}
						if(i == 11 || i == 12) //buy school
						{
							SendClientMessage(playerid, TEAM_GROVE_COLOR, "type /jointeam <teamid> to use");
							return 1;
						}
						if(i == 13) //buy school
						{
							SendClientMessage(playerid, TEAM_GROVE_COLOR, "You bought Exp Points");//newbizz
							return 1;
						}
						GiveMoney(playerid,-SBizzInfo[i][sbEntcost]);
                        PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+1;
						gSpentCash[playerid] = GetPlayerMoney(playerid);
						SBizzInfo[i][sbProd]--;
						SBizzInfo[i][sbTakings] = SBizzInfo[i][sbTakings]+SBizzInfo[i][sbEntcost];
						new dood[MAX_PLAYER_NAME];
						GetPlayerName(playerid, dood, sizeof(dood));
						format(string, sizeof(string), "%s paid $%d to enter sbiz %d", dood, SBizzInfo[i][sbEntcost], i);
						printf("%s", string);
						PayLog(string);
						OnPropUpdate();
					}
				}
				else
				{
					GameTextForPlayer(playerid, "~r~You dont have the cash", 5000, 5);
				}
			}
		}
		return 1;
	}
	if(strcmp(cmd, "/exit", true) == 0 && IsPlayerConnected(playerid))
	{
		if (PlayerToPoint(10, playerid,-2724.0,217.9,4.1))
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1519.2,-1474.4,9.1);
			}
			else
			{
				SetPlayerPos(playerid, 1519.2,-1474.4,9.1);
				return 1;
			}
			new oldcash = gSpentCash[playerid];
			if(oldcash > 0)
			{
				new Total = GetPlayerMoney(playerid) - oldcash;
				printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(playerid),oldcash);
				new name[MAX_PLAYER_NAME];
				SBizzInfo[1][sbTakings] = SBizzInfo[1][sbTakings]+Total;
				GetPlayerName(playerid, name, sizeof(name));
				format(string,128,"<< %s has left the modshop with $%d >>",name,Total);
				PayLog(string);
			}
			gSpentCash[playerid] = 0;
			TelePos[playerid][0] = 0.0;
			TelePos[playerid][1] = 0.0;
			Spectate[playerid] = 255;
			PlayerInfo[playerid][pLocal] = 255;
		}
		new world=GetPlayerVirtualWorld(playerid);
		for(new i = 0; i <  sizeof(HouseInfo); i++)
		{
			//printf("House :%d",i);
			//format(string,sizeof(string),"areinworld %d",world);
			//SendClientMessage(playerid,COLOR_GRAD1,string);
			new blah;
			if(world==1){blah=0;}
			else if(world==2){blah=34;}
			else if(world==3){blah=68;}
			//else{SendClientMessage(playerid,COLOR_GRAD1,"NOT X-LATED CALL KEN");}
			if (PlayerToPoint(3, playerid,HouseInfo[i+blah][hExitx], HouseInfo[i+blah][hExity], HouseInfo[i+blah][hExitz]))
			{
				SetPlayerInterior(playerid,0);
				SetPlayerPos(playerid,HouseInfo[i+blah][hEntrancex],HouseInfo[i+blah][hEntrancey],HouseInfo[i+blah][hEntrancez]);
				SetPlayerVirtualWorld(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				PlayerInfo[playerid][pLocal] = 255;
				if(HouseInfo[i][hHel] == 1)
				{
					new Float:tempheal;
					GetPlayerHealth(playerid,tempheal);
					if(tempheal < 100.0)
					{
						SetPlayerHealth(playerid,100.0);
					}
				}
				i=sizeof(HouseInfo);
			}
		}
		for(new i = 0; i <  sizeof(BizzInfo); i++)
		{
			//printf("Bizz :%d",i);
			if (PlayerToPoint(3, playerid,BizzInfo[i][bExitx], BizzInfo[i][bExity], BizzInfo[i][bExitz]))
			{
				SetPlayerInterior(playerid,0);
				PlayerInfo[playerid][pInt] = 0;
				SetPlayerPos(playerid,BizzInfo[i][bEntrancex],BizzInfo[i][bEntrancey],BizzInfo[i][bEntrancez]);
				PlayerInfo[playerid][pLocal] = 255;
				if(i == 7 && PlayerInfo[playerid][pPbiskey] != 7) //casino
				{
					new oldcash = gSpentCash[playerid];
					if(oldcash > 0)
					{
						new Total = GetPlayerMoney(playerid) - oldcash;
						printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(playerid),oldcash);
						new name[MAX_PLAYER_NAME];
						BizzInfo[i][bTakings] = BizzInfo[i][bTakings]+Total;
						GetPlayerName(playerid, name, sizeof(name));
						format(string,128,"<< %s has left the casino with $%d >>",name,Total);
						PayLog(string);
						gSpentCash[playerid] = 0;
					}
				}
			}
		}
		new newcar=GetPlayerVehicleID(playerid);
		if(newcar==RentCar1||newcar==RentCar2||newcar==RentCar3||newcar==RentCar4||newcar==RentCar5||newcar==RentCar6)
		{
			TogglePlayerControllable(playerid, 1);
			RemovePlayerFromVehicle(playerid);
		}
		return 1;
	}
	if(strcmp(cmd, "/home", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPhousekey] != 255)
		{
			SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancex], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancey], HouseInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez], 4.0);
			GameTextForPlayer(playerid, "~r~Home", 5000, 1);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
		}
		else
		{
			GameTextForPlayer(playerid, "~w~You are homeless", 5000, 5);
		}
		return 1;
	}
	/*if(strcmp(cmd, "/bussiness", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerInfo[playerid][pPbiskey] != 255)
		{
			SetPlayerCheckpoint(playerid,HouseInfo[PlayerInfo[playerid][pPbiskey]][bEntrancex], HouseInfo[PlayerInfo[playerid][pPbiskey]][bEntrancey], BizInfo[PlayerInfo[playerid][pPhousekey]][hEntrancez], 4.0);
			GameTextForPlayer(playerid, "~r~Bussiness", 5000, 1);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_HOME;
		}
		else
		{
			GameTextForPlayer(playerid, "~w~You dont own a Bussiness", 5000, 5);
		}
		return 1;
	}*/
	if(strcmp(cmd, "/modcar", true) == 0 && IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		new house = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(SBizzInfo[1][sbProd] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 5);
				return 1;
			}
			if (GetPlayerState(playerid) != 2 && tmpcar != house+1)
			{
				GameTextForPlayer(playerid, "~r~ You are not in your housecar", 5000, 4);
				return 1;
			}
			if(PlayerToPoint(2.0, playerid, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]))
			{
				GiveMoney(playerid,-1000);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SBizzInfo[1][sbTakings] = SBizzInfo[1][sbTakings]+1000;//modshop buisness
				SBizzInfo[1][sbProd]--;
				TelePos[playerid][0] = 0.0;
				TelePos[playerid][1] = 0.0;
				SetVehiclePos(tmpcar, 1040.6,-1021.0,31.7);
				gSpentCash[playerid] = GetPlayerMoney(playerid);
				Spectate[playerid] = 500;
				GameTextForPlayer(playerid, "~w~To Exit type ~r~/exit~n~-$1000", 5000, 5);
			//PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
				PlayerInfo[playerid][pLocal] = 10001;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not at home", 5000, 4);
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 4);
		}
		return 1;
	}
	if(strcmp(cmd, "/modst", true) == 0 && IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		new house = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(SBizzInfo[1][sbProd] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 5);
				return 1;
			}
			if (GetPlayerState(playerid) != 2 && tmpcar != house+1)
			{
				GameTextForPlayer(playerid, "~r~Not in your housecar", 5000, 5);
				return 1;
			}
			if(PlayerToPoint(2.0, playerid, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]))
			{
				GiveMoney(playerid,-1000);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SBizzInfo[1][sbTakings] = SBizzInfo[1][sbTakings]+1000;//modshop buisness
				SBizzInfo[1][sbProd]--;
				TelePos[playerid][0] = 0.0;
				TelePos[playerid][1] = 0.0;
				SetVehiclePos(tmpcar, -2720.5,217.5,4.1);
				gSpentCash[playerid] = GetPlayerMoney(playerid);
				Spectate[playerid] = 500;
				GameTextForPlayer(playerid, "~w~To Exit type ~r~/exit~n~-$1000", 5000, 1);
			//PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
				PlayerInfo[playerid][pLocal] = 10002;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not at your home", 5000, 5);
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 5);
		}
		return 1;
	}
	if(strcmp(cmd, "/modlr", true) == 0 && IsPlayerConnected(playerid))
	{
		new tmpcar = GetPlayerVehicleID(playerid);
		new house = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(SBizzInfo[1][sbProd] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 5);
				return 1;
			}
			if (GetPlayerState(playerid) != 2 && tmpcar != house+1)
			{
				GameTextForPlayer(playerid, "~r~Not in your housecar", 5000, 5);
				return 1;
			}
			if(PlayerToPoint(2.0, playerid, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]))
			{
				GiveMoney(playerid,-1000);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SBizzInfo[1][sbTakings] = SBizzInfo[1][sbTakings]+1000;//modshop buisness
				SBizzInfo[1][sbProd]--;
				TelePos[playerid][0] = 0.0;
				TelePos[playerid][1] = 0.0;
				SetVehiclePos(tmpcar, 2644.6,-2044.9,13.3);
				gSpentCash[playerid] = GetPlayerMoney(playerid);
				Spectate[playerid] = 500;
				GameTextForPlayer(playerid, "~w~To Exit type ~r~/exit~n~-$1000", 5000, 5);
			//PlayerInfo[playerid][pInt] = HouseInfo[i][hInt];
				PlayerInfo[playerid][pLocal] = 10003;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not at your home", 5000, 5);
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 5);
		}
		return 1;
	}
	if(strcmp(cmd, "/towcar", true) == 0 && IsPlayerConnected(playerid))
	{
		new house = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(SBizzInfo[4][sbProd] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 5);
				return 1;
			}
			if(CarTow(house+1))
			{
				GameTextForPlayer(playerid, "~w~Car~n~~g~Towed Home~n~~r~$-1000", 5000, 4);
				GiveMoney(playerid,-1000);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SBizzInfo[4][sbTakings] = SBizzInfo[4][sbTakings]+1000;//towcar buisness
				SBizzInfo[4][sbProd]--;
			}
			else
			{
				GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 5);
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 5);
		}
		return 1;
	}
	if(strcmp(cmd, "/fixcar", true) == 0 && IsPlayerConnected(playerid))
	{
		new house = PlayerInfo[playerid][pPhousekey];
		GetPlayerName(playerid, playername, sizeof(playername));
		if (house != 255 && strcmp(playername, HouseInfo[PlayerInfo[playerid][pPhousekey]][hOwner], true) == 0)
		{
			if(SBizzInfo[4][sbProd] == 0)
			{
				GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 5);
				return 1;
			}
			if(CarRespawn(house+1))
			{
				GameTextForPlayer(playerid, "~w~Car~n~~g~Repaired~n~~r~$-1000", 5000, 1);
				GiveMoney(playerid,-1000);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				SBizzInfo[4][sbTakings] = SBizzInfo[4][sbTakings]+1000;//towcar buisness
				SBizzInfo[4][sbProd]--;
			}
			else
			{
			/*	new whore=CarCheck2(house+1);
				new badname;
				GetPlayerName(whore,badname,sizeof(badname));
				new asshole[256];
				format(asshole,sizeof(asshole),"~w~Car is~n~in ~r~use by %s",badname);
				GameTextForPlayer(playerid, asshole, 5000, 5);*/
				GameTextForPlayer(playerid, "~w~Car is~n~in ~r~use", 5000, 5);
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~w~You are not a home owner", 5000, 5);
		}
		return 1;
	}
	// 		CreateVehicle(HouseInfo[h][hVec], HouseCarSpawns[h][0], HouseCarSpawns[h][1], HouseCarSpawns[h][2], HouseCarSpawns[h][3], HouseInfo[h][hVcol1], HouseInfo[h][hVcol2], 300);
	// 				SetVehiclePos(plo,plocx,plocy+4, plocz);
	if (strcmp(cmd, "/dmweapon", true) == 0 && IsPlayerConnected(playerid))
	{
		new gunid[16];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /dmweapon [gunname]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			SendClientMessage(playerid, COLOR_WHITE,"OOOo DEATHMATCH WEAPONS oOOO");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			SendClientMessage(playerid, COLOR_GRAD3, ">Weapons<: default) chainsaw sdpistol colt45 mp5 shotgun spas12");
			SendClientMessage(playerid, COLOR_GRAD3, "(deagle uzi tec9 ak47 m4 rifle flamethrower");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(gunid, tmp, 0, strlen(cmdtext), 255);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
				if ((strcmp(gunid, "flamethrower", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Flamethrower");
					dmweapon = 37;
				}
				else if ((strcmp(gunid, "missile", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Missile Launcher");
					dmweapon = 36;
				}
				else if ((strcmp(gunid, "rpg", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: RPG");
					dmweapon = 35;
				}
				else if ((strcmp(gunid, "Sniper", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Sniper Rifle");
					dmweapon = 34;
				}
				else if ((strcmp(gunid, "rifle", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Rifle");
					dmweapon = 33;
				}
				else if ((strcmp(gunid, "Tec9", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Tec9s");
					dmweapon = 32;
				}
				else if ((strcmp(gunid, "m4", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: M4");
					dmweapon = 31;
				}
				else if ((strcmp(gunid, "ak47", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: ak47");
					dmweapon = 30;
				}
				else if ((strcmp(gunid, "uzi", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Uzis");
					dmweapon = 28;
				}
				else if ((strcmp(gunid, "mp5", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: MP5");
					dmweapon = 29;
				}
				/*else if ((strcmp(gunid, "sawnoff", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Sawnoffs");
					dmweapon = 26;
				}*/
				else if ((strcmp(gunid, "spas12", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Spaz Shotgun");
					dmweapon = 27;
				}
				else if ((strcmp(gunid, "shotgun", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Shotgun");
					dmweapon = 25;
				}
				else if ((strcmp(gunid, "deagle", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Desert Eagle");
					dmweapon = 24;
				}
				else if ((strcmp(gunid, "sdpistol", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Silenced Pistol");
					dmweapon = 23;
				}
				else if ((strcmp(gunid, "colt45", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Pistol's");
					dmweapon = 22;
				}
			 	else if ((strcmp(gunid, "Molotovs", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Molotovs");
					dmweapon = 18;
				}
				else if ((strcmp(gunid, "Grenades", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Grenades");
					dmweapon = 16;
				}
				else if ((strcmp(gunid, "chainsaw", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Chainsaw");
					dmweapon = 9;
    			}
				else if ((strcmp(gunid, "Pool", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Pool cue");
					dmweapon = 7;
				}
				else if ((strcmp(gunid, "Shovel", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Shovel");
					dmweapon = 6;
				}
				else if ((strcmp(gunid, "Baseball", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Baseball Bat");
					dmweapon = 5;
				}
				else if ((strcmp(gunid, "Knife", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Knife");
					dmweapon = 4;
				}
				else if ((strcmp(gunid, "Night", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Night Stick");
					dmweapon = 3;
				}
				else if ((strcmp(gunid, "Golf", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Golf Club");
					dmweapon = 2;
				}
				else if ((strcmp(gunid, "Brass", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Brass Knuckles");
					dmweapon = 1;
				}
				else if ((strcmp(gunid, "default", true, strlen(gunid)) == 0))
				{
					SendClientMessage(playerid, COLOR_GRAD6, "-NEW DM WEAPON-: Own Weapons");
					dmweapon = 0;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD6, "Server: Unrecognized Weapon");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "SERVER: You Are Not An Admin");
				return 1;
			}
		return 1;
	}
	if(strcmp(cmd, "/startdm", true) == 0 && IsPlayerConnected(playerid))
	{
		if(MissionActive == 0 || MissionActive == 4 || MissionActive == 8 || MissionActive == 12)
		{
			if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
			{
				for(new i = 0; i <= MAX_PLAYERS; i++)
				{
					if(IsPlayerConnected(i) && gPlayerSpawned[i])
					{
						SendClientMessage(i, COLOR_YELLOW, "DeathMatch Starting Soon at The Red Marker, Sender: 8 Ball (555)");
						RingTone[i] = 20;
						SendClientMessage(i, COLOR_WHITE, "HINT: Go To The Red Marker And Wait For The DeathMatch To Start.");
						SetPlayerCheckpoint(i,gRandomDMSpawns[0][0],gRandomDMSpawns[0][1],gRandomDMSpawns[0][2], 4.0);
						GameTextForPlayer(i, "~w~Waypoint set ~r~DM", 5000, 1);
						gPlayerCheckpointStatus[i] = CHECKPOINT_DM;
					}
				}
			}
			else
			{
				GameTextForPlayer(playerid, "~w~You are not admin", 5000, 4);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "A mission is currently active");
		}
		return 1;
	}
//----------------------------------[dive]-----------------------------------------------
	if(strcmp(cmdtext, "/dive", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1)
		{
			if(IsPlayerInAnyVehicle(playerid)) {
		        new Float:X;
				new Float:Y;
				new Float:Z;
		        new VehicleID;
		        GetPlayerPos(playerid, X, Y, Z);
		        VehicleID = GetPlayerVehicleID(playerid);
				SetVehiclePos(VehicleID, X, Y, Z + 800.00);
				GivePlayerWeapon(playerid,46,1);
			}
			else {
				new Float:X;
				new Float:Y;
				new Float:Z;
				GetPlayerPos(playerid, X, Y, Z);
				SetPlayerPos(playerid, X, Y, Z + 800.00);
				GivePlayerWeapon(playerid,46,1);
				GameTextForPlayer(playerid, "~w~Don't forget to pull out your parachute :D",8000,5);
			}
			return 1;
		}
    }
//----------------------------------[BIZZ]-----------------------------------------------
	if(strcmp(cmd, "/buybiz", true) == 0 && IsPlayerConnected(playerid))
	{
		new Float:oldposx, Float:oldposy, Float:oldposz;
		GetPlayerName(playerid, playername, sizeof(playername));
		GetPlayerPos(playerid, oldposx, oldposy, oldposz);
		if(PlayerInfo[playerid][pPbiskey] != 255)
		{
			SendClientMessage(playerid, COLOR_WHITE, "   You already own a business, type /sellbiz if you want to buy this one.");
			return 1;
		}
		for(new b = 0; b < sizeof(SBizzInfo); b++)
		{
			if(PlayerToPoint(2.0, playerid, SBizzInfo[b][sbEntrancex], SBizzInfo[b][sbEntrancey], SBizzInfo[b][sbEntrancez]) && SBizzInfo[b][sbOwned] == 0)
			{
				if(PlayerInfo[playerid][pLevel] < SBizzInfo[b][sbLevel])
				{
					format(string, sizeof(string), "You Must Be Level %d To Purchase This",SBizzInfo[b][sbLevel]);
					SendClientMessage(playerid, COLOR_GRAD5, string);
					return 1;
				}
				if(GetPlayerMoney(playerid) >= SBizzInfo[b][sbValue])
				{
					PlayerInfo[playerid][pPbiskey] = b+100;
					SBizzInfo[b][sbOwned] = 1;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					strmid(SBizzInfo[b][sbOwner], sendername, 0, strlen(sendername), 255);
					GiveMoney(playerid,-SBizzInfo[b][sbValue]);
					PlayerPlayMusic(playerid);
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations!, On Your New Bussiness.");
					SendClientMessage(playerid, COLOR_WHITE, "Type /help to review the new business help section.");
					DateProp(playerid);
					OnPropUpdate();
					OnPlayerUpdate(playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that");
					return 1;
				}
			}
		}
		for(new b = 0; b < sizeof(BizzInfo); b++)
		{
			if(PlayerToPoint(2.0, playerid, BizzInfo[b][bEntrancex], BizzInfo[b][bEntrancey], BizzInfo[b][bEntrancez]) && BizzInfo[b][bOwned] == 0)
			{
				if(PlayerInfo[playerid][pLevel] < BizzInfo[b][bLevel])
				{
					format(string, sizeof(string), "You Must Be Level %d To Purchase This",BizzInfo[b][bLevel]);
					SendClientMessage(playerid, COLOR_GRAD5, string);
					return 1;
				}
				if(GetPlayerMoney(playerid) > BizzInfo[b][bValue])
				{
					PlayerInfo[playerid][pPbiskey] = b;
					BizzInfo[b][bOwned] = 1;
					GetPlayerName(playerid, sendername, sizeof(sendername));
					strmid(BizzInfo[b][bOwner], sendername, 0, strlen(sendername), 255);
					GiveMoney(playerid,-BizzInfo[b][bValue]);
					PlayerPlayMusic(playerid);
					SetPlayerInterior(playerid,BizzInfo[b][bInt]);
					PlayerInfo[playerid][pInt] = BizzInfo[b][bInt];
					SetPlayerPos(playerid,BizzInfo[b][bExitx],BizzInfo[b][bExity],BizzInfo[b][bExitz]);
					GameTextForPlayer(playerid, "~w~Welcome~n~You can exit at any time by moving to this door and typing /exit", 5000, 3);
					PlayerInfo[playerid][pInt] = BizzInfo[b][bInt];
					PlayerInfo[playerid][pLocal] = b ;
					SendClientMessage(playerid, COLOR_WHITE, "Congratulations, On Your New Purchase.");
					SendClientMessage(playerid, COLOR_WHITE, "Type /help to review the new business help section.");
					DateProp(playerid);
					OnPropUpdate();
					OnPlayerUpdate(playerid);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_WHITE, "You don't have the cash for that");
					return 1;
				}
			}
		}
	}
	if(!strcmp(cmd,"/asellallbiz",true))
	{
	    if(IsPlayerAdmin(playerid))
	    {
	    	for(new i=0;i<sizeof(BizzInfo);i++)
	    	{
	    		BizzInfo[i][bHel] = 0;
				BizzInfo[i][bArm] = 0;
				BizzInfo[i][bLock] = 1;
				BizzInfo[i][bOwned] = 0;
				BizzInfo[i][bTakings] = 0;
				strmid(BizzInfo[i][bOwner], "GOD", 0, strlen("GOD"), 255);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	    	}
			//format(string, sizeof(string), "~w~You have sold All businesses", BizzInfo[bouse][bValue]);
			GameTextForPlayer(playerid, "~w~You have sold All businesses", 10000, 4);
	    	OnPropUpdate();
	    }
	    return 1;
	}
	if(strcmp(cmd, "/asellbiz", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(20.0, playerid, 515.91,-11.75,1001.57))
		GetPlayerName(playerid, playername, sizeof(playername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /asellbiz [bizid]");
			return 1;
		}
		new bouse = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			BizzInfo[bouse][bHel] = 0;
			BizzInfo[bouse][bArm] = 0;
			BizzInfo[bouse][bLock] = 1;
			BizzInfo[bouse][bOwned] = 0;
			BizzInfo[bouse][bTakings] = 0;
			strmid(BizzInfo[bouse][bOwner], "GOD", 0, strlen("GOD"), 255);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "~w~You have sold this property", BizzInfo[bouse][bValue]);
			GameTextForPlayer(playerid, string, 10000, 4);
			OnPropUpdate();
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You are not an admin.");
		}
		return 1;
	}
	if(strcmp(cmd, "/asellsbiz", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(20.0, playerid, 515.91,-11.75,1001.57))
		GetPlayerName(playerid, playername, sizeof(playername));
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /asellsbiz [sbizid]");
			return 1;
		}
		new bouse = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
   			SBizzInfo[bouse][sbHel] = 0;
			SBizzInfo[bouse][sbArm] = 0;
			SBizzInfo[bouse][sbLock] = 1;
			SBizzInfo[bouse][sbOwned] = 0;
			SBizzInfo[bouse][sbTakings] = 0;
			strmid(SBizzInfo[bouse][sbOwner], "GOD", 0, strlen("GOD"), 255);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "~w~You have sold this property", SBizzInfo[bouse][sbValue]);
			GameTextForPlayer(playerid, string, 10000, 4);
			OnPropUpdate();
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You are not an admin.");
		}
		return 1;
	}
	if(strcmp(cmd, "/sellbiz", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, playername, sizeof(playername));
		if(PlayerInfo[playerid][pPbiskey] == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't own a bizz.");
			return 1;
		}
		if(PlayerInfo[playerid][pPbiskey] >= 100 && strcmp(playername, SBizzInfo[PlayerInfo[playerid][pPbiskey]-100][sbOwner], true) == 0)
		{
			new bouse = PlayerInfo[playerid][pPbiskey]-100;
			SBizzInfo[bouse][sbHel] = 0;
			SBizzInfo[bouse][sbArm] = 0;
			SBizzInfo[bouse][sbLock] = 1;
			SBizzInfo[bouse][sbOwned] = 0;
			SBizzInfo[bouse][sbTakings] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			strmid(SBizzInfo[bouse][sbOwner], "GOD", 0, strlen("GOD"), 255);
			GiveMoney(playerid,SBizzInfo[bouse][sbValue]);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", SBizzInfo[bouse][sbValue]);
			GameTextForPlayer(playerid, string, 10000, 4);
			PlayerInfo[playerid][pPbiskey] = 255;
			OnPropUpdate();
			OnPlayerUpdate(playerid);
			return 1;
		}
		if(strcmp(playername, BizzInfo[PlayerInfo[playerid][pPbiskey]][bOwner], true) == 0)
		{
			new bouse = PlayerInfo[playerid][pPbiskey];
			BizzInfo[bouse][bHel] = 0;
			BizzInfo[bouse][bArm] = 0;
			BizzInfo[bouse][bLock] = 1;
			BizzInfo[bouse][bOwned] = 0;
			BizzInfo[bouse][bTakings] = 0;
			GetPlayerName(playerid, sendername, sizeof(sendername));
			strmid(BizzInfo[bouse][bOwner], "GOD", 0, strlen("GOD"), 255);
			GiveMoney(playerid,BizzInfo[bouse][bValue]);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			format(string, sizeof(string), "~w~Congratulations~n~ You have sold your property for ~n~~g~$%d", BizzInfo[bouse][bValue]);
			GameTextForPlayer(playerid, string, 10000, 4);
			PlayerInfo[playerid][pPbiskey] = 255;
			OnPropUpdate();
			OnPlayerUpdate(playerid);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't own a business.");
		}
	}
	if (strcmp(cmd, "/bizinfo", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if(bouse == 255)
		{
			SendClientMessage(playerid, COLOR_WHITE, "You don't own a business.");
		}
		if (bouse >= 100)
		{

			PrintSBizInfo(playerid,bouse-100);
		}
		else
		{
			PrintBizInfo(playerid,bouse);
		}
		return 1;
	}
	if(strcmp(cmd, "/bizfee", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a business");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bizfee [EntranceFee]");
		}
		if(strval(tmp) < 0)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Minimum entrance is $0");
			return 1;
		}
		if (bouse >= 100)
		{

			SBizzInfo[bouse-100][sbEntcost] = strval(tmp);
			format(string, sizeof(string), "Entrance fee set to $%d", SBizzInfo[bouse-100][sbEntcost]);
		}
		else
		{
			BizzInfo[bouse][bEntcost] = strval(tmp);
			format(string, sizeof(string), "Entrance fee set to $%d", BizzInfo[bouse][bEntcost]);
		}
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/pricemod", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Server: You don't own a business");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /pricemod [percentage of base value (default %100)]");
			return 1;
		}
		if(strval(tmp) < 0 || strval(tmp) > 10000)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Minimum percentage is 0%, maximum is 10000%");
			return 1;
		}
		if (bouse >= 100)
		{
			SBizzInfo[bouse-100][sbEntcost] = strval(tmp);
			format(string, sizeof(string), "You dont own a large business");
		}
		else
		{
			BizzInfo[bouse][bPriceMod] = strval(tmp);
			format(string, sizeof(string), "Price percentage modifier set to %d%", BizzInfo[bouse][bPriceMod]);
		}
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/compprice", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a business");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /compprice [amount to pay per unit of components]");
		}
		if(strval(tmp) < 10000)
		{
			SendClientMessage(playerid, COLOR_WHITE, "Minimum amount is $10000");
			return 1;
		}
		if (bouse >= 100)
		{
			if(strval(tmp) > SBizzInfo[bouse-100][sbTakings])
			{
				SendClientMessage(playerid, COLOR_WHITE, "You dont have that much in your till.");
				return 1;
			}
			SBizzInfo[bouse-100][sbPayComp] = strval(tmp);
			format(string, sizeof(string), "Buying Components for $%d", SBizzInfo[bouse-100][sbPayComp]);
		}
		else
		{
			if(strval(tmp) > BizzInfo[bouse][bTakings])
			{
				SendClientMessage(playerid, COLOR_WHITE, "You dont have that much in your till.");
				return 1;
			}
			BizzInfo[bouse][bPayComp] = strval(tmp);
			format(string, sizeof(string), "Buying Components for $%d", BizzInfo[bouse][bPayComp]);
		}
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/missionactive", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bizfee [EntranceFee]");
		}
		MissionActive = strval(tmp);
		new sstring[256];
		format(sstring, sizeof(sstring), "MissionActive = %d",MissionActive);
		SendClientMessage(playerid, COLOR_GRAD1, sstring);
		return 1;
	}
	if(strcmp(cmd, "/bizname", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (PlayerInfo[playerid][pAdmin] < 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			//SendClientMessage(playerid, COLOR_GRAD2, "   You can't own a large business");
			return 1;
		}
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "   You don't own a business");
			return 1;
		}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bizname [Name](dont use ,)");
		}
		if (bouse >= 100)
		{
			strmid(SBizzInfo[bouse-100][sbDiscription], result, 0, 64, 255);
			format(string, sizeof(string), "Server: Buisness name set to %s",SBizzInfo[bouse-100][sbDiscription]);
		}
		else
		{
			strmid(BizzInfo[bouse][bDiscription], result, 0, 64, 255);
			format(string, sizeof(string), "Server: Buisness name set to %s",BizzInfo[bouse][bDiscription]);
		}
		OnPropUpdate();
		SendClientMessage(playerid, COLOR_WHITE, string);
		return 1;
	}
	if(strcmp(cmd, "/bizwithdraw", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Server:You don't own a business");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			if (bouse >= 100)
			{
				format(string, sizeof(string), "Manager:You Have $%d in your till.", SBizzInfo[bouse-100][sbTakings]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
			}
			else
			{
				format(string, sizeof(string), "Manager:You Have $%d in your till.", BizzInfo[bouse][bTakings]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
			}
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bizwithdraw [amount]");
			return 1;
		}
		new cashdeposit = strval(tmp);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bizwithdraw [amount]");
			return 1;
		}
		if (bouse >= 100)
		{
			if(cashdeposit > SBizzInfo[bouse-100][sbTakings] || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Manager:You dont have that much");
				return 1;
			}
		}
		else
		{
			if (cashdeposit > BizzInfo[bouse][bTakings] || cashdeposit < 1)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Manager:You dont have that much");
				return 1;
			}
		}
		if (bouse >= 100)
		{
			if(!PlayerToPoint(100, playerid,SBizzInfo[bouse-100][sbEntrancex],SBizzInfo[bouse-100][sbEntrancey],SBizzInfo[bouse-100][sbEntrancez]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Server:You are too far from your business");
				return 1;
			}
			else
			{
				GiveMoney(playerid,cashdeposit);
				SBizzInfo[bouse-100][sbTakings]=SBizzInfo[bouse-100][sbTakings]-cashdeposit;
				format(string, sizeof(string), "Manager:You Have Withdrawn $%d from your till Total: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTakings]);
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_YELLOW, string);
				return 1;
			}
		}
		else
		{
			if (!PlayerToPoint(100, playerid,BizzInfo[bouse][bExitx],BizzInfo[bouse][bExity],BizzInfo[bouse][bExitz]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Server:You are to far from your business");
				return 1;
			}
			else
			{
				GiveMoney(playerid,cashdeposit);
				BizzInfo[bouse][bTakings]=BizzInfo[bouse][bTakings]-cashdeposit;
				format(string, sizeof(string), "Manager:You Have Withdrawn $%d from your till Total: $%d ", cashdeposit,BizzInfo[bouse][bTakings]);
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_YELLOW, string);
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/bizbank", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse == 255)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Server:You don't own a business");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			if (bouse >= 100)
			{
				format(string, sizeof(string), "Manager:You Have $%d in your till.", SBizzInfo[bouse-100][sbTakings]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
			}
			else
			{
				format(string, sizeof(string), "Manager:You Have $%d in your till.", BizzInfo[bouse][bTakings]);
				SendClientMessage(playerid, COLOR_GRAD3, string);
			}
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bizbank [amount]");
			return 1;
		}
		new cashdeposit = strval(tmp);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /bizbank [amount]");
			SendClientMessage(playerid, COLOR_GRAD3, string);
			return 1;
		}
		if (cashdeposit > GetPlayerMoney(playerid) || cashdeposit < 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Manager:You dont have that much");
			return 1;
		}
		if (bouse >= 100)
		{
			if(!PlayerToPoint(100, playerid,SBizzInfo[bouse-100][sbEntrancex],SBizzInfo[bouse-100][sbEntrancey],SBizzInfo[bouse-100][sbEntrancez]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Server: You are to far from your business");
				return 1;
			}
			else
			{
				GiveMoney(playerid,-cashdeposit);
				SBizzInfo[bouse-100][sbTakings]=SBizzInfo[bouse-100][sbTakings]+cashdeposit;
				format(string, sizeof(string), "Manager: You Have deposited $%d to your till Total: $%d ", cashdeposit,SBizzInfo[bouse-100][sbTakings]);
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_YELLOW, string);
				return 1;
			}
		}
		else
		{
			if (!PlayerToPoint(100, playerid,BizzInfo[bouse][bExitx],BizzInfo[bouse][bExity],BizzInfo[bouse][bExitz]))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Server: You are to far from your business");
				return 1;
			}
			else
			{
				GiveMoney(playerid,-cashdeposit);
				BizzInfo[bouse][bTakings]=BizzInfo[bouse][bTakings]+cashdeposit;
				format(string, sizeof(string), "Manager: You Have deposited $%d to your till Total: $%d ", cashdeposit,BizzInfo[bouse][bTakings]);
				OnPropUpdate();
				SendClientMessage(playerid, COLOR_YELLOW, string);
				return 1;
			}
		}
	}
	if(strcmp(cmd, "/bizupgrade", true) == 0 && IsPlayerConnected(playerid))
	{
		new bouse = PlayerInfo[playerid][pPbiskey];
		if (bouse >= 100)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Server:You don't own a large business");
			return 1;
		}
		if (PlayerInfo[playerid][pInt] != BizzInfo[bouse][bInt])
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Server:You must be in your business");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bizupgrade [item number]");
			SendClientMessage(playerid, COLOR_GRAD2, "|_______ Home Depot _______|");
			SendClientMessage(playerid, COLOR_GRAD3, "| 1: Health Pickup $5000");
			SendClientMessage(playerid, COLOR_GRAD4, "| 2: Armour Pickup $8000");
			return 1;
		}
		new item = strval(tmp);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_WHITE, "USAGE: /bizupgrade [item number]");
			SendClientMessage(playerid, COLOR_GRAD2, "|_______ Home Depot _______|");
			SendClientMessage(playerid, COLOR_GRAD3, "| 1: Health Pickup $50000");
			SendClientMessage(playerid, COLOR_GRAD4, "| 2: Armour Pickup $8000");
			return 1;
		}
		switch (item)
		{
			case 1:
			{
				if(PlayerInfo[playerid][pLevel] < 5)
				{
					SendClientMessage(playerid, COLOR_GRAD5, "Server: You Must Be Level 5 To Purchase This");
					return 1;
				}
				if(GetPlayerMoney(playerid) < 5000)
				{
					SendClientMessage(playerid, COLOR_GRAD5, "Server: You Don't have The Cash To Purchase This");
					return 1;
				}
				BizzInfo[bouse][bHel] = 1;
				GiveMoney(playerid,-5000);
				SBizzInfo[5][sbTakings] = SBizzInfo[5][sbTakings]+5000;//heal buisness
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
			case 2:
			{
				if (PlayerInfo[playerid][pLevel] < 8)
				{
					SendClientMessage(playerid, COLOR_GRAD5, "Server: You Must Be Level 8 To Purchase This");
					return 1;
				}
				if(GetPlayerMoney(playerid) < 8000)
				{
					SendClientMessage(playerid, COLOR_GRAD5, "Server: You Don't have The Cash To Purchase This");
					return 1;
				}
				BizzInfo[bouse][bArm] = 1;
				GiveMoney(playerid,-8000);
				SBizzInfo[5][sbTakings] = SBizzInfo[5][sbTakings]+8000;//heal buisness
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			}
		}
		OnPropUpdate();
		OnPlayerUpdate(playerid);
		SendClientMessage(playerid, COLOR_GRAD5, "Manager: Your Shoppers Can Now Use /heal.");
		return 1;
	}
//----------------------------------[JOB]-----------------------------------------------

	if(strcmp(cmd, "/job", true) == 0 && IsPlayerConnected(playerid))
	{
		if (gTeam[playerid] >= 3)
		{
			SendClientMessage(playerid, COLOR_YELLOW, objstore);
		}
		else if (gTeam[playerid] == 2)
		{
			SendClientMessage(playerid, TEAM_BLUE_COLOR, cbjstore);
		}
		return 1;
	}
//-----------------------------------[HEAL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/heal", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new location = PlayerInfo[playerid][pLocal];
		if(!strlen(tmp))
		{
			if(location != 255)
			{
				if(location < 102)
				{
					if(HouseInfo[location][hArm] == 1)
					{/*
						format(string, sizeof(string), "** %s Acquired Body Armour  .", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						TogglePlayerControllable(playerid, 0);
						GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
						Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
						Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
						SetPlayerPos(playerid,1527.5,-12.1,1002.0);
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerInterior(playerid,99);
						Spectate[playerid] = 257;  //This is the OLD Armour stuff*/
						if(PlayerInfo[playerid][pSArmour]>100.0)
						{
							SetPlayerArmour(playerid,PlayerInfo[playerid][pSArmour]);
							format(string, sizeof(string), "Server:You have been given your spawn armour of %.1f",PlayerInfo[playerid][pSArmour]);
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					    }
						else
						{
							new Float:tempSArmour;
							GetPlayerArmour(playerid,tempSArmour);
						    if( tempSArmour < 100.0 )
							{
							    SetPlayerArmour(playerid,100.0);
							    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "Server:You have been given 100 body armour");
								SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
							}
						    else
							{
							    SendClientMessage(playerid,TEAM_GREEN_COLOR,"Server: You already have 100 armour");
							}
						}
					}
					else
					{
						format(string, sizeof(string), "Server: This Location Does Not Have Armour Upgrades");
						SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					}
					if(HouseInfo[location][hHel] == 1)
					{
						if(PlayerInfo[playerid][pSHealth]>50.0)
						{
							SetPlayerHealth(playerid,PlayerInfo[playerid][pSHealth]);
							format(string, sizeof(string), "Server:You have been given your spawn Health of %.1f",PlayerInfo[playerid][pSHealth]+50);
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					    }
						else
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
						    if ( tempheal < 100.0 )
							{
								SetPlayerHealth(playerid,100.0);
								PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "Server:You have been healed to 100 health");
								SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
							}
						    else
							{
							    SendClientMessage(playerid,TEAM_GREEN_COLOR,"Server: You already have 100 health");
							}
						}
					}
					else
					{
						format(string, sizeof(string), "This Location Does Not Have Health Upgrades");
						SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					}
					return 1;
				}
				else
				{
					if(BizzInfo[location-1000][bArm] == 1)
					{
						if(PlayerInfo[playerid][pSArmour]>100.0)
						{
							SetPlayerArmour(playerid,PlayerInfo[playerid][pSArmour]);
							format(string, sizeof(string), "Server:You have been given your spawn armour of %.1f",PlayerInfo[playerid][pSArmour]);
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					    }
						else
						{
							new Float:tempSArmour;
							GetPlayerArmour(playerid,tempSArmour);
						    if( tempSArmour < 100.0 )
							{
							    SetPlayerArmour(playerid,100.0);
							    PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "Server:You have been given 100 body armour");
								SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
							}
						    else
							{
							    SendClientMessage(playerid,TEAM_GREEN_COLOR,"Server: You already have 100 armour");
							}
						}
					/*	format(string, sizeof(string), "* %s Acquires Body Armour *", sendername);
						ProxDetector(30.0, playerid, string, COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
						SetPlayerArmour(playerid,100.0);
						TogglePlayerControllable(playerid, 0);
						GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
						Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
						Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
						SetPlayerPos(playerid,1527.5,-12.1,1002.0);
						PlayerInfo[playerid][pLocal] = 255;
						SetPlayerInterior(playerid,99);
						Spectate[playerid] = 257;  */
					}
					else
					{
						format(string, sizeof(string), "Server: This Location Does Not Have Armour Upgrades");
						SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					}
					if(BizzInfo[location-1000][bHel] == 1)
					{
						if(PlayerInfo[playerid][pSHealth]>50.0)
						{
							SetPlayerHealth(playerid,PlayerInfo[playerid][pSHealth]);
							format(string, sizeof(string), "Server:You have been given your spawn Health of %.1f",PlayerInfo[playerid][pSHealth]+50);
							SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					    }
						else
						{
							new Float:tempheal;
							GetPlayerHealth(playerid,tempheal);
						    if ( tempheal < 100.0 )
							{
								SetPlayerHealth(playerid,100.0);
								PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
								format(string, sizeof(string), "Server:You have been healed to 100 health");
								SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
							}
						    else
							{
							    SendClientMessage(playerid,TEAM_GREEN_COLOR,"Server: You already have 100 health");
							}
						}
					}
					else
					{
						format(string, sizeof(string), "Server: This Location Does Not Have Health Upgrades");
						SendClientMessage(playerid, TEAM_GREEN_COLOR,string);
					}
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /heal [playerid/PartOfName]");
				return 1;
			}
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if (giveplayerid == playerid)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: You cannot heal yourself!");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			//new giveambu = GetPlayerVehicleID(giveplayerid);
			//new playambu = GetPlayerVehicleID(playerid);
			if (gTeam[playerid] == TEAM_CYAN)//model
			{
    			if (PlayerInfo[playerid][pRank] >= 10)
				{
					new Float:tempheal;
					GetPlayerHealth(giveplayerid,tempheal);
					if ( tempheal >= 150.0)
					{
						SendClientMessage(playerid, TEAM_GREEN_COLOR,"SERVER: That person is fully healed.");
						return 1;
					}
					format(string, sizeof(string), "~y~You healed ~n~~w~%s~n~~g~$%d", giveplayer,mediccharge);
					//printf("AdmCmd: %s has jailed %s.", sendername, giveplayer);
					GiveMoney(playerid,mediccharge);
					GiveMoney(giveplayerid,-mediccharge);
					GameTextForPlayer(playerid, string, 5000, 1);
					SetPlayerHealth(giveplayerid,150.0);
					PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
					PlayerPlaySound(giveplayerid, 1150, 0.0, 0.0, 0.0);
					if(gTeam[giveplayerid] == TEAM_CYAN)
					{
						format(string, sizeof(string), "Medic: You Have Been Patched up to 150 Health -$ free",mediccharge);
						SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);
						return 1;
					}
					else
					{
						format(string, sizeof(string), "Medic: You Have Been Patched up to 150 Health -$%d",mediccharge);
						SendClientMessage(giveplayerid, TEAM_GREEN_COLOR,string);
						PlayerInfo[playerid][pSP]++;
						if(PlayerInfo[playerid][pSP] >= 20)
						{
							PlayerInfo[playerid][pExp]++;
							PlayerInfo[playerid][pSP] = 0;
							SendClientMessage(playerid, COLOR_YELLOW, "Medic: You are getting stronger - Exp +1");
						}
					}

				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Medic: Either the Medic or the Injured are not in the ambulance!");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Server:You are not authorized to use that command!");
				return 1;
			}
		}
		else
		{
			format(string, sizeof(string), "Server: %d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
//----------------------------------[ADMINADMIN]-----------------------------------------------
//----------------------------------[8ball]-----------------------------------------------
	if(strcmp(cmd, "/8ball", true) == 0 && PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /8ball [8ball text]");
			return 1;
		}
		format(string, sizeof(string), "%s, Sender: 8 Ball (555)",result);
		if (gTeam[playerid] < 3){SendClientMessage(playerid, COLOR_YELLOW, string);}
		SendEnemyMessage(COLOR_YELLOW, string);
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && gPlayerSpawned[i])
			{
				if(gTeam[i] >= 3)
				{
					RingTone[i] =20;
				}
			}
		}
		printf("8 Ball: %s", result);
		return 1;
	}
//----------------------------------[/FUCK by Dragon]-----------------------------------------------
	if(strcmp(cmd, "/fuck", true) == 0 && IsPlayerConnected(playerid)) 	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fuck [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			Fuck(playa);
			SendClientMessage(playerid, COLOR_GRAD1, "Fucked...");
		}
		else
		{
		 //Took out so no one knows that such a command exists
			//SendClientMessage(playerid, COLOR_GRAD1, "Server: you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[HQ]-----------------------------------------------
	if(strcmp(cmd, "/hq", true) == 0 && PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /hq [hq text]");
			return 1;
		}
		format(string, sizeof(string), "Police HQ: %s, over", result);
		if (gTeam[playerid] != 2 ){SendClientMessage(playerid, COLOR_DBLUE, string);}
		SendTeamBeepMessage(2, COLOR_DBLUE, string);
		printf("Police HQ: %s", result);
		return 1;
	}
//----------------------------------[RECON]-----------------------------------------------
	if(strcmp(cmd, "/bigears", true) == 0 && PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
		if (!BigEar[playerid])
		{
			BigEar[playerid] = 1;
			SendClientMessage(playerid, COLOR_RED, "AdmCmd:You are listening in");
		}
		else if (BigEar[playerid])
		{
			(BigEar[playerid] = 0);
			SendClientMessage(playerid, COLOR_RED, "AdmCmd:You are no longer listening");
		}
		return 1;
	}
	if(strcmp(cmd, "/id", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /recon [playerid/PON/off]");
			return 1;
		}
		new target;
		if(IsStringAName(tmp))
		{
			target = GetPlayerID(tmp);
		}
		else
		{
			target = strval(tmp);
		}
		new sstring[256];
		GetPlayerName(target, giveplayer, sizeof(giveplayer));
		format(sstring, sizeof(sstring), "ID: (%d) %s",target,giveplayer);
		SendClientMessage(playerid, COLOR_GRAD1, sstring);
		return 1;
	}
	if(strcmp(cmd, "/tv", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/recon", true) == 0 && IsPlayerConnected(playerid))
	{
		new house;
		if(Unspec[playerid][sLocal] == 255)
		{
			house = PlayerInfo[playerid][pLocal];
		}
		else
		{
			house = Unspec[playerid][sLocal];
		}
		if(PlayerInfo[playerid][pAdmin] < 101 || FugitiveCore[playerid] == 1)
		{
			if(house == 255)
			{
				GameTextForPlayer(playerid, "~r~There is no tv here", 5000, 5);
				return 1;
			}
		}
		//printf("house has tv %d",HouseInfo[house][hHealthx]);
		TVMode[playerid] = 0;
		Unspec[playerid][sCam] = 2;
		if(Spectate[playerid] == 255 && PlayerInfo[playerid][pLocal] != 255 || Spectate[playerid] == 255 && PlayerInfo[playerid][pAdmin] > 0 || FugitiveCore[playerid] == 1)
		{
			GetPlayerPos(playerid, Unspec[playerid][sPx], Unspec[playerid][sPy], Unspec[playerid][sPz]);
			Unspec[playerid][sPint] = PlayerInfo[playerid][pInt];
			Unspec[playerid][sLocal] = PlayerInfo[playerid][pLocal];
			PlayerInfo[playerid][pLocal] = 255;
			gTeam[playerid] = 0;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			if(HouseInfo[house][hHealthx] != 1)
			{
				GameTextForPlayer(playerid, "~r~Upgrade not installed", 5000, 5);
				return 1;
			}
			TVMode[playerid] = 1;
			Spectate[playerid] = lastkiller;
			GameTextForPlayer(playerid, "~w~                True~n~                   ~b~Crime", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			return 1;
		}
		if(strcmp("off", tmp, true, strlen(tmp)) == 0)
		{
			Spectate[playerid] = 253;
			GameTextForPlayer(playerid, "~w~                TV~n~~r~                Off", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			return 1;
		}
		if(strcmp("door", tmp, true, strlen(tmp)) == 0)
		{
			if(HouseInfo[house][hHealthy] != 1)
			{
				GameTextForPlayer(playerid, "~r~Door Camera not installed", 5000, 1);
				return 1;
			}
			if(PlayerInfo[playerid][pLocal] == 255 && Unspec[playerid][sLocal] == 255 )
			{
				GameTextForPlayer(playerid, "~r~no can do", 5000, 1);
				return 1;
			}
			house = Unspec[playerid][sLocal];
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && gPlayerSpawned[i])
				{
					if(PlayerToPoint(20.0, i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]))
					{
						Unspec[playerid][sCam] = 10;
						Spectate[playerid] = i;
						GameTextForPlayer(playerid, "~b~Door~r~Cam~n~~w~Type /tv off~n~to exit", 5000, 5);
						PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
						return 1;
					}
				}
			}
			if(Unspec[playerid][sCam] != 10)
			{
				GameTextForPlayer(playerid, "~w~No one is at the door", 5000, 5);
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
			}
			return 1;
		}
		if(strcmp("dm", tmp, true, strlen(tmp)) == 0)
		{
			if(HouseInfo[house][hHealthz] != 1)
			{
				GameTextForPlayer(playerid, "~r~No subscription", 5000, 5);
				return 1;
			}
			if(MissionActive != 13 || DmHiPlayer == 255)
			{
				GameTextForPlayer(playerid, "~g~No DeathMatchs~n~~w~On TV now", 5000, 5);
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				return 1;
			}
			TVMode[playerid] = 11;
			Spectate[playerid] = DmHiPlayer;
			GameTextForPlayer(playerid, "~r~                D~w~MTV", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			return 1;
		}
		if(strcmp("race", tmp, true, strlen(tmp)) == 0)
		{
			if(HouseInfo[house][hArmourx] != 1)
			{
				GameTextForPlayer(playerid, "~r~No subscription", 5000, 1);
				return 1;
			}
			if(MissionActive < 4 || MissionActive > 7)
			{
				GameTextForPlayer(playerid, "~g~No Races~n~~w~On TV now", 5000, 5);
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				return 1;
			}
			TVMode[playerid] = 21;
			RaceSpec(playerid);
			GameTextForPlayer(playerid, "~w~                S~b~R~n~~r~                TV", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			return 1;
		}
		if(strcmp("pen", tmp, true, strlen(tmp)) == 0)
		{
			if(HouseInfo[house][hArmoury] != 1)
			{
				GameTextForPlayer(playerid, "~r~No subscription", 5000, 1);
				return 1;
			}
			if(gPublicEnemy == 255)
			{
				GameTextForPlayer(playerid, "~g~No Fugitives~n~~w~on TV now", 5000, 1);
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				return 1;
			}
			TVMode[playerid] = 31;
			PenDelay(playerid);
			GameTextForPlayer(playerid, "~p~                FUGITIVE~n~                ~w~TV", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			return 1;
		}
		if(strcmp("speed", tmp, true, strlen(tmp)) == 0)
		{
			if(Speeder == 255)
			{
				GameTextForPlayer(playerid, "~g~No Speeders ~n~~w~On TV now", 5000, 5);
				PlayerInfo[playerid][pLocal] = Unspec[playerid][sLocal];
				return 1;
			}
			TVMode[playerid] = 41;
			SpeedDelay(playerid);
			GameTextForPlayer(playerid, "~y~                Speed~n~                ~w~TV", 5000, 6);
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			return 1;
		}
		if(strcmp("foot", tmp, true, strlen(tmp)) == 0 && PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			Spectate[playerid] = lastkiller;
		}
		if(strcmp("next", tmp, true, strlen(tmp)) == 0 && PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && gPlayerSpawned[i])
				{
					if(i > Spectate[playerid] && Spectate[playerid] != 255 && PlayerInfo[i][pLevel] <= 2)
					{
						new Float:health;
						GetPlayerHealth(i, health);
						Spectate[playerid] = i;
						new sstring[256];
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(i);
						format(sstring, sizeof(sstring), "Recon: (%d) %s $%d H:%.1f ",i,giveplayer,cash,health);
						SendClientMessage(playerid, COLOR_GREEN, sstring);
						return 1;
					}
				}
			}
		}
		if(strcmp("prev", tmp, true, strlen(tmp)) == 0 && PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			for(new i = MAX_PLAYERS; i >= 0; i--)
			{
				if(IsPlayerConnected(i) && gPlayerSpawned[i])
				{
					if(i < Spectate[playerid] && Spectate[playerid] != 255 && PlayerInfo[i][pLevel] <= 2)
					{
						new Float:health;
						GetPlayerHealth(i, health);
						Spectate[playerid] = i;
						new sstring[256];
						GetPlayerName(i, giveplayer, sizeof(giveplayer));
						new cash =  GetPlayerMoney(i);
						format(sstring, sizeof(sstring), "Recon: (%d) %s $%d H:%.1f",i,giveplayer,cash,health);
						SendClientMessage(playerid, COLOR_GREEN, sstring);
						return 1;
					}
				}
			}
		}
		if(house == 255)
		{
			if(PlayerInfo[playerid][pAdmin] < 101 || FugitiveCore[playerid] == 1)
			{
				GameTextForPlayer(playerid, "~r~Upgrade not installed", 5000, 5);
				return 1;
			}
		}
		else
		{
			if(HouseInfo[house][hArmourz] != 1 && PlayerInfo[playerid][pAdmin] < 101 || FugitiveCore[playerid] == 1)
			{
				GameTextForPlayer(playerid, "~r~Upgrade not installed", 5000, 5);
				return 1;
			}
		}
		if(IsStringAName(tmp))
		{
			Spectate[playerid] = GetPlayerID(tmp);
		}
		else
		{
			Spectate[playerid] = strval(tmp);
		}
		if(IsPlayerConnected(Spectate[playerid]))
		{
			if(Hidden[Spectate[playerid]] != 1 && PlayerInfo[playerid][pAdmin] < 101 || FugitiveCore[playerid] == 1)
			{
				SendClientMessage(playerid, COLOR_GREEN, "Target is masked");
			}
			new Float:health;
			GetPlayerHealth(Spectate[playerid], health);
			new sstring[256];
			GetPlayerName(Spectate[playerid], giveplayer, sizeof(giveplayer));
			new cash =  GetPlayerMoney(Spectate[playerid]);
			if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
			{
				format(sstring, sizeof(sstring), "Recon: (%d) %s $%d H:%.0f",Spectate[playerid],giveplayer,cash,health);
			}
			else
			{
				format(sstring, sizeof(sstring), "UAV: (%d) %s",Spectate[playerid],giveplayer);
			}
			SendClientMessage(playerid, COLOR_GREEN, sstring);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GREEN, "Target is not available");
		}
		return 1;
	}
//----------------------------------[SPAWN]-----------------------------------------------

	if(strcmp(cmd, "/spawn", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SetPlayerRandomSpawn(playerid);
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/spawn2", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SpawnPlayer(playerid);
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/spawn3", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			OnPlayerSpawn(playerid);
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(!strcmp(cmd,"/fugi",true))
	{
	    for(new i=0;i<MAX_PLAYERS;i++){if(gPublicEnemy==i){
		format(string,sizeof(string),"%s is presently the fugitive.",ReturnPlayerName(i));
		SendClientMessage(playerid,COLOR_RED,string);}}
	    return 1;
	}
	if(strcmp(cmd, "/pen", true) == 0 && IsPlayerConnected(playerid)) {

		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SetPlayerCriminal(playerid,255, "Armed Robbery",1,1);
			gPlayerMission[playerid] = 1;
			fugitimer = SetTimer("cd_fugitive", 1000, 1);
			fugitime = 300;			
  		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}

	if(strcmp(cmd, "/fugip", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fugip [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SetPlayerCriminal(playa,255, "Armed Robbery",1,1);
			gPlayerMission[playa] = 1;
			printf("AdmCmd: %s made %s Fugitive",sendername,  giveplayer);
			format(string, sizeof(string), "AdmCmd: %s made %s Fugitive", sendername,giveplayer);
			SendClientMessageToAll(COLOR_RED, string);
			fugitimer = SetTimer("cd_fugitive", 1000, 1);
			fugitime = 300;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[PAYDAY]-----------------------------------------------

	if(strcmp(cmd, "/payday", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(PlayerToPoint(20.0, playerid, 515.91,-11.75,1001.57))
		{
			tmp=strtok(cmdtext,idx);
			if(!strlen(tmp)){SendClientMessage(playerid,COLOR_RED,"You need a reason to have a payday /payday [reason]");return 1;}
			if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
			{
				PayDay();
				printf("Admin %s has Forced a Payday", sendername);
				format(string,sizeof(string),"Admin %s forced payday for %s",sendername,cmdtext[8]);
				PaydayLog(string);
			}
			else
			{
				//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
			}
			return 1;
		}
	}
	if(strcmp(cmd, "/incmis", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			gFightLeader=1;
			SendClientMessage(playerid, COLOR_GRAD1, "Playercount Incrementeted");
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[TEST]-----------------------------------------------

	if(strcmp(cmd, "/test", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			new sstring[256];//,sstring2[256];
			new playambu = GetPlayerVehicleID(playerid);
			format(sstring, sizeof(sstring), "currentpickups = %d gFighters = %d gFightLeader = %d dmtimer = %d DmHiScore = %d",pickups ,gFighters ,gFightLeader,dmtimer,DmHiScore);
			SendClientMessage(playerid, COLOR_GRAD1, sstring);
			format(sstring, sizeof(sstring), "currentcar = %d locked[%d] stealcar = %d stealcardest = %d MissionActive = %d",playambu,gCarLock[playambu],stealcar,stealcardest,MissionActive);
			SendClientMessage(playerid, COLOR_GRAD1, sstring);
			//GetPlayerVehicleID(playerid);
			/*
			for(new i = 0; i <= 24; i++)
			{
				format(sstring, sizeof(sstring), "currentpickups = %d", pickups);
				print(sstring);
			}

			//SetSpawnInfo(playerid, 2, 153, 0.0, 0.0, 0.0, 0.1, -1, -1, -1, -1, -1, -1);
		   // SpawnPlayer(playerid);
			if (CopCheck(playerid))
			{
				print("yes you are a cop");
			}
			else
			{
				print("not a cop cop");
			}
		    //printf("johnsid = %d",GetPlayerID("John_"));
			//SetPlayerCriminal(playerid,255, "Armed Robbery",1,0);
			//GameTextForPlayer(playerid, string, 5000, 1);
			//SendClientMessage(playerid, COLOR_GRAD1, string);
			*/
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/patch", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
				SBizzInfo[0][sbPayComp] = 10000;
				SBizzInfo[1][sbPayComp] = 11000;
				SBizzInfo[2][sbPayComp] = 12000;
				SBizzInfo[3][sbPayComp] = 10000;
				SBizzInfo[4][sbPayComp] = 11000;
				SBizzInfo[5][sbPayComp] = 12000;
				SBizzInfo[6][sbPayComp] = 10000;
				SBizzInfo[7][sbPayComp] = 10000;
				SBizzInfo[8][sbPayComp] = 10000;
				SBizzInfo[9][sbPayComp] = 10000;
				SBizzInfo[10][sbPayComp] = 10000;
				SBizzInfo[11][sbPayComp] = 10000;
 			   	SBizzInfo[12][sbPayComp] = 10000;
    			SBizzInfo[13][sbPayComp] = 10000;
    			SBizzInfo[14][sbPayComp] = 10000;
    			SBizzInfo[15][sbPayComp] = 10000;
    			SBizzInfo[16][sbPayComp] = 10000;
				BizzInfo[0][bPayComp] = 12000;
				BizzInfo[1][bPayComp] = 10000;
				BizzInfo[2][bPayComp] = 11000;
				BizzInfo[3][bPayComp] = 10000;
				BizzInfo[4][bPayComp] = 12000;
				BizzInfo[5][bPayComp] = 12000;
				BizzInfo[6][bPayComp] = 10000;
				BizzInfo[7][bPayComp] = 11000;
				BizzInfo[8][bPayComp] = 10000;
				BizzInfo[9][bPayComp] = 12000;
				BizzInfo[10][bPayComp] = 10000;
   			/*
				SBizzInfo[0][sbProd] = 50;SBizzInfo[0][sbProdCap] = 500;SBizzInfo[0][sbComp] = 2;SBizzInfo[0][sbCompCap] = 10;SBizzInfo[0][sbProdCost] = 10;SBizzInfo[0][sbPayComp] = 10000;
				SBizzInfo[1][sbProd] = 50;SBizzInfo[1][sbProdCap] = 500;SBizzInfo[1][sbComp] = 4;SBizzInfo[1][sbCompCap] = 16;SBizzInfo[1][sbProdCost] = 4;SBizzInfo[1][sbPayComp] = 11000;
				SBizzInfo[2][sbProd] = 50;SBizzInfo[2][sbProdCap] = 240;SBizzInfo[2][sbComp] = 5;SBizzInfo[2][sbCompCap] = 20;SBizzInfo[2][sbProdCost] = 2;SBizzInfo[2][sbPayComp] = 12000;
				SBizzInfo[3][sbProd] = 50;SBizzInfo[3][sbProdCap] = 500;SBizzInfo[3][sbComp] = 3;SBizzInfo[3][sbCompCap] = 10;SBizzInfo[3][sbProdCost] = 7;SBizzInfo[3][sbPayComp] = 10000;
				SBizzInfo[4][sbProd] = 50;SBizzInfo[4][sbProdCap] = 500;SBizzInfo[4][sbComp] = 6;SBizzInfo[4][sbCompCap] = 10;SBizzInfo[4][sbProdCost] = 10;SBizzInfo[4][sbPayComp] = 11000;
				SBizzInfo[5][sbProd] = 50;SBizzInfo[5][sbProdCap] = 100;SBizzInfo[5][sbComp] = 4;SBizzInfo[5][sbCompCap] = 20;SBizzInfo[5][sbProdCost] = 1;SBizzInfo[5][sbPayComp] = 12000;
				SBizzInfo[6][sbProd] = 50;SBizzInfo[6][sbProdCap] = 100;SBizzInfo[6][sbComp] = 5;SBizzInfo[6][sbCompCap] = 20;SBizzInfo[6][sbProdCost] = 1;SBizzInfo[6][sbPayComp] = 10000;

				BizzInfo[0][bProd] = 50;BizzInfo[0][bProdCap] = 500;BizzInfo[0][bComp] = 6;BizzInfo[0][bCompCap] = 18;BizzInfo[0][bProdCost] = 2;BizzInfo[0][bPayComp] = 12000;
				BizzInfo[1][bProd] = 50;BizzInfo[1][bProdCap] = 500;BizzInfo[1][bComp] = 4;BizzInfo[1][bCompCap] = 10;BizzInfo[1][bProdCost] = 3;BizzInfo[1][bPayComp] = 10000;
				BizzInfo[2][bProd] = 50;BizzInfo[2][bProdCap] = 500;BizzInfo[2][bComp] = 5;BizzInfo[2][bCompCap] = 10;BizzInfo[2][bProdCost] = 4;BizzInfo[2][bPayComp] = 11000;
				BizzInfo[3][bProd] = 50;BizzInfo[3][bProdCap] = 500;BizzInfo[3][bComp] = 3;BizzInfo[3][bCompCap] = 10;BizzInfo[3][bProdCost] = 5;BizzInfo[3][bPayComp] = 10000;
				BizzInfo[4][bProd] = 50;BizzInfo[4][bProdCap] = 100;BizzInfo[4][bComp] = 6;BizzInfo[4][bCompCap] = 0;BizzInfo[4][bProdCost] = 0;BizzInfo[4][bPayComp] = 12000;
				BizzInfo[5][bProd] = 50;BizzInfo[5][bProdCap] = 100;BizzInfo[5][bComp] = 5;BizzInfo[5][bCompCap] = 0;BizzInfo[5][bProdCost] = 0;BizzInfo[5][bPayComp] = 12000;
				BizzInfo[6][bProd] = 50;BizzInfo[6][bProdCap] = 220;BizzInfo[6][bComp] = 4;BizzInfo[6][bCompCap] = 10;BizzInfo[6][bProdCost] = 10;BizzInfo[6][bPayComp] = 10000;
				BizzInfo[7][bProd] = 50;BizzInfo[7][bProdCap] = 100;BizzInfo[7][bComp] = 3;BizzInfo[7][bCompCap] = 0;BizzInfo[7][bProdCost] = 0;BizzInfo[7][bPayComp] = 11000;
				BizzInfo[8][bProd] = 50;BizzInfo[8][bProdCap] = 100;BizzInfo[8][bComp] = 6;BizzInfo[8][bCompCap] = 20;BizzInfo[8][bProdCost] = 1;BizzInfo[8][bPayComp] = 10000;
				BizzInfo[9][bProd] = 50;BizzInfo[9][bProdCap] = 100;BizzInfo[9][bComp] = 4;BizzInfo[9][bCompCap] = 20;BizzInfo[9][bProdCost] = 1;BizzInfo[9][bPayComp] = 12000;
				BizzInfo[10][bProd] = 50;BizzInfo[10][bProdCap] = 100;BizzInfo[10][bComp] = 3;BizzInfo[10][bCompCap] = 20;BizzInfo[10][bProdCost] = 1;BizzInfo[10][bPayComp] = 10000;
				BizzInfo[11][bProd] = 50;BizzInfo[11][bProdCap] = 500;BizzInfo[11][bComp] = 4;BizzInfo[11][bCompCap] = 10;BizzInfo[11][bProdCost] = 3;BizzInfo[11][bPayComp] = 10020;
				BizzInfo[12][bProd] = 50;BizzInfo[12][bProdCap] = 500;BizzInfo[12][bComp] = 5;BizzInfo[12][bCompCap] = 10;BizzInfo[12][bProdCost] = 4;BizzInfo[12][bPayComp] = 10010;

				BizzInfo[4][bProd] = 50;BizzInfo[4][bProdCap] = 100;BizzInfo[4][bComp] = 6;BizzInfo[4][bCompCap] = 10;BizzInfo[4][bProdCost] = 5;BizzInfo[4][bPayComp] = 12000;
				BizzInfo[5][bProd] = 50;BizzInfo[5][bProdCap] = 100;BizzInfo[5][bComp] = 5;BizzInfo[5][bCompCap] = 10;BizzInfo[5][bProdCost] = 5;BizzInfo[5][bPayComp] = 12000;
				BizzInfo[7][bProd] = 50;BizzInfo[7][bProdCap] = 100;BizzInfo[7][bComp] = 3;BizzInfo[7][bCompCap] = 10;BizzInfo[7][bProdCost] = 5;BizzInfo[7][bPayComp] = 11000;

				BizzInfo[0][bPriceMod] = 100;BizzInfo[1][bPriceMod] = 100;BizzInfo[2][bPriceMod] = 100;
				BizzInfo[3][bPriceMod] = 100;BizzInfo[4][bPriceMod] = 100;BizzInfo[5][bPriceMod] = 100;
				BizzInfo[6][bPriceMod] = 100;BizzInfo[7][bPriceMod] = 100;BizzInfo[8][bPriceMod] = 100;
				BizzInfo[9][bPriceMod] = 100;BizzInfo[10][bPriceMod] = 100;BizzInfo[11][bPriceMod] = 100;BizzInfo[12][bPriceMod] = 100;
				*/
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[TEST]-----------------------------------------------
	if(strcmp(cmd, "/testcam", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			new Float:plx,Float:ply,Float:plz;
			new Float:clx,Float:cly,Float:clz;
			GetPlayerPos(playerid, plx, ply, plz);
			clx = plx;
			cly = ply+2;
			clz = plz+0.2;
			plz = plz+0.6;
			SetPlayerFacingAngle(playerid, 0.0);
			SetPlayerCameraPos(playerid,clx, cly, clz);
			SetPlayerCameraLookAt(playerid,plx, ply, plz);
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/prop", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			LoadProperty();
			LoadBizz();
			LoadSBizz();
			SendClientMessage(playerid, COLOR_GRAD1, "Server:Property Reloaded");
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/tmppos", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			LoadTmp();
			SendClientMessage(playerid, COLOR_GRAD1, "   TmpPos Reloaded");
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[UNCON]-----------------------------------------------

	if(strcmp(cmd, "/uncon", true) == 0 && IsPlayerConnected(playerid))
	{

		SetCamBack(playerid);
		return 1;
	}
//--- EJECT
	if(strcmp(cmd,"/eject",true)==0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
	//	new haha = strval(tmp);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Invalid ID");
			return 1;
		}
 		new pid;
		if(IsStringAName(tmp))
		{
			pid = GetPlayerID(tmp);
		}
		else
		{
			pid = strval(tmp);
		}
		if(GetPlayerVehicleID(playerid)==GetPlayerVehicleID(pid))
		{
			RemovePlayerFromVehicle(pid);
		}
		return 1;
	}
/*	if(strcmp(cmd,"/aalarm",true)==0){
		if(gAAlert[playerid]==0){gAAlert[playerid]=1;SendClientMessage(playerid,COLOR_BLUE,"You have turned your anti cheat alerts on");return 1;}
		if(gAAlert[playerid]==1){gAAlert[playerid]=0;SendClientMessage(playerid,COLOR_BLUE,"You have turned your anti cheat alerts off");return 1;}
	}
	if(strcmp(cmd,"/acreset",true)==0){
		if(IsPlayerAdmin(playerid)||PlayerInfo[playerid][pAdmin]>=102 || FugitiveCore[playerid] == 1){
			for(new i=0;i<MAX_PLAYERS;i++){
				gMon[i]=GetPlayerMoney(i);
			}
		}
	}*/
	if(strcmp(cmd,"/flame",true)==0){
		SendClientMessageToAll(COLOR_YELLOW,"There is a flaming section in the forums at www.pen1sf.com");
	}
	if(strcmp(cmd,"/paintjob",true)==0){
		if(IsACar(GetPlayerVehicleID(playerid))){
		    tmp=strtok(cmdtext,idx);
		    if(strval(tmp)>2){SendClientMessage(playerid,COLOR_GREEN,"Only supports paintjobs 0, 1 and 2");return 1;}
			ChangeVehiclePaintjob(GetPlayerVehicleID(playerid),strval(tmp));
			GiveMoney(playerid,-500);
			SendClientMessage(playerid,COLOR_GREEN,"$500 for a paintjob");
		    return 1;
	    }
	}
	if(strcmp(cmd,"/nos",true)==0)
	{// && (IsPlayerAdmin(playerid)||PlayerInfo[playerid][pAdmin]>=107 || FugitiveCore[playerid] == 1)){
	    if(IsACar(GetPlayerVehicleID(playerid))){
			AddVehicleComponent(GetPlayerVehicleID(playerid),1010);
			GiveMoney(playerid,-500);
			SendClientMessage(playerid,COLOR_GREEN,"$500 for N02");
		}
	    return 1;
	}
	if(!strcmp(cmd,"/chkhealth",true))
 	{
 	    new Float:vhealth,Float:phealth,Float:parmour;
	    if(IsPlayerInAnyVehicle(playerid)){
	        GetVehicleHealth(GetPlayerVehicleID(playerid),vhealth);
	        GetPlayerHealth(playerid,phealth);
	        GetPlayerArmour(playerid,parmour);
			format(string,sizeof(string),"Your Vehicle Health is %.0f Your health is %.0f Your Armour is %.0f",vhealth,phealth,parmour);
		}
		else{
			GetPlayerHealth(playerid,phealth);
	        GetPlayerArmour(playerid,parmour);
	        format(string,sizeof(string),"Your health is %.0f Your Armour is %.0f",phealth,parmour);
		}
		SendClientMessage(playerid,COLOR_GRAD1,string);
	    return 1;
	}
	if(!strcmp(cmd,"/modify",true))
	{
		AddVehicleComponent(38,1010);
	    return 1;
	}
	if(strcmp(cmd,"/rc",true)==0){
		new house = PlayerInfo[playerid][pPhousekey];
		if(house!=255 && gPlayerRC[playerid]!=1){
		    if(HouseInfo[house][hRC]!=1){SendClientMessage(playerid,COLOR_YELLOW,"You don't have that upgrade.");return 1;}
		    if(GetPlayerInterior(playerid)==0){SendClientMessage(playerid,COLOR_YELLOW,"You must be in an interior.");return 1;}
		    gPlayerRCArea[playerid][0]=HouseInfo[house][hEntrancex]+250;
		    gPlayerRCArea[playerid][1]=HouseInfo[house][hEntrancex]-250;
		    gPlayerRCArea[playerid][2]=HouseInfo[house][hEntrancey]+250;
		    gPlayerRCArea[playerid][3]=HouseInfo[house][hEntrancey]-250;
	    	gRCveh[playerid]=CreateVehicle(464,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez],180,-1,-1,-1);
	    	SetPlayerInterior(playerid,0);
	    	PutPlayerInVehicle(playerid,gRCveh[playerid],0);
	    	SendClientMessage(playerid,COLOR_YELLOW,"Protect your house!");
	    	gPlayerRC[playerid]=1;
	    	return 1;
	    	//SetPlayerWorldBounds(playerid,500,-500,500,-500);
	    	//SetPlayerWorldBounds(playerid,maxx,minx,maxy,miny); //Any of these make the game run horribly slow
	    //	SetPlayerWorldBounds(playerid,HouseInfo[house][hEntrancex]+250.0,HouseInfo[house][hEntrancex]-250.0,HouseInfo[house][hEntrancey]+250.0,HouseInfo[house][hEntrancey]-250.0);
		}
		if(gPlayerRC[playerid]==1)
		{
			gPlayerRC[playerid]=0;
			//RemovePlayerFromVehicle(gRCveh[playerid]); //This doesn't work for RC cars
			SetPlayerPos(playerid,HouseInfo[house][hEntrancex],HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]);
			SendClientMessage(playerid,COLOR_YELLOW,"Hope you had fun!");
			gDelVec[playerid]=gRCveh[playerid];
			SetTimer("dVec",5000,0);
			return 1;
		}
	}
	if(strcmp(cmd, "/chkmodel", true) == 0)
	{
		if(IsPlayerInAnyVehicle(playerid)){format(string,sizeof(string),"Vehicle model: %d",GetVehicleModel(GetPlayerVehicleID(playerid)));SendClientMessage(playerid,COLOR_GREEN,string);}
	}
	if(strcmp(cmd,"/chkvecs",true)==0)
	{
	    new vecs;
	    for(new i=0;i<MAX_VEHICLES;i++)
	    {
			if(GetVehicleModel(i)>399&&GetVehicleModel(i)<612){vecs++;}
	    }
	    format(string,sizeof(string),"there are %d vehicles in this gamemode",vecs);
	    SendClientMessage(playerid,COLOR_GREEN,string);
	    return 1;
	}
	if(strcmp(cmd, "/chkmodels", true) == 0)
	{
	    new vehicles,models[212],model,check;
	    for(new i=0;i<MAX_VEHICLES;i++){
	    	model=GetVehicleModel(i);
	    	for(new j=0;j<sizeof(models);j++){
				if(models[j]==model){check=1;}//j=sizeof(models);}
 			}
 			if(check==0){
 				models[vehicles]=model;
 				vehicles++;
		 		//models[i]=model;
 			}
 			else{
 				check=0;
 			}
			//else{check=0};} FYI, trying this will crash your compiler
	    }
	    if(vehicles==0){SendClientMessage(playerid,COLOR_YELLOW,"You fudged the bucket");return 1;}
	    format(string,sizeof(string),"There are %d different vehicle models in this gamemode",vehicles);
	    SendClientMessage(playerid,COLOR_YELLOW,string);
	    return 1;
	}
	if(!strcmp(cmdtext,"/paytoll",true))
	{
	    if(IsPlayerAdmin(playerid) == 1)
		{
			MoveObject(Tollgate3,1587.9, -1638.4, 6.1,4);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not An Admin");
		}
		return 1;
	}
	if(!strcmp(cmdtext,"/gateopen",true))
	{
	    if(IsPlayerAdmin(playerid) == 1)
		{
			MoveObject(LSPDGate,1587.9, -1638.4, 6.1,4);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not An Admin");
		}
		return 1;
	}
	if(!strcmp(cmdtext,"/gateclose",true))
	{
	    if(IsPlayerAdmin(playerid) == 1)
		{
			MoveObject(LSPDGate,1587.9, -1638.4, 16.1,4);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You Are Not An Admin");
		}
		return 1;
	}
	if(strcmp(cmd, "/cars1", true) == 0 && IsPlayerConnected(playerid))
  	{
	    SendClientMessage(playerid, 0xFF1493FF, "[400 landstal][401 bravura][402 buffalo][403 linerun][404 peren][405 sentinel][406 dumper][407 firetruk][408 trash]");
        SendClientMessage(playerid, 0xFF1493FF, "[409 stretch][410 manana][411 infernus][412 voodoo][413 pony][414 mule][415 cheetah][416 ambulan][417 leviathn]");
        SendClientMessage(playerid, 0xFF1493FF, "[418 moonbeam][419 esperant][420 taxi][421 washing][422 bobcat][423 mrwhoop][424 bfinject][425 hunter][426 premier]");
        SendClientMessage(playerid, 0xFF1493FF, "[427 enforcer][428 securica][429 banshee][430 predator][431 bus][432 rhino][433 barracks][434 hotknife][435 artict1]");
        SendClientMessage(playerid, 0xFF1493FF, "[436 previon][437 coach][438 cabbie][439 stallion][440 rumpo][441 rcbandit][442 romero][443 packer][444 monster]");
        SendClientMessage(playerid, 0xFF1493FF, "[445 admiral][446 squalo][447 seaspar][448 pizzaboy][449 tram][450 artict2][451 turismo][452 speeder][453 reefer]");
        SendClientMessage(playerid, 0xFF1493FF, "[454 tropic][455 flatbed][456 yankee][457 caddy][458 solair][459 topfun][460 skimmer][461 pcj600][462 faggio]");
        SendClientMessage(playerid, 0xFF1493FF, "[463 freeway][464 rcbaron][465 rcraider][466 glendale][467 oceanic][469 sparrow][470 patriot][471 quad][472 coastg]");
        SendClientMessage(playerid, 0xFF1493FF, "[473 dinghy][474 hermes][475 sabre][476 rustler][468 sanchez][477 zr350][479 regina][481 bmx][482 burrito][483 camper]");
        SendClientMessage(playerid, 0xFF1493FF, "[484 marquis][485 baggage][486 dozer][487 maverick][488 vcnmav][480 comet][489 rancher][490 fbiranch][491 virgo]");
		//------------------------------------------------------------------------------------------------------------------------------------------------------------
		return 1;
	}
    if(strcmp(cmd, "/cars2", true) == 0 && IsPlayerConnected(playerid))
  	{
	    SendClientMessage(playerid, 0xFF1493FF, "[492 greenwoo][493 jetmax][494 hotring][495 sandking][496 blistac][478 walton][497 polmav][498 boxville][499 benson]");
        SendClientMessage(playerid, 0xFF1493FF, "[500 mesa][501 rcgoblin][502 hotrina][503 hotrinb][504 bloodra][505 rnchlure][506 supergt][507 elegant][508 journey]");
        SendClientMessage(playerid, 0xFF1493FF, "[509 bike][510 mtbike][511 beagle][512 cropdust][513 stunt][514 petro][515 rdtrain][516 nebula][517 majestic]");
        SendClientMessage(playerid, 0xFF1493FF, "[518 buccanee][519 shamal][520 hydra][521 fcr900][522 nrg500][523 copbike][524 cement][525 towtruck][526 fortune]");
        SendClientMessage(playerid, 0xFF1493FF, "[527 cadrona][528 fbitruck][529 willard][530 forklift][531 tractor][532 combine][533 feltzer][534 remingtn]");
        SendClientMessage(playerid, 0xFF1493FF, "[535 slamvan][536 blade][537 freight][538 streak][539 vortex][540 vincent][541 bullet][542 clover][543 sadler]");
        SendClientMessage(playerid, 0xFF1493FF, "[544 firela][545 hustler][546 intruder][547 primo][548 cargobob][549 tampa][550 sunrise][551 merit][552 utility]");
        SendClientMessage(playerid, 0xFF1493FF, "[553 nevada][554 yosemite][555 windsor][556 monstera][557 monsterb][558 uranus][559 jester][560 sultan][561 stratum]");
        SendClientMessage(playerid, 0xFF1493FF, "[562 elegy][563 raindanc][564 rctiger][565 flash][566 tahoma][567 savanna][568 bandito][569 freiflat][570 streakc]");
        SendClientMessage(playerid, 0xFF1493FF, "[571 kart][572 mower][573 duneride][574 sweeper][575 broadway][576 tornado][577 at400][578 dft30][579 huntley]");
		return 1;
	}
    if(strcmp(cmd, "/cars3", true) == 0 && IsPlayerConnected(playerid))
  	{
	    SendClientMessage(playerid, 0xFF1493FF, "[580 stafford][581 bf400][582 newsvan][583 tug][584 petrotr][585 emperor][586 wayfarer][587 euros][588 hotdog]");
        SendClientMessage(playerid, 0xFF1493FF, "[589 club][590 freibox][591 artict3][592 androm][593 dodo][594 rccam][595 launch][596 copcarla][597 copcarsf]");
		SendClientMessage(playerid, 0xFF1493FF, "[598 copcarvg][599 copcarru][600 picador][601 swatvan][602 alpha][603 phoenix][604 glenshit][605 sadlshit][606 bagboxa]");
		SendClientMessage(playerid, 0xFF1493FF, "[607 bagboxb][608 tugstair][609 boxburg][610 farmtr1][611 utiltr1]");
		return 1;
	}
	if(!gCuffed[playerid] && !gFrozen[playerid])
	{
		if(strcmp(cmd,"/wank",true)==0 || strcmp(cmd,"/jackoff",true)==0 || strcmp(cmd,"/masturbate",true)==0)
		{
			ApplyAnimation(playerid,"PAULNMAC","wank_loop",5.0,1,0,0,0,-1);
		    return 1;
		}
		if (strcmp("/vomit", cmdtext, true) == 0)
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid, "FOOD", "EAT_Vomit_SK",5.0,0,0,0,0,0);
			format(string, sizeof(string), "** %s has just thrown up **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/chill", cmdtext, true) == 0)
		{
   			GetPlayerName(playerid, sendername, sizeof(sendername));
        	ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop",5.0,1,0,0,0,-1); // Sit
			format(string, sizeof(string), "** %s sits down **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
            return 1;
		}
		if (strcmp("/snooze", cmdtext, true) == 0)
		{
   			GetPlayerName(playerid, sendername, sizeof(sendername));
        	ApplyAnimation(playerid,"INT_HOUSE", "BED_Loop_L",4.0,1,0,0,0,-1); // Sit
			format(string, sizeof(string), "** %s snoozes **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
            return 1;
		}
		if (strcmp("/sit", cmdtext, true) == 0)
		{
   			GetPlayerName(playerid, sendername, sizeof(sendername));
        	ApplyAnimation(playerid,"SUNBATHE", "ParkSit_M_IdleB",5.0,1,0,0,0,-1); // Sit
			format(string, sizeof(string), "** %s sits down **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
            return 1;
		}
		if (strcmp("/sunbathe", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid,"BEACH", "bather",5.0,1,0,0,0,0); // Lay down
			format(string, sizeof(string), "** %s lays down to rest **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/cover", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid, "ped", "cower",5.0,1,0,0,0,0); // Taking Cover
			format(string, sizeof(string), "** %s takes cover! **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/pee", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid, "PAULNMAC", "Piss_in",3.0,0,0,0,0,0); // Pissing
			format(string, sizeof(string), "** %s Urinates **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/wave", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid, "KISSING", "BD_GF_Wave",3.0,0,0,0,0,0); // Wave
			format(string, sizeof(string), "** %s waves goodbye **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/lol", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid, "RAPPING", "Laugh_01",4.0,0,0,0,0,0); // Laugh
			format(string, sizeof(string), "** %s laughs out loud **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/smoke", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 3.0,1,0,0,0,0); // Smoke
			format(string, sizeof(string), "** %s pulls it out and lights it **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/meditate", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid,"PARK", "Tai_Chi_Loop", 3.0,1,0,0,0,0); // Smoke
			format(string, sizeof(string), "** %s meditates **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/chat", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid,"PARK", "Idle_Chat_02", 3.0,1,0,0,0,0); // Smoke
			format(string, sizeof(string), "** %s chats **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/cpr", cmdtext, true) == 0)
		{
		    GetPlayerName(playerid, sendername, sizeof(sendername));
			ApplyAnimation(playerid,"MEDIC", "CPR", 5.0,0,0,0,0,0); // Smoke
			format(string, sizeof(string), "** %s Preforms CPR **", sendername);
			SendClientMessage(playerid, COLOR_GRAD2 ,string);
			return 1;
		}
		if (strcmp("/kick", cmdtext, true) == 0)
		{
			ApplyAnimation(playerid,"POLICE", "Door_Kick", 5.0,0,0,0,0,0); // Smoke
			return 1;
		}
		if(strcmp(cmd,"/surrender",true)==0)
		{
		    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
		    return 1;
		}
 		if(strcmp(cmd, "/anims", true) == 0 && IsPlayerConnected(playerid))
  		{
  		    SendClientMessage(playerid, COLOR_BLUE, "------------------- Animations List -------------------");
  		    SendClientMessage(playerid, COLOR_GRAD1, "USAGE: Animation Commands (To undo: /clearanim or /ca");
	    	SendClientMessage(playerid, COLOR_WHITE, "/wank /vomit /chill /snooze /sit /cover /pee /wave /dance /strip");
			SendClientMessage(playerid, COLOR_WHITE, "/lol /sunbathe /smoke /meditate /kick /chat /cpr /surrender");
        	return 1;
		}
		//Dance from actions.pwn 
		if(strcmp(cmd, "/dance", true) == 0) {
		    new dancestyle;
			if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT) {
			    //new tmp[256];

			    // Get the dance style param
	      		tmp = strtok(cmdtext, idx);
				if(!strlen(tmp)) {
					SendClientMessage(playerid,0xFF0000FF,"Usage: /dance [style 1-3]");
					return 1;
				}

				dancestyle = strval(tmp);
				if(dancestyle < 1 || dancestyle > 3) {
				    SendClientMessage(playerid,0xFF0000FF,"Usage: /dance [style 1-3]");
				    return 1;
				}

				if(dancestyle == 1) {
				    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
				} else if(dancestyle == 2) {
				    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
				} else if(dancestyle == 3) {
				    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
				}
	 	  		return 1;
			}
		}
		if(strcmp(cmd,"/passblunt",true)==0)
		{
		    if(IsPlayerInAnyVehicle(playerid)){ApplyAnimation(playerid,"PED","pass_Smoke_in_car",5.0,0,0,0,0,-1);}
			return 1;
		}
		if(strcmp(cmd,"/smokeblunt",true)==0)
		{
		    if(IsPlayerInAnyVehicle(playerid)){ApplyAnimation(playerid,"PED","Smoke_in_car",5.0,1,0,0,0,-1);}
			return 1;
		}
		if(strcmp(cmd,"/strip1",true)==0)
		{
			ApplyAnimation(playerid,"STRIP","STR_Loop_A",5.0,1,0,0,0,-1);
		    return 1;
		}
		if(strcmp(cmd,"/strip2",true)==0)
		{
			ApplyAnimation(playerid,"STRIP","STR_Loop_b",5.0,1,0,0,0,-1);
		    return 1;
		}
		if(strcmp(cmd,"/strip3",true)==0)
		{
			ApplyAnimation(playerid,"STRIP","STR_Loop_c",5.0,1,0,0,0,-1);
		    return 1;
		}
  		if(strcmp(cmd,"/clearanim",true)==0 || strcmp(cmd,"/ca",true)==0)
		{
			ClearAnimations(playerid);
		    return 1;
		}
	}
	if(strcmp(cmd,"/world",true)==0 && PlayerInfo[playerid][pAdmin]>=105 || FugitiveCore[playerid] == 1)
	{
	    tmp=strtok(cmdtext,idx);
		SetPlayerVirtualWorld(playerid,strval(tmp));
	    return 1;
	}
	if(strcmp(cmd,"/cworld",true)==0)
	{
		new world=GetPlayerVirtualWorld(playerid);
		format(string,sizeof(string),"You are in world %d",world);
		SendClientMessage(playerid,COLOR_YELLOW,string);
	    return 1;
	}
	if(strcmp(cmd,"/showtime",true)==0)
	{
		TextDrawShowForAll(timetext);
		return 1;
	}
	if(strcmp(cmd,"/flip",true)==0 && (IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin]>=102 || FugitiveCore[playerid] == 1))
	{
	    new Float:z;
	    GetVehicleZAngle(GetPlayerVehicleID(playerid),z);
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),z);
	    return 1;
	}
	if(strcmp(cmd,"/turn",true)==0 && (IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin]>=102 || FugitiveCore[playerid] == 1))
	{
	    new Float:z;
	    GetVehicleZAngle(GetPlayerVehicleID(playerid),z);
	    SetVehicleZAngle(GetPlayerVehicleID(playerid),z+180);
	    return 1;
	}
	if(!strcmp(cmd,"/decode",true))
	{
	    tmp=strtok(cmdtext,idx);
	    Decript(tmp);
	    format(string,sizeof(string),"%s is the password",tmp);
	    SendClientMessage(playerid,COLOR_RED,string);
	    return 1;
	}
	if(!strcmp(cmd,"/derby",true))
	{
	    if(derbyon){
		    if(gDerbyStarted==0){JoinDerby(playerid);}
		    else{SendClientMessageToAll(COLOR_YELLOW,"Derby started. You cannot join now.");}
	    }
	}
	if(strcmp(cmd, "/chkmon", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(cmd))
		{
			SendClientMessage(playerid,COLOR_YELLOW,"Usage: /chkmon [playerid]");
			return 1;
		}
		if(PlayerInfo[playerid][pAdmin] < 102 || FugitiveCore[playerid] == 1)
		{
			SendClientMessage(playerid,COLOR_YELLOW,"You are not an admin, prepare to be vanquished!");
			return 1;
		}
		new pid;
		if(IsStringAName(tmp))
		{
			pid = GetPlayerID(tmp);
		}
		else
		{
			pid = strval(tmp);
		}
		if(!IsPlayerConnected(pid))
		{
			SendClientMessage(playerid,COLOR_YELLOW,"The given player is not connected!");
			return 1;
		}
		new player[24];
		GetPlayerName(pid,player,24);
		format(string,sizeof(string),"Player %s has $%d of which $%d is unhacked.",player,GetPlayerMoney(pid),gMon[pid]);
		SendClientMessage(playerid,0x00FF00AA,string);
		return 1;
	}
	

	if(!strcmp(cmdtext,"/elevator",true)) {
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
			if (IsValidMenu(elemenu)){
				ShowMenuForPlayer(elemenu, playerid);
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext,"/nielevator",true)) {
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
			if (IsValidMenu(nielemenu)){
				ShowMenuForPlayer(nielemenu, playerid);
			}
		}
		return 1;
	}
	if(!strcmp(cmdtext,"/nigateopen",true)) {
		if((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
			MoveObject(Gate,-2083,877.8,1014,2);
		}
		return 1;
	}
	if(!strcmp(cmdtext,"/nigateclose",true)) {
		if((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {
			MoveObject(Gate,-2083,877.8,1009,2);
		}
		return 1;
	}
	if(!strcmp(cmdtext,"/agate",true)) {
		if((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || AdminAreaAccess[playerid] == 1 && IsPlayerConnected(playerid)) {
			MoveObject(Agate,-2096.2874,1381.1781,6.0000,6);
			SetTimer("AgateT",4000,0);
		}
		return 1;
	}
	if(!strcmp(cmdtext,"/agateopen",true)) {
		if((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || AdminAreaAccess[playerid] == 1 && IsPlayerConnected(playerid)) {
			MoveObject(Agate,-2096.2874,1381.1781,6.0000,6);
		}
		return 1;
	}
	if(strcmp(cmd,"/chkprot",true)==0)
	{
		if(gRobProtection[playerid]==0){
			SendClientMessage(playerid,0x00FF00AA,"You have no rob protection");
		}
		else{SendClientMessage(playerid,0x00FF00AA,"You have rob protection");}
	}
	if(strcmp(cmd,"/lotto",true)==0){
		tmp = strtok(cmdtext,idx);
		//new string[256];
		if(!strlen(cmd) || strval(tmp)<1 || strval(tmp)>250){
			SendClientMessage(playerid,COLOR_BLUE,"SYNTAX: /lotto [ticketnumber] (make it 1-250)");
			format(string,sizeof(string),"XP Lotto Pool of %d",gLottoPool);
			SendClientMessage(playerid,COLOR_YELLOW,string);
			return 1;
		}
		if(PlayerInfo[playerid][pExp]<=0){SendClientMessage(playerid,COLOR_BLUE,"You do not have any XP to bet.");return 1;}
		if(gLottoTicket[playerid]==0){
			gLottoTicket[playerid]=strval(tmp);
			PlayerInfo[playerid][pExp]--;
			format(string,sizeof(string),"You paid 1 xp for lottery ticket with the number %d",strval(tmp));
			SendClientMessage(playerid,COLOR_BLUE,string);
			gLottoPool++;
			return 1;
		}
		else{format(string,sizeof(string),"XP Lotto Pool of %d",gLottoPool); SendClientMessage(playerid,COLOR_YELLOW,string);format(string,sizeof(string),"You have a lottery ticket number %d",gLottoTicket[playerid]);SendClientMessage(playerid,COLOR_BLUE,string);}
	}
	if(!strcmp(cmd,"/lottopool",true) && IsPlayerAdmin(playerid) && AdminLevel(playerid) >= 107)
	{
	    tmp=strtok(cmdtext,idx);
	    gLottoPool=strval(tmp);
	    return 1;
	}
	if(strcmp(cmd,"/forcelotto",true)==0){
		if(IsPlayerAdmin(playerid)){
			gLottoTime=0;
			LottoTime();
		}
		return 1;
	}
	if(!strcmp(cmd,"/forcerace",true))
	{
	    if(IsPlayerAdmin(playerid)){
			gRaceCD=5;
	        gRaceTimer=SetTimer("RaceStart",1000,1);
	    }
	    return 1;
	}
//END OF EJECT
//----------------------------------[AdminChat]-----------------------------------------------
	if(strcmp(cmd, "/admin", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/a", true) == 0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: (/a)dmin [admin chat]");
			return 1;
		}
		if (PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
		{
			format(string, sizeof(string), "Admin %s: %s", sendername, result);
			ABroadCast(COLOR_YELLOW,string,1);
            return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
            return 1;
		}
	}
//-------------------------------[Logout]--------------------------------------------------------------------------
	if (strcmp(cmd, "/logout", true) ==0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			OnPlayerUpdate(playerid);
			gPlayerLogged[playerid] = 0;
			SendClientMessage(playerid, COLOR_GREEN, "Server: It is now safe to quit.");
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
	}
	if (strcmp(cmd, "/logoutpl", true) ==0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /logoutpl [playerid/PartOfName]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			OnPlayerUpdate(giveplayerid);
			gPlayerLogged[giveplayerid] = 0;
			SendClientMessage(playerid, COLOR_RED, "AdmCmd: Player has been logged out.");
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
	}
//-------------------------------[Logoutall]--------------------------------------------------------------------------
	if (strcmp(cmd, "/logoutall", true) ==0 )
	{
        GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1)
				{
					OnPlayerUpdate(i);
					gPlayerLogged[i] = 0;
				}
			}
			SendClientMessage(playerid, COLOR_RED, "AdmCmd: All Players have been logged out.");
			printf("Admin %s has Logged all players out.", sendername);
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
	}
//----------------------------------[cnn]-----------------------------------------------
	if(strcmp(cmd, "/cnn", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerName(playerid, sendername, sizeof(sendername));
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cnn [cnn textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
				return 1;
			}
			if(!gCNN){
			    //TextDrawDestroy(CNN);
				format(string, sizeof(string), "~r~%s: ~w~%s",sendername,result);
				CNN=TextDrawCreate(150.0, 120.0, string);
				//TextDrawUseBox(CNN, true);  // removed for the moment.
				//TextDrawBoxColor(CNN,0x0011FF35);
				TextDrawTextSize(CNN,600.0,100.0);
				TextDrawSetShadow(CNN,0);
				TextDrawSetOutline(CNN,1);
				//TextDrawAlignment(CNN,2);
				TextDrawSetProportional(CNN,1);
				TextDrawFont(CNN,3);//Was 3
				TextDrawLetterSize(CNN,0.7,1.4);
				TextDrawShowForAll(CNN);
				gCNN=1;
				SetTimer("DestroyCNN",5000,0);
				return 1;
			}
			else{SendClientMessage(playerid,COLOR_GRAD2,"Wait for the previous CNN to clear");return 1;}
/*			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1)
				{
					GameTextForPlayer(i, string, 5000, 4);
				}
			}*/
			//return 1; UNREACHABLE
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: You are not authorized to use that command!");
		}
	}
/*	if(strcmp(cmdtext, "/ping-on", true) == 0)
	{
		if(IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1)
		{
	    	ping1 = 1;
			SendClientMessage(playerid,COLOR_GREEN,"xPing-Kick: Ping kicker is now on");
	    	return 1;
	    }
	    return 1;
	}
	if(strcmp(cmdtext, "/ping-off", true) == 0)
	{
	    if(IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1)
		{
	    	ping1 = 0;
			SendClientMessage(playerid,COLOR_GREEN,"xPing-Kick: Ping kicker is now off");
	    	return 1;
	    }
	    return 1;
	}*/
	if(strcmp(cmd, "/cnnn", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			tmp = strtok(cmdtext, idx);
			new txtid;
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cnnn <type> ");
				return 1;
			}
			txtid = strval(tmp);
			if(txtid == 2)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Server:You can not select 2");
				return 1;
			}
			new length = strlen(cmdtext);
			while ((idx < length) && (cmdtext[idx] <= ' '))
			{
				idx++;
			}
			new offset = idx;
			new result[64];
			while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
			{
				result[idx - offset] = cmdtext[idx];
				idx++;
			}
			result[idx - offset] = EOS;
			if(!strlen(result))
			{
				SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cnnn <type> [cnnc textformat ~n~=Newline ~r~=Red ~g~=Green ~b~=Blue ~w~=White ~y~=Yellow]");
				return 1;
			}
			format(string, sizeof(string), "~w~%s",result);
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1)
				{
					GameTextForPlayer(i, string, 5000, txtid);
				}
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
	}
//[ADMIN]______________________________________________________________________________
//-----------------------------------[JAIL]-------------------------------------------------------------------------
	if(strcmp(cmd, "/stun", true) ==0)
	{
	    if(IsPlayerConnected(playerid))
	    {
			if(gTeam[playerid] == 2 || PlayerInfo[playerid][pRank] >= 11)
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        SendClientMessage(playerid, COLOR_GREY, "   Cannot use this while being in the Car !");
			        return 1;
			    }
			    giveplayerid = GetClosestPlayer(playerid);
			    if(IsPlayerConnected(giveplayerid))
				{
				    if (ProxDetectorS(5.0, playerid, giveplayerid))
					{
					    if(IsPlayerInAnyVehicle(giveplayerid))
					    {
					        SendClientMessage(playerid, COLOR_GREY, "   Suspect must be removed from the vehicle!");
					        return 1;
					    }
					    GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
						GetPlayerName(playerid, sendername, sizeof(sendername));
						format(string, sizeof(string), "* You were Stunned by %s for 7 seconds.", sendername);
						SendClientMessage(giveplayerid, TEAM_BLUE_COLOR, string);
						format(string, sizeof(string), "* You Stunned %s for 7 seconds.", giveplayer);
						SendClientMessage(playerid, TEAM_BLUE_COLOR, string);
						format(string, sizeof(string), "* %s take his stun gun and Fires at %s, and Stuns him.", sendername ,giveplayer);
						ProxDetector(30.0, playerid, string, TEAM_BLUE_COLOR,TEAM_BLUE_COLOR,TEAM_BLUE_COLOR,TEAM_BLUE_COLOR,TEAM_BLUE_COLOR);
						GameTextForPlayer(giveplayerid, "~r~You have been stunned", 2500, 3);
						ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
						ApplyAnimation(giveplayerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
						TogglePlayerControllable(giveplayerid, 0);
						Stunned[giveplayerid] = 1;
						SetTimer("UnStun", 8000, 0);
		            }
					else
					{
					    SendClientMessage(playerid, COLOR_GREY, "Error: Target out of range");
					    return 1;
					}
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GREY, "	You Are not a Law Officer");
			}
		}//not connected
	    return 1;
	}
	if(strcmp(cmd, "/cuff", true) == 0 && IsPlayerConnected(playerid))
	{
        tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cuff [Player id]");
			return 1;
		}
		giveplayerid = strval(tmp);
		/*if(GetPlayerState(giveplayerid) == 2)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "	Your cuffie has to be in a vehicle");
			return 1;
		}*/
        if(Phandcuffs[playerid] == 0)
        {
        	SendClientMessage(playerid, COLOR_GRAD2,"	You Dont have a pair of hand cuffs.");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if((GetPlayerState(playerid)==PLAYER_STATE_ONFOOT && GetPlayerState(giveplayerid)==PLAYER_STATE_ONFOOT)||(GetPlayerState(giveplayerid) == PLAYER_STATE_PASSENGER))
			{
			    new Float:health;
				if (ProxDetectorS(5.0, playerid, giveplayerid))
				{
				    if((GetPlayerHealth(giveplayerid,health)<30.0)||(GetPlayerState(giveplayerid)==PLAYER_STATE_PASSENGER && GetPlayerVehicleID(playerid)==GetPlayerVehicleID(giveplayerid))){
						Phandcuffs[playerid] = 0;
     					format(string, sizeof(string), "** %s You have been hand-Cuffed **.", giveplayer);
                    	SendClientMessage(playerid, COLOR_YELLOW, string);
       					format(string, sizeof(string), "** %s has hand Cuffed you **", sendername);
                    	SendClientMessage(giveplayerid, COLOR_WHITE, string);
						TogglePlayerControllable(giveplayerid, 0);
						gCuffed[giveplayerid]=1;
						return 1;
					}
					else{SendClientMessage(playerid,COLOR_WHITE,"They need 30 or less health to be cuffed.");return 1;}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "	You need to be closer to the player");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Player has to be in the passengers seat of your car.");
				return 1;
			}
		}
		else
		{
			format(string, sizeof(string), "SERVER: %d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
//----------------------------------[GetAll]------------------------------------------------
	if(strcmp(cmd, "/getall", true) == 0)
	{
		for(new i=0; i<MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) && IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin] >= 5 || FugitiveCore[playerid] == 1)
 			{
				new Float:x,Float:y,Float:z;
				GetPlayerPos(playerid,x,y,z);
				if(i == playerid) return 1;
			    SetPlayerPos(i,x+random(10),y+random(10),z);
			    new player[24];
				GetPlayerName(playerid,player,24);
			    format(string,sizeof(string)," Admin %s teleported everybody to he/she.",player);
			    SendClientMessageToAll(COLOR_GREY,string);
			    return 1;
			}
		}
		return 1;
	}
//----------------------------------[Ban]------------------------------------------------
	if(strcmp(cmd, "/uncuff", true) == 0 && IsPlayerConnected(playerid))
	{
        tmp = strtok(cmdtext, idx);
    	if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /uncuff >Player id<");
			return 1;
		}
		giveplayerid = strval(tmp);
		if(GetPlayerState(giveplayerid) == 2)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "	Your cuffie has to be in a vehicle");
			return 1;
		}
        if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if(GetPlayerState(giveplayerid) == PLAYER_STATE_PASSENGER)
			{
				if (ProxDetectorS(4.0, playerid, giveplayerid))
				{
					Phandcuffs[playerid] = 1;
     				format(string, sizeof(string), "** %s You have been un-Cuffed **.", giveplayer);
                    SendClientMessage(playerid, COLOR_YELLOW, string);
       				format(string, sizeof(string), "** %s has un-Cuffed you **", sendername);
                    SendClientMessage(giveplayerid, COLOR_WHITE, string);
					TogglePlayerControllable(giveplayerid, 1);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "	You need to be closer to the player");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "	Player has to be in the passengers seat.");
				return 1;
			}
		}
		else
		{
			format(string, sizeof(string), "SERVER: %d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/ajail", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ajail [playerid/PartOfName] [seconds]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
			//printf("stringnameid %d",giveplayerid);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ajail [playerid/PartOfName] [seconds]");
			return 1;
		}
		new time = strval(tmp);

		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
			{
				SetPlayerInterior(giveplayerid,3);
				PlayerInfo[giveplayerid][pInt] = 3;
                SetPlayerPos(giveplayerid,197.72,175.06,1003.02);
				format(string, sizeof(string), "   You have sent %s(player: %d) to jail.", giveplayer,giveplayerid);
				//printf("AdmCmd: %s has jailed %s.", sendername, giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				SendClientMessage(giveplayerid, COLOR_GRAD1,"   You have been jailed for misconduct.");
				PlayJailSound(1153 , 1154, 2000,264.395200, 77.564040, 1001.039000);
				JailTime[giveplayerid] = time+10;
				//TogglePlayerControllable(giveplayerid, 0);
				return 1;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
				return 1;
			}
		}
		else
		{
			format(string, sizeof(string), "Server: %d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if((strcmp(cmd, "/arrest", true) == 0 || strcmp(cmd,"/ar",true) == 0 ) && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /arrest [Criminal's ID]");
			return 1;
		}
		giveplayerid = strval(tmp);
		if(JailTime[giveplayerid] > 0)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Server: That person can't be jailed right now.");
			printf("JailTime[giveplayerid](%d) gTeam[giveplayerid](%d)",JailTime[giveplayerid],gTeam[giveplayerid]);
			return 1;
		}
        if(Phandcuffs[playerid] == 1)
        {
        	SendClientMessage(playerid, COLOR_GRAD2,"	You Dont have a pair of hand cuffs to Arrest this player.");
			return 1;
		}
		if(gCuffed[giveplayerid]!=1)
		{
		    SendClientMessage(playerid,COLOR_GRAD2,"You must cuff the suspect before you can arrest them");
		    return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if (gTeam[playerid] == TEAM_BLUE)
			{
				if (ProxDetectorS(4.0, playerid, giveplayerid))
				{
				    if((IsPlayerInAnyVehicle(playerid)&&IsPlayerInAnyVehicle(giveplayerid)&&GetPlayerVehicleID(playerid)==GetPlayerVehicleID(giveplayerid)&&GetPlayerState(playerid)==PLAYER_STATE_PASSENGER)||(!IsPlayerInAnyVehicle(playerid)&&!IsPlayerInAnyVehicle(giveplayerid)))
					{
                    	printf("Officer %s has Arrested %s.", sendername, giveplayer);
                    	PlayerInfo[giveplayerid][pSP]++;
						if(PlayerInfo[playerid][pSP] >= 20)
				    	{
				    		SendClientMessage(giveplayerid, COLOR_YELLOW, "Your Gaining Experience");
                   		    PlayerInfo[playerid][pSP] = 0;
                   	    	PlayerInfo[playerid][pExp]++;
				    	}
						new slice = ((PlayerInfo[giveplayerid][pLevel]*deathcost)+(1000)); //1k +your level
                    	SetPlayerPos(giveplayerid,197.72,175.06,1003.02);
                    	SetPlayerInterior(giveplayerid,3);
						GiveMoney(playerid, slice);
						GiveMoney(giveplayerid, -slice);
						PlayJailSound(1165 , 1166, 2000,197.72,175.06,1003.02);
						format(string, sizeof(string), "~r~Suspect ~w~Detained~n~You Get ~g~$%d", slice);
						GameTextForPlayer(playerid, string, 5000, 4);
						format(string, sizeof(string), "~r~Busted~n~~w~You Are fined ~n~~r~$%d", -slice);
						GameTextForPlayer(giveplayerid, string, 5000, 4);
						PlayerPlayMusic(playerid);
     					JailTime[giveplayerid] = jailtime;
						SetPlayerFree(giveplayerid,playerid,"Serving Prison Sentence",0,0);
						if(FlashTime[giveplayerid] == 0){FlashTime[giveplayerid] = 25;}
						return 1;
					}
					else{}
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You need to be closer to the Criminal");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
				return 1;
			}
		}
		else
		{
			format(string, sizeof(string), "Server: %d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}

//----------------------------------[UNJAIL]-----------------------------------------------
	if(strcmp(cmd, "/unjail", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /unjail [playerid/PartOfName]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
			{
				SetPlayerInterior(giveplayerid,3);
				PlayerInfo[playerid][pInt] = 3;
                SetPlayerPos(giveplayerid,197.40,178.49,1003.02);
				format(string, sizeof(string), "   You have released %s(player: %d) from jail.", giveplayer,giveplayerid);
				printf("AdmCmd: %s has un-jailed %s.", sendername, giveplayer);
				SendClientMessage(playerid, COLOR_GRAD1, string);
				SetPlayerWeapons(playerid);
				SendClientMessage(giveplayerid, COLOR_GRAD1,"-= You have Served Your Sentence =-");
				PlayJailSound(1165 , 1166, 2000,264.395200, 77.564040, 1001.039000);
				JailTime[giveplayerid] = 0;
				//TogglePlayerControllable(giveplayerid, 0);
				return 1;
			}
   			else if (gTeam[playerid] == TEAM_BLUE || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
			{
				if(PlayerToPoint(7.0, playerid, 201.53,168.61,1003.02))
				{
					SetPlayerInterior(giveplayerid,3);
					PlayerInfo[playerid][pInt] = 3;
                	SetPlayerPos(giveplayerid,97.40,178.49,1003.02);
					format(string, sizeof(string), "You have released %s(player: %d) from jail.", giveplayer,giveplayerid);
					printf("Officer %s has Released %s.", sendername, giveplayer);
					SendClientMessage(playerid, COLOR_GRAD1, string);
					SetPlayerWeapons(playerid);
					SendClientMessage(giveplayerid, COLOR_GRAD1,"-= You have Served Your Sentence =-");
					PlayJailSound(1165 , 1166, 1000,264.395200, 77.564040, 1001.039000);
					//TogglePlayerControllable(giveplayerid, 0);
					return 1;
				}
				else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "	You Need to be at central Booking.");
					return 1;
				}
			}
   			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
				return 1;
			}
		}
		else
		{
			format(string, sizeof(string), "SERVER: %d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
//----------------------------------[TOD]-----------------------------------------------

	if(strcmp(cmd, "/tod", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /tod [timeofday] (0-23)");
			return 1;
		}
		new hour;
		hour = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
            SetWorldTime(hour);
			format(string, sizeof(string), "<>> Time set to %d Hours <<>", hour);
			BroadCast(COLOR_GRAD1, string);
			printf("AdmCmd %s has set time to %d.", sendername, hour);
		}
		/*
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		*/
		return 1;
	}
//-----------------------------------editstat---------------------------------------
	if(strcmp(cmd, "/astat", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/setstat", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_BLUE, "--------------< Player Stats Settings >----------------");
			SendClientMessage(playerid, COLOR_WHITE, "*** /astat[playerid][statcode][amount] ***");
			SendClientMessage(playerid, COLOR_GRAD4, "[1]Level[2]SpawnHealth[3]UpgradePoints[4]Model[5]BankAccount");
			SendClientMessage(playerid, COLOR_GRAD3, "[6]PhoneNumber[7]ExpPoints[8]HouseKey[9]BizKey[10]CashBox");
			SendClientMessage(playerid, COLOR_GRAD2, "[11]HW[12]SR[13]SP[14]BD[15]DB[16]FUG[17]Duty[18]AccountEdit");
			SendClientMessage(playerid, COLOR_GRAD2, "[19]Jail[20]Disez[21]Jbpnts[22]suspend[23]Ban[24]Deb");
			SendClientMessage(playerid, COLOR_GRAD4, "[25]Misc[26]Aju[27]Ticket[28]Probation[29]Warnings");
			SendClientMessage(playerid, COLOR_BLUE, "--------------------------------------------------------");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_BLUE, "--------------< Player Stats Settings >----------------");
			SendClientMessage(playerid, COLOR_WHITE, "*** /astat[playerid][statcode][amount] ***");
			SendClientMessage(playerid, COLOR_GRAD4, "[1]Level[2]SpawnHealth[3]UpgradePoints[4]Model[5]BankAccount");
			SendClientMessage(playerid, COLOR_GRAD3, "[6]PhoneNumber[7]ExpPoints[8]HouseKey[9]BizKey[10]CashBox");
			SendClientMessage(playerid, COLOR_GRAD2, "[11]HW[12]SR[13]SP[14]BD[15]DB[16]FUG[17]Duty[18]AccountEdit");
			SendClientMessage(playerid, COLOR_GRAD2, "[19]Jail[20]Disez[21]Jbpnts[22]suspend[23]Ban[24]Deb");
			SendClientMessage(playerid, COLOR_GRAD4, "[25]Misc[26]Aju[27]Ticket[28]Probation[29]Warnings");
			SendClientMessage(playerid, COLOR_BLUE, "--------------------------------------------------------");
			return 1;
		}
		new stat;
		stat = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_BLUE, "--------------< Player Stats Settings >----------------");
			SendClientMessage(playerid, COLOR_WHITE, "*** /astat[playerid][statcode][amount] ***");
			SendClientMessage(playerid, COLOR_GRAD4, "[1]Level[2]SpawnHealth[3]UpgradePoints[4]Model[5]BankAccount");
			SendClientMessage(playerid, COLOR_GRAD3, "[6]PhoneNumber[7]ExpPoints[8]HouseKey[9]BizKey[10]CashBox");
			SendClientMessage(playerid, COLOR_GRAD2, "[11]HW[12]SR[13]SP[14]BD[15]DB[16]FUG[17]Duty[18]AccountEdit");
			SendClientMessage(playerid, COLOR_GRAD2, "[19]Jail[20]Disez[21]Jbpnts[22]suspend[23]Ban[24]Deb");
			SendClientMessage(playerid, COLOR_GRAD4, "[25]Misc[26]Aju[27]Ticket[28]Probation[29]Warnings");
			SendClientMessage(playerid, COLOR_BLUE, "--------------------------------------------------------");
			return 1;
		}
		new amount;
		amount = strval(tmp);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			switch (stat)
			{
				case 1:
				{
					PlayerInfo[giveplayerid][pLevel] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Level to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Level to %d.", sendername, giveplayer, amount);
				}
				case 2:
				{
					PlayerInfo[giveplayerid][pSHealth] = amount-50;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Health to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Health to %d.", sendername, giveplayer, amount);
				}
				case 3:
				{
					PlayerInfo[giveplayerid][gPupgrade] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Upgrade Points to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Upgrade Points to %d.", sendername, giveplayer, amount);
				}
				case 4:
				{
					PlayerInfo[giveplayerid][pModel] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Model to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Model to %d.", sendername, giveplayer, amount);
				}
				case 5:
				{
					PlayerInfo[giveplayerid][pAccount] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Bank Account to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Bank Account to %d.", sendername, giveplayer, amount);
				}
				case 6:
				{
					PlayerInfo[giveplayerid][pPnumber] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Phone Number to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Phone Number to %d.", sendername, giveplayer, amount);
				}
				case 7:
				{
					PlayerInfo[giveplayerid][pExp] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Experience Points to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Experience Points to %d.", sendername, giveplayer, amount);
				}
				case 8:
				{
					PlayerInfo[giveplayerid][pPhousekey] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s House Key to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s House Key to %d.", sendername, giveplayer, amount);
				}
				case 9:
				{
					PlayerInfo[giveplayerid][pPbiskey] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Biz Key to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Biz Key to %d.", sendername, giveplayer, amount);
				}
				case 10:
				{
					PlayerInfo[giveplayerid][pCB] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Briefcase to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Briefcase to %d.", sendername, giveplayer, amount);
				}
				case 11:
				{
					PlayerInfo[giveplayerid][pHW] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Hotwire to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Hotwire to %d.", sendername, giveplayer, amount);
				}
				case 12:
				{
					PlayerInfo[giveplayerid][pSR] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Streetrace to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Streetrace to %d.", sendername, giveplayer, amount);
     			}
				case 13:
				{
					PlayerInfo[giveplayerid][pSP] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Service Points to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Service Points to %d.", sendername, giveplayer, amount);
				}
				case 14:
				{
					PlayerInfo[giveplayerid][pBD] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Bomb Diffusal to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Bomb Diffusal to %d.", sendername, giveplayer, amount);
				}
				case 15:
				{
					PlayerInfo[giveplayerid][pDB] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Derby to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Derby to %d.", sendername, giveplayer, amount);
				}
				case 16:
				{
					PlayerInfo[giveplayerid][pFUG] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Fugitive Kills to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Fugitive Kills to %d.", sendername, giveplayer, amount);
				}
    			case 17:
				{
					PlayerInfo[giveplayerid][pDuty] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Duty to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Duty to %d.", sendername, giveplayer, amount);
				}
    			case 18:
				{
					PlayerInfo[giveplayerid][pAEdit] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Account Edit to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Account Edit to %d.", sendername, giveplayer, amount);
    			}
				case 19:
				{
					PlayerInfo[giveplayerid][pJail] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Jail Time to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Jail Time to %d.", sendername, giveplayer, amount);
				}
				case 20:
				{
					PlayerInfo[giveplayerid][pDisez] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Diseasez to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Diseasez to %d.", sendername, giveplayer, amount);
				}
				case 21:
				{
					PlayerInfo[giveplayerid][pJPnts] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Job Points to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Job Points to %d.", sendername, giveplayer, amount);
				}
				case 22:
				{
					PlayerInfo[giveplayerid][pSuspend] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s suspension to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s suspension to %d.", sendername, giveplayer, amount);
				}
				case 23:
				{
					PlayerInfo[giveplayerid][pBanTime] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Ban Time to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Ban Time to %d.", sendername, giveplayer, amount);
				}
				case 24:
				{
					PlayerInfo[giveplayerid][pDebitc] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Debit Card to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Debit Card to %d.", sendername, giveplayer, amount);
				}
				case 25:
				{
					PlayerInfo[giveplayerid][pMisc] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Misc to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Misc to %d.", sendername, giveplayer, amount);
				}
				case 26:
				{
					PlayerInfo[giveplayerid][pAju] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Misc to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Misc to %d.", sendername, giveplayer, amount);
				}
				case 27:
				{
					PlayerInfo[giveplayerid][pTick] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Tickets to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Tickets to %d.", sendername, giveplayer, amount);
				}
				case 28:
				{
					PlayerInfo[giveplayerid][pProb] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Probational to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Probational to %d.", sendername, giveplayer, amount);
				}
				case 29:
				{
					PlayerInfo[giveplayerid][pWarnL] = amount;
					format(string, sizeof(string), "AdmCmd: %s has Set %s Warning Level to %d.", sendername, giveplayer, amount);
					printf("AdmCmd: %s has Set %s Warning Level to %d.", sendername, giveplayer, amount);
				}
				default:
				{
					format(string, sizeof(string), "AdmCmd: Invalid Stat Code", amount);
				}

			}
			SendClientMessage(playerid, COLOR_DGREEN, string);
			AstatLog(string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------<Police Rank>------------------------------------------
	if(strcmp(cmd, "/arank", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "_______________________________________________");
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "____________Law Enforcement Roster_____________");
			SendClientMessage(playerid, COLOR_GRAD5, "[1)Trainee [2)Officer [3)Corporal [4)Detective ");
			SendClientMessage(playerid, COLOR_GRAD4, "[5)Sergeant [6)Leuitenant [7)Captain [8) Cheif");
			SendClientMessage(playerid, COLOR_GRAD3, "[1)Private [2)Corporal [3)Sergeant [4)Major [5)General");
			SendClientMessage(playerid, COLOR_WHITE, "[Dept Digit: (0)ESU (1) LSPD (2) SFPD (3) LVPD  ]");
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "_______________________________________________");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "_______________________________________________");
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "____________Law Enforcement Roster_____________");
			SendClientMessage(playerid, COLOR_GRAD5, "[1)Trainee [2)Officer [3)Corporal [4)Detective ");
			SendClientMessage(playerid, COLOR_GRAD4, "[5)Sergeant [6)Leuitenant [7)Captain [8) Cheif");
			SendClientMessage(playerid, COLOR_GRAD3, "[1)Private [2)Corporal [3)Sergeant [4)Major [5)General");
			SendClientMessage(playerid, COLOR_WHITE, "---[ ()0)ESU ()1) LSPD ()2) SFPD ()3) LVPD ()4 NGSA ]---");
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "_______________________________________________");
			return 1;
		}
		new stat;
		stat = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "_______________________________________________");
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "____________Law Enforcement Roster_____________");
			SendClientMessage(playerid, COLOR_GRAD5, "[1)Trainee [2)Officer [3)Corporal [4)Detective ");
			SendClientMessage(playerid, COLOR_GRAD4, "[5)Sergeant [6)Leuitenant [7)Captain [8) Cheif");
			SendClientMessage(playerid, COLOR_GRAD3, "[1)Private [2)Corporal [3)Sergeant [4)Major [5)General");
			SendClientMessage(playerid, COLOR_WHITE, "---[ ()0)ESU ()1) LSPD ()2) SFPD ()3) LVPD ()4 NGSA ]---");
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "_______________________________________________");
			return 1;
		}
		new amount;
		amount = strval(tmp);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pRank] >= 81 || PlayerInfo[playerid][pRank] >= 71 || PlayerInfo[playerid][pRank] >= 72 || PlayerInfo[playerid][pRank] >= 73 && IsPlayerConnected(playerid))
		{
			switch (stat)
			{
				case 1:
				{
					PlayerInfo[giveplayerid][pRank] = amount;
					format(string, sizeof(string), "AdmCmd: Rank has been set to %d", amount);
					printf("AdmCmd: %s has Set %s Rank to %d.", sendername, giveplayer, amount);
				}
				case 2:
				{
					PlayerInfo[giveplayerid][pModel] = amount;
					format(string, sizeof(string), "AdmCmd: Player Model set to %d", amount);
					printf("AdmCmd: %s has Set %s Model to %d.", sendername, giveplayer, amount);
				}
   				default:
				{
					format(string, sizeof(string), "Invalid Rank Code", amount);
				}

			}
			SendClientMessage(playerid, COLOR_DGREEN, string);

		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------< Copset >-------------------------------------------
	if(strcmp(cmd, "/copset", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD5, "USAGE: /copset[playerid][Set][Amount]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "__________-= SAN FIERRO POLICE MDC =-_____________");
			SendClientMessage(playerid, COLOR_GRAD5, "USAGE: /copset[playerid][Set][Amount]");
			SendClientMessage(playerid, COLOR_GRAD4, "[1)Wanted Level [2)LicenseA [3)LicenseB [4)LicenseJD");
			SendClientMessage(playerid, COLOR_GRAD3, "[5)LicensePL [6)LicenseFE [7)Ticket Dollar Amount ");
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "_______________________________________________");
			return 1;
		}
		new stat;
		stat = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "__________-= SAN FIERRO POLICE MDC =-_____________");
			SendClientMessage(playerid, COLOR_GRAD5, "USAGE: /copset[playerid][Set][Amount]");
			SendClientMessage(playerid, COLOR_GRAD4, "[1)Wanted Level [2)LicenseA [3)LicenseB [4)LicenseJD");
			SendClientMessage(playerid, COLOR_GRAD3, "[5)LicensePL [6) LicenseFE [7)Ticket Dollar Amount ");
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "_______________________________________________");
			return 1;
		}
		new amount;
		amount = strval(tmp);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pRank] >= 2 && IsPlayerConnected(playerid))
		{
			switch (stat)
			{
				case 1:
				{
					PlayerInfo[giveplayerid][pWantL] = amount;
					format(string, sizeof(string), "-=MDC=- Player Wanted Level: %d", amount);
					printf("AdmCmd: %s has Set %s Rank to %d.", sendername, giveplayer, amount);
				}
				case 2:
				{
					PlayerInfo[giveplayerid][pLicA] = amount;
					format(string, sizeof(string), "-=MDC=- Class A License: #%d", amount);
					printf("AdmCmd: %s has Set %s Model to %d.", sendername, giveplayer, amount);
				}
				case 3:
				{
					PlayerInfo[giveplayerid][pLicB] = amount;
					format(string, sizeof(string), "-=MDC=- Class B License: #%d", amount);
					printf("AdmCmd: %s has Set %s Model to %d.", sendername, giveplayer, amount);
				}
				case 4:
				{
					PlayerInfo[giveplayerid][pLicJD] = amount;
					format(string, sizeof(string), "-=MDC=- Class JD License: #%d", amount);
					printf("AdmCmd: %s has Set %s Model to %d.", sendername, giveplayer, amount);
				}
				case 5:
				{
					PlayerInfo[giveplayerid][pLicPL] = amount;
					format(string, sizeof(string), "-=MDC=- Class PL License: #%d", amount);
					printf("AdmCmd: %s has Set %s Model to %d.", sendername, giveplayer, amount);
				}
				case 6:
				{
					PlayerInfo[giveplayerid][pLicFE] = amount;
					format(string, sizeof(string), "-=MDC=- Class FE License: #%d", amount);
					printf("AdmCmd: %s has Set %s Model to %d.", sendername, giveplayer, amount);
				}
				case 7:
				{
					PlayerInfo[giveplayerid][pTick] = amount;
					format(string, sizeof(string), "-=MDC=- Player Ticket Amount: $%d", amount);
					printf("AdmCmd: %s has Set %s Ticket to $%d.", sendername, giveplayer, amount);
				}
   				default:
				{
					format(string, sizeof(string), "Invalid Player File Change", amount);
				}

			}
			SendClientMessage(playerid, TEAM_BLUE_COLOR, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------<Jobs set>------------------------------------------
	if(strcmp(cmd, "/givejob", true) == 0 && IsPlayerConnected(playerid))
	{
  		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_DBLUE, "==========||Employment||===========");
			SendClientMessage(playerid, COLOR_GRAD5, "/givejob[playerid][Job/Rank][Position]");
			SendClientMessage(playerid, COLOR_GRAD4, "[1)Rank[2)Employment");
			SendClientMessage(playerid, COLOR_GRAD3, "/ranks For Police, Fire, and Medical ranks.");
			SendClientMessage(playerid, COLOR_GRAD2, "/jobs For a list of Current Occupations.");
			SendClientMessage(playerid, COLOR_DBLUE, "_______________________________________________");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_DBLUE, "==========||Employment||===========");
			SendClientMessage(playerid, COLOR_GRAD5, "/givejob[playerid][Job/Rank][Position]");
			SendClientMessage(playerid, COLOR_GRAD4, "<[1)Rank[2)Employment");
			SendClientMessage(playerid, COLOR_GRAD3, "/ranks For Police, Fire, and Medical ranks.");
			SendClientMessage(playerid, COLOR_GRAD2, "/jobs For a list of Current Occupations.");
			SendClientMessage(playerid, COLOR_DBLUE, "_______________________________________________");
			return 1;
		}
		new stat;
		stat = strval(tmp);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_DBLUE, "==========||Employment||===========");
			SendClientMessage(playerid, COLOR_GRAD5, "/givejob[playerid][Job/Rank][Position]");
			SendClientMessage(playerid, COLOR_GRAD4, "<[1)Rank[2)Employment");
			SendClientMessage(playerid, COLOR_GRAD3, "/ranks For Police, Fire, and Medical ranks.");
			SendClientMessage(playerid, COLOR_GRAD2, "/jobs For a list of Current Occupations.");
			SendClientMessage(playerid, COLOR_DBLUE, "_______________________________________________");
			return 1;
		}
		new amount;
		amount = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pRank] >= 6 && IsPlayerConnected(playerid))
		{
			switch (stat)
			{
				case 1:
				{
					PlayerInfo[giveplayerid][pRank] = amount;
					format(string, sizeof(string), "Cmd: Rank has been set to %d", amount);
					printf("Cmd: %s has Set %s Rank to %d.", sendername, giveplayer, amount);
				}
				case 2:
				{
					PlayerInfo[giveplayerid][pJob] = amount;
					format(string, sizeof(string), "Cmd: Player Job set to %d", amount);
					printf("Cmd: %s has Set %s Job to %d.", sendername, giveplayer, amount);
				}
   				default:
				{
					format(string, sizeof(string), "Invalid Rank Code", amount);
				}

			}
			SendClientMessage(playerid, COLOR_DGREEN, string);
			
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/setchannel", true) == 0 || strcmp(cmd, "/setchan", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setchannel [Frequency]");
			return 1;
		}
		new channel;
		channel = strval(tmp);
		if(PoliceRadio[playerid] == 1)
		{
			PlayerInfo[playerid][pDuty] = channel;
			gRadio[playerid] = channel;
			format(string, sizeof(string), "* Radio Frequency (Channel: %d)",channel);
			SendClientMessage(playerid, COLOR_GREEN, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You Do Not have a Radio, buy one at WALMART!");
		}
		return 1;
	}
//----------------------------------[SETINT]-----------------------------------------------
	if(strcmp(cmd, "/setint", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setint [interiorid]");
			return 1;
		}
		new intid;
		intid = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 0 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SetPlayerInterior(playerid,intid);
			PlayerInfo[playerid][pInt] = intid;
			format(string, sizeof(string), "   interiorid %d.", intid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER:You are not authorized to use that command!");
		}
		return 1;
	}

	if(strcmp(cmd, "/setintp", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /setintp [playerid]");
			return 1;
		}
		new playa;
		new intid;
		intid = strval(tmp);
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SetPlayerInterior(playa,intid);
			PlayerInfo[playa][pInt] = intid;
			format(string, sizeof(string), "   interiorid %d.", intid);
			SendClientMessage(playa, COLOR_GRAD1, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: you are not authorized to use that command!");
		}
		return 1;
	}

//----------------------------------[SKYDIVE]------------------------------------------------
	if(strcmp(cmd, "/skydive", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerPos(playerid, rx, ry, rz);
			if (IsPlayerConnected(playerid))
			{
				GivePlayerWeapon(playerid, 46, 0);
				SetPlayerPos(playerid,rx, ry, rz+1500);
				SendClientMessage(playerid, COLOR_WHITE, "GO!! GO!! GO!!");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[FOURDIVE]------------------------------------------------
	if(strcmp(cmd, "/tendive", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /tendive [1][2][3][5][6][7][8][9][10]");
			return 1;
		}
		new para1;
		new para2;
		new para3;
		new para4;
		new para5;
		new para6;
		new para7;
		new para8;
		new para9;
		new para10;
		para1 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para2 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para3 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para4 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para5 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para6 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para7 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para8 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para9 = strval(tmp);
		tmp = strtok(cmdtext, idx);
		para10 = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (IsPlayerConnected(para1)){ GivePlayerWeapon(para1, 46, 0); SetPlayerPos(para1,-1753.8,884.6,1350.0);SetPlayerInterior(para1,0);PlayerInfo[para1][pInt] = 0;SendClientMessage(para1, COLOR_WHITE, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para2)) && (para2>0)) { GivePlayerWeapon(para2, 46, 0); SetPlayerPos(para2,-1753.8,884.6,1350.0);SetPlayerInterior(para2,0);PlayerInfo[para2][pInt] = 0;SendClientMessage(para2, COLOR_RED, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para3)) && (para3>0)) { GivePlayerWeapon(para3, 46, 0); SetPlayerPos(para3,-1753.8,884.6,1350.0);SetPlayerInterior(para3,0);PlayerInfo[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para4)) && (para4>0)) { GivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,-1753.8,884.6,1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para5)) && (para4>0)) { GivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,-1753.8,884.6,1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para6)) && (para2>0)) { GivePlayerWeapon(para2, 46, 0); SetPlayerPos(para2,-1753.8,884.6,1350.0);SetPlayerInterior(para2,0);PlayerInfo[para2][pInt] = 0;SendClientMessage(para2, COLOR_RED, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para7)) && (para3>0)) { GivePlayerWeapon(para3, 46, 0); SetPlayerPos(para3,-1753.8,884.6,1350.0);SetPlayerInterior(para3,0);PlayerInfo[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para8)) && (para4>0)) { GivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,-1753.8,884.6,1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para9)) && (para3>0)) { GivePlayerWeapon(para3, 46, 0); SetPlayerPos(para3,-1753.8,884.6,1350.0);SetPlayerInterior(para3,0);PlayerInfo[para3][pInt] = 0;SendClientMessage(para3, COLOR_RED, "GO!! GO!! GO!!");}
			if ((IsPlayerConnected(para10)) && (para4>0)) { GivePlayerWeapon(para4, 46, 0); SetPlayerPos(para4,-1753.8,884.6,1350.0);SetPlayerInterior(para4,0);PlayerInfo[para4][pInt] = 0;SendClientMessage(para4, COLOR_RED, "GO!! GO!! GO!!");}

		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SSERVER: you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------
	/*if(strcmp(cmd, "/makeadmin", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "Supervisor: /makeadmin [playerid/PartOfName] [level(1-5)]");
			return 1;
		}
		new para1;
		new level;
		if(IsStringAName(tmp))
		{
			para1 = GetPlayerID(tmp);
		}
		else
		{
			para1 = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		level = strval(tmp);
		if ((IsPlayerAdmin(playerid)) && PlayerInfo[playerid][pAdmin] == 107 || FugitiveCore[playerid] == 1)
		{
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerInfo[para1][pAdmin] = level;
			printf("=[ AdmCmd: %s has promoted %s to a level %d Admin.", sendername, giveplayer, level);
			format(string, sizeof(string), "You have been made a %d Admin by Supervisor %s", level, sendername);
			SendClientMessage(para1, COLOR_RED, string);
			format(string, sizeof(string), "AdmCmd: You have promoted %s to a level %d Admin.", giveplayer,level);
			SendClientMessage(playerid, COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You are not Authorized, Only Admin Supervisors may use this command!");
		}
		return 1;
	}*/
	if(strcmp(cmd, "/makeadmin", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /makeadmin [playerid] [Level]");
			return 1;
		}
		new para1;
		new level;
		new name[24];
		if(IsStringAName(tmp))
		{
			para1 = GetPlayerID(tmp);
		}
		else
		{
			para1 = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		level = strval(tmp);
		if (IsPlayerAdmin(playerid))
		{
			for(new i=0;i<sizeof(Supervisors);i++){
			    GetPlayerName(i,name,sizeof(name));
				if(strcmp(name,Supervisors[i],true)==0)
				{
					GetPlayerName(para1, giveplayer, sizeof(giveplayer));
					GetPlayerName(playerid, sendername, sizeof(sendername));
					PlayerInfo[para1][pAdmin] = level;
					printf("AdmCmd: %s has promoted %s to a level %d Admin.", sendername, giveplayer, level);
					format(string, sizeof(string), "You have been made a Level %d Admin by Supervisor %s", level, sendername);
					SendClientMessage(para1, COLOR_RED, string);
					format(string, sizeof(string), "AdmCmd: You have promoted %s to a level %d Admin.", giveplayer,level);
					SendClientMessage(playerid, COLOR_RED, string);
				}
				/*else
				{
					SendClientMessage(playerid, COLOR_GRAD1, "You are not Authorized, Only Admin Supervisors may use this command!");
				}*/
			}
		}
		else
		{
		SendClientMessage(playerid, COLOR_GRAD1, "Server: Rcon Access is Required in addition. ");
		}
		return 1;
	}
	if(strcmp(cmd, "/makepadmin", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /makepadmin [playerid/PartOfName] [level(1-5)]");
			return 1;
		}
		new para1;
		new level;
		if(IsStringAName(tmp))
		{
			para1 = GetPlayerID(tmp);
		}
		else
		{
			para1 = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		level = strval(tmp);
		if ((IsPlayerAdmin(playerid)))
		{
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerInfo[para1][pAdmin] = level;
			printf("=[ AdmCmd: %s has promoted %s to a level %d Admin.", sendername, giveplayer, level);
			format(string, sizeof(string), "AdmCmd: You have been promoted to a level %d Admin by %s", level, sendername);
			SendClientMessage(para1, COLOR_RED, string);
			format(string, sizeof(string), "AdmCmd: You have promoted %s to a level %d Admin.", giveplayer,level);
			SendClientMessage(playerid, COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/accedit", true) == 0 && IsPlayerConnected(playerid))
		{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
            SendClientMessage(playerid, COLOR_YELLOW, "You Account Password/nickname is now editable.");
			PlayerInfo[giveplayerid][pAEdit] = 1;
			printf("AdmCmd: %s has Allowed %s Acceditable.", sendername, giveplayer);
		}
		return 1;
	}
	if(strcmp(cmd, "/acceditoff", true) == 0 && IsPlayerConnected(playerid))
		{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
            SendClientMessage(playerid, COLOR_YELLOW, "You Account Password/nickname is no-longer editable.");
			PlayerInfo[giveplayerid][pAEdit] = 1;
			printf("AdmCmd: %s has Removed %s Acceditable.", sendername, giveplayer);
		}
		return 1;
	}
//----------------------------------[MAKEADMIN]------------------------------------------------
/*	if(strcmp(cmd, "/makeraceman", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /makeraceman [playerid/PartOfName] [on 1 off 0)]");
			return 1;
		}
		new para1;
		new level;
		if(IsStringAName(tmp))
		{
			para1 = GetPlayerID(tmp);
		}
		else
		{
			para1 = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		level = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			gRaceGuy[playerid] = level;
			printf("AdmCmd: %s has promoted %s to Race Creator.", sendername, giveplayer, level);
			format(string, sizeof(string), "   You have been promoted to Race Creator by %s", sendername);
			SendClientMessage(para1, COLOR_GRAD1, string);
			SendClientMessage(para1, COLOR_WHITE, "HINT: You can now type /help to see your race editing commands.");
			format(string, sizeof(string), "AdmCmd:You have promoted %s to Race Creator.", giveplayer);
			SendClientMessage(playerid, COLOR_GRAD1, string);

		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER:You are not authorized to use that command!");
		}
		return 1;
	}*/
	if(strcmp(cmd, "/adminarea", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /adminarea [playerid/PartOfName] [on 1 off 0)]");
			return 1;
		}
		new para1;
		new level;
		if(IsStringAName(tmp))
		{
			para1 = GetPlayerID(tmp);
		}
		else
		{
			para1 = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		level = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			AdminAreaAccess[para1] = level;
			printf("AdmCmd: %s has granted %s access to the admin area.", sendername, giveplayer, level);
			format(string, sizeof(string), "   You been alowed access to the admin area by %s", sendername);
			SendClientMessage(para1, COLOR_GRAD1, string);
			SendClientMessage(para1, COLOR_WHITE, "HINT: You now have access to the auto gate");
			format(string, sizeof(string), "AdmCmd:You been alowed access of the admin area to %s.", giveplayer);
			SendClientMessage(playerid, COLOR_GRAD1, string);

		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER:You are not authorized to use that command!");
		}
		return 1;
	}


//----------------------------------[setteam]------------------------------------------------
	if(strcmp(cmd, "/asetteam", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/setteam", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /asetteam [playerid] [team id]");
			return 1;
		}
		new para1;
		new level;
		if(IsStringAName(tmp))
		{
			para1 = GetPlayerID(tmp);
		}
		else
		{
			para1 = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		level = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerInfo[para1][pTeam] = level;
//			format(string,sizeof(string),"the level entered is : %d",level); // by blaster
//			SendClientMessage(playerid, COLOR_GRAD2, string); // by blaster
			//OnPlayerUpdate(para1);
			gTeam[para1] = level;
			SetPlayerWeapons(para1);
			SetPlayerRandomSpawn(para1);
			//gPlayerSpawned[para1] = 0;
			//OnPlayerSpawn(para1);
			ClearCrime(para1);
			if (gPublicEnemy == para1)
			{
				gPublicEnemy = INVALID_PLAYER_ID;
				KillTimer(offhook);
				KillTimer(fugitimer);
	    	}
			printf("AdmCmd: %s has switched %s to team %d.", sendername, giveplayer, level);
			format(string, sizeof(string), "AdmCmd: You have been switched to team %d by %s", level, sendername);
			SendClientMessage(para1, COLOR_GRAD2, string);
			format(string, sizeof(string), "AdmCmd: You have switched %s to team %d.", giveplayer,level);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/jointeam", true) == 0 && IsPlayerConnected(playerid))
	{
        new sbiz;
		if (PlayerToPoint(3, playerid,SBizzInfo[9][sbEntrancex], SBizzInfo[9][sbEntrancey], SBizzInfo[9][sbEntrancez]))
		{
			sbiz = 11;
		}
		else if (PlayerToPoint(3, playerid,SBizzInfo[10][sbEntrancex], SBizzInfo[10][sbEntrancey], SBizzInfo[10][sbEntrancez]))
		{
			sbiz = 12;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD2, "SERVER: You are not close to a team store");
			return 1;
		}
		if(GetPlayerMoney(playerid) < SBizzInfo[sbiz][sbEntcost] || (SBizzInfo[sbiz][sbEntcost] > 20000 && PlayerInfo[playerid][pLevel] < 3))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "SERVER: You cant afford this");
			return 1;
		}
		if(SBizzInfo[sbiz][sbLock] == 1)
		{
			GameTextForPlayer(playerid, "~r~Closed", 5000, 5);
			return 1;
		}
		if(SBizzInfo[sbiz][sbProd] == 0)
		{
			GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 5);
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /jointeam [team 1(medic) - 2(cop)]");
			return 1;
		}
		new level = strval(tmp);
		if (level > 0 && level < 12)
		{
			if (gPublicEnemy == playerid)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "SERVER: You cant change team now");
				return 1;
	    	}
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerInfo[playerid][pTeam] = level;
			gTeam[playerid] = level;
			ClearCrime(playerid);
  		    SetPlayerToTeamColor(playerid);
			format(string, sizeof(string), "%s, You have been switched to team %d", sendername, level);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			GiveMoney(playerid,-SBizzInfo[sbiz][sbEntcost]);
			SBizzInfo[sbiz][sbProd]--;
			SBizzInfo[sbiz][sbTakings] = SBizzInfo[sbiz][sbTakings]+SBizzInfo[sbiz][sbEntcost];
			new dood[MAX_PLAYER_NAME];
			GetPlayerName(playerid, dood, sizeof(dood));
			format(string, sizeof(string), "%s paid $%d to enter sbiz %d", dood, SBizzInfo[sbiz][sbEntcost], sbiz);
			printf("%s", string);
			PayLog(string);
			OnPropUpdate();
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "GAME: There is no team for that number");
		}
		return 1;
	}
	if(strcmp(cmd, "/sex", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sex [playerid/PartOfName]");
			return 1;
		}
		if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You have to be a passenger of a car");
			return 1;
		}
		new target = strval(tmp);
		if (target == playerid)
		{
			SendClientMessage(target, COLOR_GRAD1, "	You cant have sex with yourself");
			return 1;
		}
		new playa;
		new Float:shealth;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
		{
			GetPlayerHealth(playa, shealth);
			SetPlayerHealth(playa, shealth+5);
			GiveMoney(playa, -500); // take money from
			GiveMoney(playerid, 500); // take money from hooker
			SendClientMessage(playa, COLOR_GRAD1, "	She's giving you much pleasure health +5");
			SendClientMessage(playerid, COLOR_GRAD1, "	His penis feels good...");
	    	format(string, sizeof(string), "%s is having hot sex with %s", giveplayer, sendername);
			ProxDetector(20.0, playerid, string,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE,COLOR_PURPLE);
		}
		return 1;
	}
////########################################################################################
/*	if(strcmp(cmd, "/abuyupgrade", true) == 0 && IsPlayerConnected(playerid))
	{
        new sbiz;
		if (PlayerToPoint(3, playerid,SBizzInfo[13][sbEntrancex], SBizzInfo[13][sbEntrancey], SBizzInfo[13][sbEntrancez]))
		{
			sbiz = 13;
		}
		if(GetPlayerMoney(playerid) < SBizzInfo[sbiz][sbEntcost] || (SBizzInfo[sbiz][sbEntcost] > 20000 && PlayerInfo[playerid][pLevel] < 3))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You cant afford this");
			return 1;
		}
		if(SBizzInfo[sbiz][sbLock] == 1)
		{
			GameTextForPlayer(playerid, "~r~Closed", 5000, 1);
			return 1;
		}
		if(SBizzInfo[sbiz][sbProd] == 0)
		{
			GameTextForPlayer(playerid, "~r~Out Of Stock", 5000, 1);
			return 1;
  		}
		if (gPublicEnemy == playerid)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You cant /buyupgrade now.");
			return 1;
	    }
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s, you now have 1 more upgrade point", sendername);
		SendClientMessage(playerid, COLOR_GRAD1, string);
        PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+1;
		GiveMoney(playerid,-SBizzInfo[sbiz][sbEntcost]);
		SBizzInfo[sbiz][sbProd]--;
		SBizzInfo[sbiz][sbTakings] = SBizzInfo[sbiz][sbTakings]+SBizzInfo[sbiz][sbEntcost];
		new dood[MAX_PLAYER_NAME];
		GetPlayerName(playerid, dood, sizeof(dood));
		format(string, sizeof(string), "%s paid $%d to enter sbiz %d", dood, SBizzInfo[sbiz][sbEntcost], sbiz);
		printf("%s", string);
		PayLog(string);
		OnPropUpdate();
		return 1;
	}*/
//--------------------------------------[/BuyUpgrade]-------------------------------------
	if(strcmp(cmd,"/buyupgrade", true) == 0 && IsPlayerConnected(playerid))
	{
	    tmp=strtok(cmdtext,idx);
	    if(!strlen(tmp)){
	        SendClientMessage(playerid,COLOR_GRAD1,"Usage: /buyupgrade [number]");
		    if(GetPlayerMoney(playerid) < 500000){
		        //format(string,sizeof(string,"",);
		        SendClientMessage(playerid,COLOR_GRAD1,"You need $500,000 to buy an upgrade point.");
				return 1;
			}
			else{
				PlayerInfo[playerid][gPupgrade] = PlayerInfo[playerid][gPupgrade]+1;
				SendClientMessage(playerid,COLOR_GRAD1,"You have purchased one upgrade point.");
				GiveMoney(playerid,-500000);
				return 1;
			}
		}
		if(IsNumeric(tmp)){
			new that=strval(tmp);
			if(GetPlayerMoney(playerid)>=500000*that && 500000*that>0)
			{
				PlayerInfo[playerid][gPupgrade]=PlayerInfo[playerid][gPupgrade]+that;
			    format(string,sizeof(string),"You paid %d for %d upgrade points. You have %d",500000*that,that,PlayerInfo[playerid][gPupgrade]);
			    SendClientMessage(playerid,COLOR_GRAD1,string);
				GiveMoney(playerid,-500000*that);
			}
			else
			{
			    format(string,sizeof(string),"You do not have %d to purchase %d points",500000*that,that);
			    SendClientMessage(playerid,COLOR_GRAD1,string);
			}
		}
		return 1;
	}

//----------------------------------[Is Yes No]------------------------------------------
	/*if(!strcmp(cmdtext,"/is",true,3) && IsPlayerConnected(playerid)){
	  if(!strlen(cmdtext[4])) {
	    SendClientMessage(playerid,COLOR_WHITE,"USAGE: /is [question]");
	  } else {
	    format(string,256,"Is %s - %s",cmdtext[4], (random(2)) ? "Yes" : "No");
	    SendClientMessage(playerid,COLOR_YELLOW,string);
	  }
	  return 1;
	}*/
//----------------------------------[GOTO]-----------------------------------------------
	if(strcmp(cmd, "/flyto-ls", true) == 0)
	{
        if(PlayerToPoint(4, playerid, -1424.5712,-289.0766,14.1484) || PlayerToPoint(4, playerid, 1673.3364,1447.8655,10.7858))
        {
			if(pCTicket[playerid] >= 1)
			{
   				GameTextForPlayer(playerid, "- Welcome to Los Santos International Airport (LSX) -", 10000, 3);
				//SetPlayerCameraPos(playerid,1627.2499,-2286.5439,98.1328);
				//SetPlayerCameraLookAt(playerid,1620.2499,-218.5439,98.1328);
				SendClientMessage(playerid, COLOR_ORANGE, "SanAir: Destination: Los Santos International(LSX)");
				SetPlayerPos(playerid, 1685.4481,-2332.9475,13.5469);
				//SetCamBack(playerid);
				pCTicket[playerid]--;
				SetPlayerInterior(playerid,0);
   			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "SanAir: Sir You require a ticket to board this flight.");
				return 1;
			}
		}
		else
		{
				SendClientMessage(playerid, COLOR_GRAD1, "Server: Must be at a commercial Airport.");
				return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/flyto-sf", true) == 0)
	{
        if(PlayerToPoint(4, playerid, 1685.4481,-2332.9475,13.5469) || PlayerToPoint(4, playerid, 1673.3364,1447.8655,10.7858))
        {
			if(pCTicket[playerid] >= 1)
			{
   				GameTextForPlayer(playerid, "- Welcome to Easter Bay Airport (San Fierro) -", 10000, 3);
				//SetPlayerCameraPos(playerid,1627.2499,-2286.5439,98.1328);
				//SetPlayerCameraLookAt(playerid,1620.2499,-218.5439,98.1328);
				SendClientMessage(playerid, COLOR_ORANGE, "SanAir: Destination: San Fierro, Easter Bay");
				SetPlayerPos(playerid, -1424.5712,-289.0766,14.1484);
				//SetCamBack(playerid);
				pCTicket[playerid]--;
				SetPlayerInterior(playerid,0);
   			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "SanAir: Sir You require a ticket to board this flight.");
				return 1;
			}
		}
		else
		{
				SendClientMessage(playerid, COLOR_GRAD1, "Server: Must be at a commercial Airport.");
				return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/flyto-lv", true) == 0)
	{
        if(PlayerToPoint(4, playerid, 1685.4481,-2332.9475,13.5469) || PlayerToPoint(4, playerid, -1424.5712,-289.0766,14.1484))
        {
			if(pCTicket[playerid] >= 1)
			{
   				GameTextForPlayer(playerid, "- Welcome to Las Venturas International -", 10000, 3);
				//SetPlayerCameraPos(playerid,1627.2499,-2286.5439,98.1328);
				//SetPlayerCameraLookAt(playerid,1620.2499,-218.5439,98.1328);
				SendClientMessage(playerid, COLOR_ORANGE, "SanAir: Destination: Las Veturas");
				SetPlayerPos(playerid, 1673.3364,1447.8655,10.7858);
				//SetCamBack(playerid);
				pCTicket[playerid]--;
				SetPlayerInterior(playerid,0);
   			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "SanAir: Sir You require a ticket to board this flight.");
				return 1;
			}
		}
		else
		{
				SendClientMessage(playerid, COLOR_GRAD1, "Server: Must be at a commercial Airport.");
				return 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/gotols", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1529.6,-1691.2,13.3);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: You have been teleported to Los Santos");
			SetPlayerInterior(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/gotolv", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1699.2, 1435.1, 10.7);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, 1699.2,1435.1, 10.7);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: You have been teleported to Las Venturas");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/gotosf", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1714.1,687.8,24.74);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, -1714.1,687.8,24.74);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: You have been teleported to San Fierro");
			SetPlayerInterior(playerid,0);
			PlayerInfo[playerid][pInt] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/entercar", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /entercar [carid]");
			return 1;
		}
		new testcar = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			PutPlayerInVehicle(playerid, testcar, 0);
			SendClientMessage(playerid, COLOR_GREEN, "AdmCmd:You have been teleported");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/entercarpassenger", true) == 0 || (strcmp(cmd, "/entercarp", true) == 0))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /entercar [carid]");
			return 1;
		}
		new testcar = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 && IsPlayerConnected(playerid))
		{
			PutPlayerInVehicle(playerid, testcar, 1);
			SendClientMessage(playerid, COLOR_GREEN, "AdmCmd:You have been teleported");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}
	if(!strcmp(cmd,"/joincar",true))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /joincar [carid]");
			return 1;
		}
		if(!IsNumeric(tmp))
		{
			giveplayerid=GetPlayerID(tmp);
			return 1;
		}
		else{giveplayerid=strval(tmp);}
		PutPlayerInVehicle(playerid, GetPlayerVehicleID(giveplayerid), 1);
	    return 1;
	}
	if(strcmp(cmd, "/dvec", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xB4B5B7FF, "USAGE: /dvec [carid] 276 and up");
			return 1;
		}
		new testcar = strval(tmp);
		if ((IsPlayerAdmin(playerid)))
		{
			for(new i=0;i<MAX_PLAYERS;i++){
			    if(GetPlayerVehicleID(i)==testcar){RemovePlayerFromVehicle(i);}
			    SetVehicleParamsForPlayer(testcar,i,0,1);
			}
			//RemovePlayerFromVehicle(testcar); LOL that's not how you use remove player from vehicle
			TogglePlayerSpectating(playerid,0);
			SetVehicleHealth(testcar,0.0);
			SetTimer("dVec",10000,0);
			gDelVec[playerid]=testcar;
			gVecSpawn[playerid]=INVALID_VEHICLE_ID;
        	SendClientMessage(playerid, 0x33AA33AA, "AdmCmd: Car will despawn in 10 seconds.");
		}
		else
		{
			SendClientMessage(playerid, 0xB4B5B7FF, "Server:you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/exitplayercar", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			return 1;
		}
		new para1;
		new level;
		if(IsStringAName(tmp))
		{
			para1 = GetPlayerID(tmp);
		}
		else
		{
			para1 = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		level = strval(tmp);
		{
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerInfo[para1][pAdmin] = level;
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
            SendClientMessageToAll(COLOR_GREY," ");
		}
		return 1;
	}

	if(strcmp(cmd, "/gotocar", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /gotocar [carid]");
			return 1;
		}
		new testcar = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			new Float:cwx2,Float:cwy2,Float:cwz2;
			GetVehiclePos(testcar, cwx2, cwy2, cwz2);
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, cwx2, cwy2, cwz2);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, cwx2, cwy2, cwz2);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd:You have been teleported");
			SetPlayerInterior(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/mark", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			SendClientMessage(playerid, COLOR_GRAD1, "   teleporter destination set");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/gotomark", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
			}
			else
			{
				SetPlayerPos(playerid, TeleportDest[playerid][0],TeleportDest[playerid][1],TeleportDest[playerid][2]);
			}
			SendClientMessage(playerid, COLOR_GREEN, "AdmCmd:You have been teleported");
			SetPlayerInterior(playerid,0);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd:you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/gotoin", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1416.107000,0.268620,1000.926000);
			}
			else
			{
				SetPlayerPos(playerid, 1416.107000,0.268620,1000.926000);
			}
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd:You have been teleported");
			SetPlayerInterior(playerid,1);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/gotostad", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, -1435.75, -652.664, 1054.94);
			}
			else
			{
				SetPlayerPos(playerid, -1435.75, -652.664, 1054.94);
			}
			SetPlayerInterior(playerid,4);
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd:You have been teleported");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/gotojet", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (GetPlayerState(playerid) == 2)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar, 1.71875, 30.4062, 1200.34);
			}
			else
			{
				SetPlayerPos(playerid, 1.71875, 30.4062, 1200.34);
			}
			SetPlayerInterior(playerid,1);
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd:You have been teleported");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/goto", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "AdmCmd:: /goto [playerid/PartOfName]");
			return 1;
		}
		new Float:plocx,Float:plocy,Float:plocz;
		new plo;
		if(IsStringAName(tmp))
		{
			plo = GetPlayerID(tmp);
		}
		else
		{
			plo = strval(tmp);
		}
		if (IsPlayerConnected(plo))
		{
			if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
			{
				if(Spectate[playerid] != 255)
				{
					Spectate[playerid] = 256;
				}
				GetPlayerPos(plo, plocx, plocy, plocz);
				new intid = GetPlayerInterior(plo);
   				SetPlayerInterior(playerid,intid);
   				SetPlayerVirtualWorld(playerid,GetPlayerVirtualWorld(plo));
				PlayerInfo[playerid][pInt] = intid;
				PlayerInfo[playerid][pLocal] = PlayerInfo[plo][pLocal];

				/*if(plocz > 530.0 && PlayerInfo[plo][pInt] == 0) //the highest land point in sa = 526.8
				{
					SetPlayerInterior(playerid,1);
					PlayerInfo[playerid][pInt] = 1;
				}*/
				if (GetPlayerState(playerid) == 2)
				{
					new tmpcar = GetPlayerVehicleID(playerid);
					SetVehiclePos(tmpcar, plocx, plocy+4, plocz);
					TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				}
				else
				{
					SetPlayerPos(playerid,plocx,plocy+2, plocz);
				}
				SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd:You have been teleported");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "Server: You are not authorized to use that command!");
			}
		}
		else
		{
			format(string, sizeof(string), "   %d is not an active player.", plo);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/meltdown", true) == 0 && IsPlayerConnected(playerid))
	{
		if(PlayerToPoint(3.0, playerid, 1997.35,-1588.52,13.59))
		{
			FugitiveCore[playerid] = 1;
		}
		return 1;
	}
	if(strcmp(cmd, "/gotop", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gotop [posid]");
			return 1;
		}
		new tmppo;
		tmppo = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new tmpcar = GetPlayerVehicleID(playerid);
				SetVehiclePos(tmpcar,Teletmp[tmppo][pTmpposx], Teletmp[tmppo][pTmpposy], Teletmp[tmppo][pTmpposz]);
				TelePos[playerid][0] = 0.0;TelePos[playerid][1] = 0.0;
				LinkVehicleToInterior(GetPlayerVehicleID(playerid),Teletmp[tmppo][pTmpint]);
			}
			else
			{
				SetPlayerPos(playerid,Teletmp[tmppo][pTmpposx], Teletmp[tmppo][pTmpposy], Teletmp[tmppo][pTmpposz]);
			}
			PlayerInfo[playerid][pInt] = Teletmp[tmppo][pTmpint];
			SetPlayerInterior(playerid,Teletmp[tmppo][pTmpint]);
			format(string, sizeof(string), "AdmCmd: TMP Location %d ",tmppo);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[GETHERE]-----------------------------------------------
	if(strcmp(cmd, "/gethere", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gethere [playerid/PartOfName]");
			return 1;
		}
		new Float:plocx,Float:plocy,Float:plocz;
		new plo;
		if(IsStringAName(tmp))
		{
			plo = GetPlayerID(tmp);
		}
		else
		{
			plo = strval(tmp);
		}
		if (IsPlayerConnected(plo))
		{
			if ((IsPlayerAdmin(plo)))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: Ask the admin to goto you.");
				return 1;
			}
			if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
			{
				GetPlayerPos(playerid, plocx, plocy, plocz);
				new intid = GetPlayerInterior(playerid);
   				SetPlayerInterior(plo,intid);
   				SetPlayerVirtualWorld(plo,GetPlayerVirtualWorld(playerid));
				PlayerInfo[playerid][pInt] = intid;
				PlayerInfo[plo][pLocal] = PlayerInfo[playerid][pLocal];
				if(GetPlayerState(plo)==PLAYER_STATE_DRIVER)
				{
				    SetVehiclePos(GetPlayerVehicleID(plo),plocx,plocy+3,plocz);
				}
				else{
					SetPlayerPos(plo,plocx,plocy+2, plocz);
				}
				SendClientMessage(plo, COLOR_GRAD1, "AdmCmd: You have been teleported");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "SERVER: you are not authorized to use that command!");
			}
		}
		else
		{
			format(string, sizeof(string), "   %d is not an active player.", plo);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/getcar", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /gethere [carid]");
			return 1;
		}
		new Float:plocx,Float:plocy,Float:plocz;
		new plo;
		plo = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerPos(playerid, plocx, plocy, plocz);
			SetVehiclePos(plo,plocx,plocy+4, plocz);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[GiveGun]------------------------------------------------
	if(strcmp(cmd, "/givegun", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givegun [playerid/PartOfName] [weaponid(eg. 46 = Parachute)] [ammo]");
			//SendClientMessage(playerid, COLOR_RED, "AdmCmd:DO NOT USE THIS COMMAND, MAY CRASH THE SERVER");
			SendClientMessage(playerid, 0xB4B5B7FF, "USAGE: /givegun [playerid/PartOfName] [weaponid(eg. 46 = Parachute)] [ammo]");
 			SendClientMessage(playerid, 0xB4B5B7FF,"[1 Brass Knuckles][2 Golf Club][3 Night Stick][4 Knife][5 Baseball Bat][6 Shovel][7 Pool cue][8 Katana][9 Chainsaw]");
			SendClientMessage(playerid, 0xB4B5B7FF,"[10 Purple Dildo][11 White Dildo][12 Long White Dildo][13 White Dildo 2][14 Flowers][15 Cane][16 Grenades][17 Tear Gas]");
			SendClientMessage(playerid, 0xB4B5B7FF,"[18 Molotovs][22 Pistol][23 Silenced Pistol][24 Desert Eagle][25 Shotgun][26 Sawn Off Shotgun][27 Combat Shotgun]");
			SendClientMessage(playerid, 0xB4B5B7FF,"[28 Micro Uzi (Mac 10)][29 MP5][30 AK47][31 M4][32 Tec9][33 Rifle[34 Sniper Rifle][35 RPG][36 Missile Launcher]");
			SendClientMessage(playerid, 0xB4B5B7FF,"[37 Flame Thrower][38 Minigun][39 Sachel Charges][40 Detonator][41 Spray Paint][42 Fire Extinguisher][43 Camera]");
			SendClientMessage(playerid, 0xB4B5B7FF,"[44 Nightvision Goggles][45 Thermal Goggles][46 Parachute]");
			return 1;
		}
		new playa;
		new gun;
		new ammo;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		gun = strval(tmp);
		tmp = strtok(cmdtext, idx);
		ammo = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GivePlayerWeapon(playa, gun, ammo);
			printf("AdmCmd: %s gave %s Weapon %d",sendername,  giveplayer, gun);

		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[GiveHealth]------------------------------------------------
	if(strcmp(cmd, "/givehealth", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givehealth [playerid/PartOfName] [health]");
			return 1;
		}
		new playa;
		new health;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		health = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SetPlayerHealth(playa, health);
			printf("AdmCmd: %s gave %s %d Health",sendername,  giveplayer, health);
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if((strcmp(cmd, "/givearmour", true) == 0 && IsPlayerConnected(playerid))||(strcmp(cmd, "/givearmor", true) == 0 && IsPlayerConnected(playerid)))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givearmour [playerid/PartOfName] [health]");
			return 1;
		}
		new playa;
		new armour;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		armour = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SetPlayerArmour(playa, armour);
			printf("AdmCmd: %s gave %s %d Armour",sendername,  giveplayer, armour);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[GiveHealth]------------------------------------------------
	if(strcmp(cmd, "/checkup", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givehealth [playerid/PartOfName] [health]");
			return 1;
		}
		new playa;
		new Float:oldhealth;
		new Float:newhealth;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerHealth(playerid, oldhealth);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			SetPlayerHealth(playa, 10.0);
			GetPlayerHealth(playa, newhealth);
			if(newhealth != 10.0)
			{
				printf("AdmCmd: cheatfound");
			}
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//native GetPlayerHealth(playerid, &Float:health);
//native SetPlayerHealth(playerid, Float:health);
//----------------------------------[GiveMoney]------------------------------------------------
	if(strcmp(cmd, "/givemoney", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /givemoney [playerid/PartOfName] [money]");
			return 1;
		}
		new playa;
		new money;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		money = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			ResetPlayerMoney(playa);
			GiveMoney(playa, money);
			printf("AdmCmd: %s set %s to $%d",sendername,  giveplayer, money);
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	
//-----------------[FAKE KICK AND BAN BY TOSTED inspired by fox]-----------------------------------

	if(strcmp(cmd, "/fkick", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fkick [playerid]");
			return 1;
		}
		new playa;
		if(IsNumeric(tmp)){
		    playa = strval(tmp);
		}
		else if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
		    //finish later
			return 1;
		}
		if(!cmdtext[7])
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fkick [playerid]");
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			format(string, sizeof(string), "AdmCmd: %s Kicked %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Kicked by %s (Reason: %s)",giveplayer ,sendername, cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			format(string, sizeof(string), "*** %s has left the Server. (Kicked)",giveplayer);
			SendClientMessageToAll(COLOR_GRAD1, string);
			SendClientMessage(playa,COLOR_GRAD1,"Lost connection to the server.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}

	if(strcmp(cmd, "/fban", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fban [playerid]");
			return 1;
		}
/*		if(IsNumeric(tmp){
		    playa = strval(tmp);
		}*/
		if(!cmdtext[7])
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fban [playerid]");
		}
		new playa = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
  		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			format(string, sizeof(string), "*** %s has left the Server. (Kicked)",giveplayer);
			SendClientMessageToAll(COLOR_GRAD1, string);
			SendClientMessage(playa,COLOR_GRAD1,"Lost connection to the server.");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 && IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			format(string, sizeof(string), "*** %s has left the Server. (Kicked)",giveplayer);
			SendClientMessageToAll(COLOR_GRAD1, string);
			SendClientMessageToAll(COLOR_GRAD1,"Lost connection to the server.");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 && IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin Level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			format(string, sizeof(string), "*** %s has left the Server. (Kicked)",giveplayer);
			SendClientMessageToAll(COLOR_GRAD1, string);
			SendClientMessageToAll(COLOR_GRAD1,"Lost connection to the server.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: you are not authorized to use that command!");
		}
		return 1;
	}

//----------------------------------[tSlap]-----------------------------------------------

	if(strcmp(cmd, "/tslap", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /tslap [playerid/PartOfName]");
			return 1;
		}
  		new playa;
		new Float:shealth;
		new Float:slx, Float:sly, Float:slz;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerHealth(playa, shealth);
			SetPlayerHealth(playa, shealth-15);
			GetPlayerPos(playa, slx, sly, slz);
			SetPlayerPos(playa, slx, sly, slz+15);
			PlaySoundAll(playa, 1130, slx, sly, slz+5);
			printf("AdmCmd: %s triple slapped %s",sendername,  giveplayer);
			format(string, sizeof(string), "AdmCmd: %s was triple slapped by %s",giveplayer ,sendername);
			SendClientMessageToAll(COLOR_RED, string);
  		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[Slap]------------------------------------------------
	if(strcmp(cmd, "/slap", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /slap [playerid/PartOfName]");
			return 1;
		}
  		new playa;
		new Float:shealth;
		new Float:slx, Float:sly, Float:slz;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerHealth(playa, shealth);
			SetPlayerHealth(playa, shealth-5);
			GetPlayerPos(playa, slx, sly, slz);
			SetPlayerPos(playa, slx, sly, slz+5);
			PlaySoundAll(playa, 1130, slx, sly, slz+5);
			printf("AdmCmd: %s slapped %s",sendername,  giveplayer);
			format(string, sizeof(string), "AdmCmd: %s was slapped by %s",giveplayer ,sendername);
			SendClientMessageToAll(COLOR_RED, string);
  		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server: you are not authorized to use that command!");
		}
		return 1;
	}
	if(!strcmp(cmd,"/slapcar",true) && (IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin]>=103 || FugitiveCore[playerid] == 1)){
		tmp=strtok(cmdtext,idx);
		new playa;
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /slapcar [playerid/PartOfName]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		if(IsPlayerInAnyVehicle(playa)){new vec=GetPlayerVehicleID(playa);new Float:x,Float:y,Float:z;GetPlayerPos(playa,x,y,z);SetVehiclePos(vec,x,y,z+10);}
	    return 1;
	}
	if(strcmp(cmd, "/orbit", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /orbit [playerid/PartOfName]");
			return 1;
		}
		new playa;
		new Float:shealth;
		new Float:slx, Float:sly, Float:slz;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerHealth(playa, shealth);
			SetPlayerHealth(playa, shealth-5);
			GetPlayerPos(playa, slx, sly, slz);
			SetPlayerPos(playa, slx, sly, slz+500000);
			PlaySoundAll(playa, 1130, slx, sly, slz+5);
			printf("AdmCmd: %s orbited %s",sendername,  giveplayer);
			format(string, sizeof(string), "AdmCmd: %s was sent into orbit by %s",giveplayer ,sendername);
			SendClientMessageToAll(COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd,"/unorbit",true)==0&&IsPlayerConnected(playerid)){
		new playa;
	    tmp=strtok(cmdtext,idx);
	    if(!strlen(tmp))
	    {
	        SendClientMessage(playerid,COLOR_GRAD2,"USAGE: /unorbit [plyerid/part of name]");
	        return 1;
	    }
		if(IsNumeric(tmp)){
		    playa=strval(tmp);
		}
		else if(IsStringAName(tmp)){
		    playa=GetPlayerID(tmp);
		}
		else{SendClientMessage(playerid,COLOR_GRAD2,"USAGE: /unorbit [plyerid/part of name]"); return 1;}
	    if(IsPlayerConnected(playa)){
			new Float:slx, Float:sly, Float:slz;
			GetPlayerPos(playa,slx,sly,slz);
			SetPlayerPos(playa,slx,sly,1350);
			GivePlayerWeapon(playerid,46,1);
			//format(string,sizeof(string),);
	    }
	    else{SendClientMessage(playerid,COLOR_GRAD2,"Player does not exist");}

		return 1;
	}
	if(strcmp(cmd, "/mute", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /mute [playerid/PartOfName]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if(Mute[playa] == 0)
			{
				Mute[playa] = 1;
				printf("AdmCmd: %s silenced %s",sendername,  giveplayer);
				format(string, sizeof(string), "AdmCmd: %s was silenced by %s",giveplayer ,sendername);
				SendClientMessageToAll(COLOR_RED, string);
			}
			else
			{
				Mute[playa] = 0;
				printf("AdmCmd: %s unsilenced %s",sendername,  giveplayer);
				format(string, sizeof(string), "AdmCmd: %s was unsilenced by %s",giveplayer ,sendername);
				SendClientMessageToAll(COLOR_RED, string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}

//----------------------------------[Slap]------------------------------------------------
	if(strcmp(cmd, "/ss", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ss [playerid/PartOfName]");
			return 1;
		}
		new playa;
		new Float:shealth;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerHealth(playa, shealth);
			format(string, sizeof(string), "AdmCmd: %s has %.2f health",giveplayer ,shealth);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			printf(string);
			SetPlayerHealth(playa, shealth-40);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	
//----------------------------------[Slap]------------------------------------------------
	if(strcmp(cmd, "/sc", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sc [playerid/PartOfName]");
			return 1;
		}
		new playa;
		new Float:shealth;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			GetPlayerHealth(playa, shealth);
			format(string, sizeof(string), "AdmCmd: %s has %f health",giveplayer ,shealth);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			printf(string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[Kick]------------------------------------------------
/*	if(strcmp(cmd, "/kick", true) == 0 && IsPlayerConnected(playerid))
	{
		new playa;
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /kick [playerid]");
			return 1;
		}
		if(IsNumeric(tmp)){
		    playa = strval(tmp);
		}
		else if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			SendClientMessage(playerid,COLOR_GRAD2,"ERROR, That player does not exist.");
			return 1;
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if (((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1) && IsPlayerConnected(playerid))
		{
		    new reason;
		    reason=idx;
		    tmp=strtok(cmdtext,idx);
		    if(!strlen(tmp)){
		        SendClientMessage(playerid,COLOR_GRAD2,"You must have a reason to kick someone");
		    }
		    else{
				format(string, sizeof(string), "AdmCmd: %s Kicked %s",sendername,  giveplayer);
				printf("%s",string);
				format(string, sizeof(string), "AdmCmd: %s has been Kicked by %s (Reason: %s)",giveplayer ,sendername, cmdtext[reason]);
				SendClientMessageToAll(COLOR_RED, string);
				Kick(playa);
				BanLog(string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Server:you are not authorized to use that command!");
		}
		return 1;
	}*/
	if(strcmp(cmd, "/kick", true) == 0)
	{
 		new Hours;
		new Minutes;
		new Seconds;
		new Days;
		new Months;
		new Years;
		gettime(Hours, Minutes, Seconds);
    	getdate(Years, Months, Days);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /kick [playerid] [reason]");
			return 1;
		}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new reason[64];
		while ((idx < length) && ((idx - offset) < (sizeof(reason) - 1)))
		{
			reason[idx - offset] = cmdtext[idx];
			idx++;
		}
		reason[idx - offset] = EOS;
		new playa = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 105 || FugitiveCore[playerid] == 1)
		{
			format(string, sizeof(string), "AdmCmd: %s kicked %s. Reason: %s",sendername,  giveplayer, reason);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was kicked by %s. Reason: %s",giveplayer ,sendername, reason);
			SendClientMessageToAll(COLOR_RED, string);
			SendClientMessage(playa,COLOR_RED,"--------------------------------------------------------------");
			format(string, sizeof(string), "You got kicked from Fugitive. Admin that Kicked you: %s", sendername);
			SendClientMessage(playa,COLOR_GREEN, string);
			format(string, sizeof(string),"Given Reason: %s ", reason);
			SendClientMessage(playa,COLOR_GRAD1, string);
			format(string, sizeof(string), "Date: %d/%d/%d, Time %d:%d:%d", Days,Months,Years,Hours,Minutes,Seconds);
    		SendClientMessage(playa,COLOR_GRAD1,string);
    		SendClientMessage(playa,COLOR_RED,"--------------------------------------------------------------");
			Kick(playa);
			BanLog(string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1)
		{
			format(string, sizeof(string), "AdmCmd: %s kicked %s. Reason: %s",sendername,  giveplayer, reason);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was kicked by %s. Reason: %s",giveplayer ,sendername, reason);
			SendClientMessageToAll(COLOR_RED, string);
			SendClientMessage(playa,COLOR_RED,"--------------------------------------------------------------");
			format(string, sizeof(string), "You got kicked from Fugitive. Admin that Kicked you: %s", sendername);
			SendClientMessage(playa,COLOR_GREEN, string);
			format(string, sizeof(string),"Given Reason: %s ", reason);
			SendClientMessage(playa,COLOR_GRAD1, string);
			format(string, sizeof(string), "Date: %d/%d/%d, Time %d:%d:%d", Days,Months,Years,Hours,Minutes,Seconds);
    		SendClientMessage(playa,COLOR_GRAD1,string);
    		SendClientMessage(playa,COLOR_RED,"--------------------------------------------------------------");
			Kick(playa);
			BanLog(string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
		{
			if(PlayerInfo[playa][pLevel] > 102)
			{
				format(string, sizeof(string), "AdmNote: %s is level %d",playa,  PlayerInfo[playa][pLevel]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s kicked %s. Reason: %s",sendername,  giveplayer, reason);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was kicked by %s. Reason: %s",giveplayer ,sendername, reason);
			SendClientMessageToAll(COLOR_RED, string);
			SendClientMessage(playa,COLOR_RED,"--------------------------------------------------------------");
			format(string, sizeof(string), "You got kicked from Fugitive. Admin that Kicked you: %s", sendername);
			SendClientMessage(playa,COLOR_GREEN, string);
			format(string, sizeof(string),"Given Reason: %s ", reason);
			SendClientMessage(playa,COLOR_GRAD1, string);
			format(string, sizeof(string), "Date: %d/%d/%d, Time %d:%d:%d", Days,Months,Years,Hours,Minutes,Seconds);
    		SendClientMessage(playa,COLOR_GRAD1,string);
    		SendClientMessage(playa,COLOR_RED,"--------------------------------------------------------------");
			Kick(playa);
			BanLog(string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	
	
	
	
	
	
	
	
	
	
//----------------------------------[Freeze]------------------------------------------------
	if(strcmp(cmd, "/freeze", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /freeze [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		if(PlayerInfo[playa][pAdmin] > 104 || FugitiveCore[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "AdmCmd: Admins can not be frozen");
			return 1;
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 && IsPlayerConnected(playerid))
		{
			TogglePlayerControllable(playa, 0);
			gFrozen[playa]=1;
			format(string, sizeof(string), "AdmCmd: %s Freezes %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was Frozen by %s",giveplayer ,sendername);
			SendClientMessageToAll(COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[Freeze]------------------------------------------------
	if(strcmp(cmd, "/sf", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sf [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			TogglePlayerControllable(playa, 0);
			format(string, sizeof(string), "AdmCmd: %s SFreezes %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was SFrozen",giveplayer);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[Thaw]------------------------------------------------
	if(strcmp(cmd, "/thaw", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
			{
				TogglePlayerControllable(playerid,1);
				SendClientMessage(playerid,COLOR_GRAD2, "You are successfully thawed.");
				return 1;
			}
			else{SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /thaw [playerid]");}
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
  }
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			TogglePlayerControllable(playa, 1);
			gFrozen[playa]=0;
			format(string, sizeof(string), "AdmCmd: %s Thaw %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was Thawed by %s",giveplayer ,sendername);
			SendClientMessageToAll(COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[Ban]------------------------------------------------

	if(strcmp(cmd, "/ban", true) == 0)
	{
 		new Hours;
		new Minutes;
		new Seconds;
		new Days;
		new Months;
		new Years;
		gettime(Hours, Minutes, Seconds);
    	getdate(Years, Months, Days);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ban [playerid] [reason]");
			return 1;
		}
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new reason[64];
		while ((idx < length) && ((idx - offset) < (sizeof(reason) - 1)))
		{
			reason[idx - offset] = cmdtext[idx];
			idx++;
		}
		reason[idx - offset] = EOS;
		new playa = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 105 || FugitiveCore[playerid] == 1)
		{
			format(string, sizeof(string), "AdmCmd: %s Banned %s. Reason: %s",sendername,  giveplayer, reason);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was Banned by %s. Reason: %s",giveplayer ,sendername, reason);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -999;
			SendClientMessageToAll(COLOR_RED, string);
			SendClientMessage(playa,COLOR_GREEN,"____________________________________________________");
			format(string, sizeof(string), "You have been Banned from Fugitive. Admin that Banned You: %s", sendername);
			SendClientMessage(playa,COLOR_GREEN, string);
			format(string, sizeof(string),"Reason: %s ", reason);
			SendClientMessage(playa,COLOR_GRAD1, string);
			format(string, sizeof(string), "Date: %d/%d/%d, Time %d:%d:%d", Days,Months,Years,Hours,Minutes,Seconds);
    		SendClientMessage(playa,COLOR_GRAD1,string);
    		SendClientMessage(playa,COLOR_GRAD1,"To Make an Appeal Visit, www.pen1sf.com | Ban Section");
    		SendClientMessage(playa,COLOR_GREEN,"____________________________________________________");
			Ban(playa);
			BanLog(string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1)
		{
			format(string, sizeof(string), "AdmCmd: %s Banned %s. Reason: %s",sendername,  giveplayer, reason);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was banned by %s. Reason: %s",giveplayer ,sendername, reason);
			SendClientMessageToAll(COLOR_RED, string);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -999;
			SendClientMessageToAll(COLOR_RED, string);
			SendClientMessage(playa,COLOR_GREEN,"____________________________________________________");
			format(string, sizeof(string), "You got banned from fugitive. Admin that banned you: %s", sendername);
			SendClientMessage(playa,COLOR_GREEN, string);
			format(string, sizeof(string),"Reason: %s ", reason);
			SendClientMessage(playa,COLOR_GRAD1, string);
			format(string, sizeof(string), "Date: %d/%d/%d, Time %d:%d:%d", Days,Months,Years,Hours,Minutes,Seconds);
    		SendClientMessage(playa,COLOR_GRAD1,string);
    		SendClientMessage(playa,COLOR_GRAD1,"The line just went dead...");
    		SendClientMessage(playa,COLOR_GREEN,"____________________________________________________");
			Ban(playa);
			BanLog(string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101)
		{
			if(PlayerInfo[playa][pLevel] > 102)
			{
				format(string, sizeof(string), "AdmNote: %s is level %d",playa,  PlayerInfo[playa][pLevel]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 1;
			}
			format(string, sizeof(string), "AdmCmd: %s Banned %s. Reason: %s",sendername,  giveplayer, reason);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s was banned by %s. Reason: %s",giveplayer ,sendername, reason);
			SendClientMessageToAll(COLOR_RED, string);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -999;
			SendClientMessageToAll(COLOR_RED, string);
			SendClientMessage(playa,COLOR_GREEN,"____________________________________________________");
			format(string, sizeof(string), "You got banned from fugitive. Admin that banned you: %s", sendername);
			SendClientMessage(playa,COLOR_GREEN, string);
			format(string, sizeof(string),"Reason: %s ", reason);
			SendClientMessage(playa,COLOR_GRAD1, string);
			format(string, sizeof(string), "Date: %d/%d/%d, Time %d:%d:%d", Days,Months,Years,Hours,Minutes,Seconds);
    		SendClientMessage(playa,COLOR_GRAD1,string);
    		SendClientMessage(playa,COLOR_GRAD1,"The line just went dead...");
    		SendClientMessage(playa,COLOR_GREEN,"____________________________________________________");
			Ban(playa);
			BanLog(string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}

 /*	if(strcmp(cmd, "/ban", true) == 0 && IsPlayerConnected(playerid))
	{
	    new targetid;
	    //if (PlayerToPoint(20.0, playerid, 515.91,-11.75,1001.57))
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ban [playerid] [reason]");
			return 1;
		}
		if(IsNumeric(tmp)){
		    targetid=strval(tmp);
		}
		else if(IsStringAName(tmp)){
		    targetid=GetPlayerID(tmp);
		}
		else{SendClientMessage(playerid,COLOR_GRAD2,"USAGE: /ban [playerid] [reason]");}
		new reason;
		reason=idx;
		if(IsPlayerConnected(targetid)){
		    new fuckedperson[256];
		    reason=idx;
			GetPlayerName(targetid,fuckedperson,sizeof(fuckedperson));
		    if(IsPlayerAdmin(playerid)){
		        format(string,sizeof(string),"AdmCmd: %s Banned %s (Reason: %s )",pname,fuckedperson,cmdtext[reason]);
		        SendClientMessage(playerid,COLOR_GRAD2,string);
		        Ban(targetid);
		        BanLog(string);
		        return 1;
		    }
			else if (PlayerInfo[playerid][pAdmin]>=102){
			    if(PlayerInfo[targetid][pAdmin]<PlayerInfo[playerid][pAdmin]){
   					format(string,sizeof(string),"AdmCmd: %s Banned %s (Reason: %s )",pname,fuckedperson,cmdtext[reason]);
		       		SendClientMessage(playerid,COLOR_GRAD2,string);
		      		Ban(targetid);
	      	  		BanLog(string);
		        }
		        else{SendClientMessage(playerid,COLOR_GRAD2,"You cannot ban this person, bitch.");return 1;}
			}
			else{SendClientMessage(playerid,COLOR_GRAD2,"You are not authorized to use this command.");return 1;}
		}
		else{SendClientMessage(playerid,COLOR_GRAD2,"Player does not exist.");return 1;}
		if(!cmdtext[7])
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ban [playerid]");
		}
		new playa = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104)
  		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -1000;
			SendClientMessageToAll(COLOR_RED, string);
			Ban(playa);
			BanLog(string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 && IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -1000;
			Ban(playa);
			BanLog(string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 && IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin Level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -1000;
			BanLog(string);
			Ban(playa);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: you are not authorized to use that command!");
		}
		return 1;
	}*/
	
	if(strcmp(cmd, "/fuckban", true) == 0 && IsPlayerConnected(playerid))
		{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fuckban [playerid]");
			return 1;
		}
		if(!cmdtext[7])
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /fuckban [playerid]");
		}
		new playa = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
  		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Fuck-Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Fuck-Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -1000;
			SendClientMessageToAll(COLOR_RED, string);
			Fuck(playa);
			Ban(playa);
			BanLog(string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Fuck-Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Fuck-Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -1000;
			Fuck(playa);
			Ban(playa);
			BanLog(string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 && IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playa][pAdmin] > 2)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin Level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 0;
			}
			format(string, sizeof(string), "AdmCmd: %s Banned %s",sendername,  giveplayer);
			printf("%s",string);
			format(string, sizeof(string), "AdmCmd: %s has been Banned by %s. (Reason: %s)",giveplayer ,sendername,cmdtext[7]);
			SendClientMessageToAll(COLOR_RED, string);
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -1000;
			Fuck(playa);
			BanLog(string);
			Ban(playa);
			
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: you are not authorized to use that command!");
		}
		return 1;
	}
//-----------------------------------[acheck]------------------------------------------by fox
	if(strcmp(cmd, "/acheck", true) == 0 && IsPlayerConnected(playerid)){
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /acheck [playerid]");
			return 0;
		}
		new playa = strval(tmp);
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playa][pAdmin] > 101 || FugitiveCore[playerid] == 1)
			{
				format(string, sizeof(string), "AdmNote: %s is Admin Level %d",playa,  PlayerInfo[playa][pAdmin]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: You are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[wcheck]---------------------------------------------
	if(strcmp(cmd, "/wlevel", true) == 0 && IsPlayerConnected(playerid)){
	    tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /wlevel [playerid]");
			return 1;
		}
		new playa = strval(tmp);
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			if(PlayerInfo[playa][pWarnL] >= 1)
			{
				format(string, sizeof(string), "AdmCmd: %s 's Warning Level is at %d", giveplayerid, PlayerInfo[playa][pWarnL]);
				SendClientMessage(playerid,COLOR_RED, string);
				return 1;
			}
			else
			{
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: This Player has no Warning Level.");
			return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: You are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[Ban]------------------------------------------------
	if(strcmp(cmd, "/sban", true) == 0 && IsPlayerConnected(playerid))
 	{
		if(PlayerToPoint(20.0, playerid, 515.91,-11.75,1001.57))
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sban [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			PlayerInfo[playa][pAdmin] = PlayerInfo[playa][pLevel];
			PlayerInfo[playa][pLevel] = -1000;
			Ban(playa);
			format(string, sizeof(string), "AdmCmd: %s Silently Banned %s",sendername,  giveplayer);
			printf("%s",string);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}


//----------------------------------[Mod]------------------------------------------------
	if(strcmp(cmd, "/amod", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /mod [carmodid] 1034~1041");
			return 1;
		}
		new playa;
		playa = strval(tmp);
		new modcar = GetPlayerVehicleID(playerid);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			AddVehicleComponent(modcar, playa);
			if (gdebug){printf("DEBUG modcar = %d mod = %d", modcar, playa);}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}

//----------------------------------[EndRound]-----------------------------------------------

	if (strcmp(cmd, "/endround", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
	Endround();
	return 1;

}
	if (strcmp(cmd, "/eendround", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {

	GameModeInitExitFunc();
	return 1;

}
	if (strcmp(cmd, "/endroundhelp", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid)) {

    format(string, sizeof(string),"[/endround = This will coutdown from 30 seconds]");
    SendClientMessage(playerid,COLOR_GREY,string);
    format(string, sizeof(string),"[/sendround = This will halt endround and countdown. THE SERVER WILL NOT RESET]");
    SendClientMessage(playerid,COLOR_GREY,string);
    format(string, sizeof(string),"[/eendround = This will endround with out countdown.");
    SendClientMessage(playerid,COLOR_GREY,string);
	return 1;

}
//----------------------------------[EndRound]-----------------------------------------------

//----------------------------------[GMX]-----------------------------------------------

	if(strcmp(cmd, "/gmx", true) == 0 && IsPlayerConnected(playerid))
	{
        GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)))
		{
			GameModeExit();
            printf("AdmCmd: %s Executed An Game Mode Exit.", sendername);
		}
		return 1;
	}
//----------------------------------[mission]-----------------------------------------------

	if(strcmp(cmd, "/mission", true) == 0)
	{
        GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			PrePlayerNewMission();
			printf("AdmCmd: %s Executed Mission.", sendername);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//----------------------------------[missionstop]-----------------------------------------------
	if(strcmp(cmd, "/missionstop", true) == 0)
	{
        GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			MissionActive = 0;
			CheckpointReset();
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					SetVehicleParamsForPlayer(stealcar,i,0,0);
				}
			}
			SendClientMessage(playerid, COLOR_RED, "AdmCmd: Missions have been Stopped, /mission to Restart.");
            printf("AdmCmd: %s has Stopped missions.", sendername);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}
		return 1;
	}

///<----------------------------[customrace]-------------------
	if (strcmp(cmd, "/sp", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /sp [1(resets)/2/3/4]");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid] == 1)
		{
			new idx2 = strval(tmp);
			if(idx2 == 1)
			{
				new idx3 = 1;
				while (idx3 < sizeof(gRandomDMSpawns))
				{
					GetPlayerPos(playerid, gRandomDMSpawns[idx3][0], gRandomDMSpawns[idx3][1], gRandomDMSpawns[idx3][2]);
					idx3++;
				}
				gDMWbounds[0] = 50000000.0;gDMWbounds[1] = -50000000.0;gDMWbounds[2] = 50000000.0;gDMWbounds[3] = -50000000.0;
			}
			GetPlayerPos(playerid, gRandomDMSpawns[idx2][0], gRandomDMSpawns[idx2][1], gRandomDMSpawns[idx2][2]);
			format(string, sizeof(string), "DM Spawnpoint %d Set!",idx2);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			SetPlayerCheckpoint(playerid,gRandomDMSpawns[idx2][0], gRandomDMSpawns[idx2][1], gRandomDMSpawns[idx2][2],4);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/cam", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /cam [1/2/3/4]");
			return 1;
		}
		Unspec[playerid][sCam] = strval(tmp);
		format(string, sizeof(string), "Switching to cam %d",Unspec[playerid][sCam]);
		SendClientMessage(playerid, COLOR_GRAD1, string);
		return 1;
	}
	if (strcmp(cmd, "/dmn", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			new Float:tmp1,Float:tmp2;
			GetPlayerPos(playerid, tmp1,gDMWbounds[2], tmp2);
			format(string, sizeof(string), "DM Northpoint Set!");
			SendClientMessage(playerid, COLOR_GRAD1, string);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			SetPlayerCheckpoint(playerid,tmp1,gDMWbounds[2], tmp2,4.0);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/dms", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid] || FugitiveCore[playerid] == 1)
		{
			new Float:tmp1,Float:tmp2;
			GetPlayerPos(playerid, tmp1,gDMWbounds[3], tmp2);
			format(string, sizeof(string), "DM Southpoint Set!");
			SendClientMessage(playerid, COLOR_GRAD1, string);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			SetPlayerCheckpoint(playerid,tmp1,gDMWbounds[3], tmp2,4.0);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/dme", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			new Float:tmp1,Float:tmp2;
			GetPlayerPos(playerid, gDMWbounds[0],tmp1, tmp2);
			format(string, sizeof(string), "DM Eastpoint Set!");
			SendClientMessage(playerid, COLOR_GRAD1, string);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			SetPlayerCheckpoint(playerid,gDMWbounds[0],tmp1, tmp2,4.0);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/dmw", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			new Float:tmp1,Float:tmp2;
			GetPlayerPos(playerid, gDMWbounds[1],tmp1, tmp2);
			format(string, sizeof(string), "DM Westpoint Set!");
			SendClientMessage(playerid, COLOR_GRAD1, string);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			SetPlayerCheckpoint(playerid,gDMWbounds[1],tmp1, tmp2,4.0);
			PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/savedm", true)==0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /savedm [dmname]");
				return 1;
			}
			SaveDM(playerid,tmp);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/loaddm", true)==0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /loaddm [dmname]");
				return 1;
			}
			LoadDM(playerid,tmp);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/stopdm", true)==0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			gFighters=0;
			gFightLeader=0;
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i))
				{
					if(gPlayerFighter[i] == 1)
					{
						gPlayerFighter[i] = 0;
						TogglePlayerControllable(i, 1);
						SetPlayerRandomSpawn(i);
						//SetPlayerWorldBounds(i,500000.0,-500000.0,500000.0,-500000.0);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	
	if (strcmp(cmd, "/dmhelp", true) == 0 && PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
	{
	    format(string, sizeof(string),"[/dmn][/dms][/dme][/dmw][/savedm][/loaddm][/stopdm]");
	    SendClientMessage(playerid,COLOR_GREY,string);
	    format(string, sizeof(string),"[/dmn = DerathMatch North][/dms = DeadthMatch South][/dme = DerathMatch East][/dmw = DeadthMatch West]");
	    SendClientMessage(playerid,COLOR_GREY,string);
	    format(string, sizeof(string),"[/savedm = Saves Your DerathMatch][/loaddm = Loads a DerathMatch][/stopdm = Stops The DerathMatch]");
	    SendClientMessage(playerid,COLOR_GREY,string);
		return 1;
	}
	
/*	if (strcmp(cmd, "/laps", true) == 0&& IsPlayerConnected(playerid))
	{
		if(MissionActive > 5 && MissionActive < 8)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You cannot edit during a race");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /laps <amount>");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			new cpid = strval(tmp);
			RaceInfo[rLaps]	= cpid;
			SendClientMessage(playerid, COLOR_GRAD2, "Laps Set");
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}*/
	if (strcmp(cmd, "/cp", true) == 0 && IsPlayerConnected(playerid))
	{
		new Float:racetmp[3],placement;
	    GetPlayerPos(playerid,racetmp[0],racetmp[1],racetmp[2]);
	    placement = gMakeRacePoints[playerid]*3;
	    gRaceTmp[playerid][placement]=racetmp[0];
	    gRaceTmp[playerid][placement+1]=racetmp[1];
	    gRaceTmp[playerid][placement+2]=racetmp[2];
	    format(string,sizeof(string),"Checkpoint %d at %.1f %.1f %.1f",gMakeRacePoints[playerid],gRaceTmp[playerid][placement],gRaceTmp[playerid][placement+1],gRaceTmp[playerid][placement+2]);
	    SendClientMessage(playerid,COLOR_BLUE,string);
		gMakeRacePoints[playerid]++;
	}
	if(!strcmp(cmd,"/svec",true))
	{
	    new Float:temp[3],Float:angle;
	    GetVehiclePos(GetPlayerVehicleID(playerid),temp[0],temp[1],temp[2]);
	    GetVehicleZAngle(GetPlayerVehicleID(playerid),angle);
	    format(string,sizeof(string),"{522,%.4f,%.4f,%.4f,%.4f,-1,-1,-1}",temp[0],temp[1],temp[2],angle);
	    VecLog(string);
		gSavedpoints[playerid]++;
		format(string,sizeof(string),"Vehicle %d saved",gSavedpoints);
		SendClientMessageToAll(COLOR_BLUE,string);
	    return 1;
	}
	if(strcmp(cmd, "/startrace", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
		    MissionActive = 5;
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1)
				{
					if (gTeam[i] >= 3)
					{
						JobGive(i);
					}
				}
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	/*if(strcmp(cmd, "/randomrace", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			if(randomrace == 1)
			{
				randomrace = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Random races disabled");
				rsx = RaceInfo[rStartx];rsy = RaceInfo[rStarty];rsz =RaceInfo[rStartz];
				rmx = RaceInfo[rMidx];rmy = RaceInfo[rMidy];rmz = RaceInfo[rMidz];
				rm2x = RaceInfo[rMid2x];rm2y = RaceInfo[rMid2y];rm2z = RaceInfo[rMid2z];
				rex = RaceInfo[rEndx];rey = RaceInfo[rEndy];rez = RaceInfo[rEndz];
			}
			else if(randomrace == 0)
			{
				randomrace = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Random races enabled");
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
	}*/
	/*if(strcmp(cmd, "/setrace", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			new racename[64];
			new name[64];
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setrace [racename] [position-1-2-3-4]");
				format(string, sizeof(string), "Race List (1. %s) (2. %s) (3. %s) (4. %s) ",Races[0],Races[1],Races[2],Races[3]);
				SendClientMessage(playerid, COLOR_GREEN,string);
				format(string, sizeof(string), "Race List (5. %s) (6. %s) (7. %s) (8. %s) ",Races[4],Races[5],Races[6],Races[7]);
				SendClientMessage(playerid, COLOR_GREEN,string);
				return 1;
			}
			strmid(name, tmp, 0, strlen(tmp), 255);
			format(racename, sizeof(racename), "%s.race",name);
			new File: file = fopen(racename, io_read);
			if (!file)
			{
				SendClientMessage(playerid, COLOR_GREEN,"File not found");
				return 1;
			}
			fclose(file);
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /setrace [racename] [position-1-2-3-4]");
				return 1;
			}
			new raceid = strval(tmp)-1;
			racelist = strval(tmp);
			strmid(Races[raceid], name, 0, strlen(name), 255);
			format(string, sizeof(string), "New List (1. %s) (2. %s) (3. %s) (4. %s) ",Races[0],Races[1],Races[2],Races[3]);
			SendClientMessage(playerid, COLOR_GREEN,string);
			format(string, sizeof(string), "New List (5. %s) (6. %s) (7. %s) (8. %s) ",Races[4],Races[5],Races[6],Races[7]);
			SendClientMessage(playerid, COLOR_GREEN,string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
	}*/
	if(strcmp(cmd, "/racelist", true) == 0 && IsPlayerConnected(playerid))
	{
	    /*new point; //This part does the points of a race
	    for (new i=0;i<=gRacePoints;i++)
	    {
	        point=i*3;
			format(string,sizeof(string),"Point %d at %.1f %.1f %.1f",i,gRacePoint[point],gRacePoint[point+1],gRacePoint[point+2]);
			SendClientMessageToAll(COLOR_RED,string);
		}*/
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			if(racelist == 0)
			{
				racelist = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Race List Enabled");
			    new truesize;
				for(new i=0;i<sizeof(gRaces);i++){
					if(gRaces[i][0])
					{
						truesize++;
					}
				}
				new lines = truesize/4;
				//new line;
				for(new i=0;i<lines;i++){
				    new num=i*4;
					format(string, sizeof(string), "Race List (%d . %s) (%d . %s) (%d . %s) (%d . %s) ",num+1,gRaces[num],num+2,gRaces[num+1],num+3,gRaces[num+2],num+4,gRaces[num+4]);
					SendClientMessage(playerid,COLOR_GREEN,string);
				}
			}
			else if(racelist != 0)
			{
				racelist = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Race List Disabled");
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
	}
	if(strcmp(cmd, "/footmode", true) == 0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			if(nocarcash == 1)
			{
				nocarcash = 0;
				SendClientMessage(playerid, COLOR_GRAD2, "Briefcase car mode");
			}
			else if(nocarcash == 0)
			{
				nocarcash = 1;
				SendClientMessage(playerid, COLOR_GRAD2, "Briefcase foot mode");
			}
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
	}
	if (strcmp(cmd, "/racedelay", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /racedelay [seconds]");
			format(string, 256, "Race Delay is set to %d seconds", racedelay/1000);
			SendClientMessage(playerid, COLOR_GRAD2, string);
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			new weaponid = strval(tmp);
			if(weaponid > 240 || weaponid < 10)
			{
				SendClientMessage(playerid, COLOR_GRAD2, "Minimum is 10 Maximum is 240");
				return 1;
			}
			racedelay = weaponid*1000;
			format(string, 256, "Race Delay set to %d seconds", weaponid);
			SendClientMessage(playerid, COLOR_GRAD2, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/saverace", true)==0 && IsPlayerConnected(playerid))
	{
		tmp=strtok(cmdtext,idx);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			if(!strlen(tmp)){SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /saverace [racename]");return 1;}
			SaveRace(playerid,tmp);
	    	gMakeRacePoints[playerid]=0;
	    	SendClientMessage(playerid,COLOR_BLUE,"Race saved");
		}
	    return 1;
		/*if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /saverace [racename]");
				return 1;
			}
			SaveRace(playerid,tmp);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;*/
	}
	if (strcmp(cmd, "/loadrace", true)==0 && IsPlayerConnected(playerid))
	{
		if(MissionActive > 5 && MissionActive < 8)
		{
			SendClientMessage(playerid, COLOR_GRAD2, "You cannot edit during a race");
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -11 || gRaceGuy[playerid])
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /loadrace [racename](disables racelist)");
				return 1;
			}
			LoadRace(playerid,tmp);
			//racelist = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd,"/loadraces",true)==0)
	{
	    LoadRaces();
		//format(string,sizeof(string),"size of gRaces is %d",sizeof(gRaces));
		//SendClientMessageToAll(COLOR_RED,string);
	    return 1;
	}
	if (strcmp(cmd, "/unban", true)==0 && IsPlayerConnected(playerid))
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /unbanplayer [playername]");
				return 1;
			}
			if(!LoadPlayer(playerid,tmp))
			{
				return 1;
			}
			if(PLlayerInfo[playerid][plAdmin] == 0)
			{
				SendClientMessage(playerid, COLOR_GRAD1, "AdmCmd: Player is Not Banned");
				return 1;
			}
			else
			{
				PLlayerInfo[playerid][plLevel] = PLlayerInfo[playerid][plAdmin];
				PLlayerInfo[playerid][plAdmin] = 0;
				SavePlayer(playerid,tmp);
				SendClientMessage(playerid, COLOR_RED, "AdmCmd: Unban Successful!");
				printf("AdmCmd: %s has Unbanned Player %s.", sendername, giveplayerid);
				BanLog(string);
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/loadpl", true)==0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /loadplayer [playername]");
				return 1;
			}
			LoadPlayer(playerid,tmp);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if (strcmp(cmd, "/savepl", true)==0 && IsPlayerConnected(playerid))
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /saveplayer [playername]");
				return 1;
			}
			SavePlayer(playerid,tmp);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//<-----------------------------[SpawnWeapon]----------------------------------------------------------------------
	if (strcmp(cmd, "/drop", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xBFC0C2FF, "USAGE: /drop [weaponid]");
			SendClientMessage(playerid, 0xBFC0C2FF, "[331 - Brass Knuckles][333 - Golf Club][334 - Night Stick][335 - Knife][336 - Baseball Bat][337 - Shovel][338 - Pool cue]");
			SendClientMessage(playerid, 0xBFC0C2FF, "[338 - Katana][341 - Chainsaw][321 - Purple Dildo][322 - White Dildo][323 - Long White Dildo][324 - White Dildo 2]");
			SendClientMessage(playerid, 0xBFC0C2FF, "[325 - Flowers][326 - Cane][342 - Grenades][343 - Tear Gas][344 - Molotovs][345 - Missile (crashy?)][346 - Pistol]");
			SendClientMessage(playerid, 0xBFC0C2FF, "[347 - Silenced Pistol][348 - Desert Eagle][349 - Shotgun][350 - Sawn Off Shotgun][351 - Combat Shotgun]");
			SendClientMessage(playerid, 0xBFC0C2FF, "[352 - Micro Uzi (Mac 10)][353 - MP5][354 - AK47 Hydra Flare][355 - M4 AK47][372 - Tec9][357 - Rifle]");
			SendClientMessage(playerid, 0xBFC0C2FF, "[359 - RPG][360 - Missile Launcher][361 - Flame Thrower][362 - Minigun][363 - Sachet Charges]");
			SendClientMessage(playerid, 0xBFC0C2FF, "[358 - Sniper Rifle][364 - Detonator][365 - Spray Paint][366 - Fire Extinguisher][367 - Camera]");
			SendClientMessage(playerid, 0xBFC0C2FF, "[368 - Nightvision Goggles][369 - Thermal Goggles][371 - Parachute]");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			new weaponid = strval(tmp);
			new Float:px, Float:py, Float:pz;
			GetPlayerPos(playerid, px, py, pz);
			new coordsstring[256];
			format(coordsstring, 256, "AddStaticPickup(%d, 2, %.1f,%.1f,%.1f);\n", weaponid, px, py, pz);
			printf("AdmCmd:%d was spawned", weaponid);
			AddStaticPickup(weaponid, 15, px, py, pz);
			pickups++;
			new File:hFile;
			hFile = fopen("coords.txt", io_append);
			fwrite(hFile, coordsstring);
			fclose(hFile);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
	if(strcmp(cmd, "/pos", true) == 0 && IsPlayerConnected(playerid))
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "USAGE: /pos [comment]");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			new Float:px, Float:py, Float:pz;
			GetPlayerPos(playerid, px, py, pz);
			new coordsstring[256];
			format(coordsstring, 256, "%.1f,%.1f,%.1f // %s\n", px, py, pz,result);
			new File:hFile;
			hFile = fopen("pos.txt", io_append);
			fwrite(hFile, coordsstring);
			fclose(hFile);

		}
		return 1;
	}
	if(strcmp(cmd, "/addcop", true) == 0 && IsPlayerConnected(playerid))
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "USAGE: /addcop [copname]");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pRank] >= 7)
		{
			new Float:px, Float:py, Float:pz;
			GetPlayerPos(playerid, px, py, pz);
			new coordsstring[256];
			format(coordsstring, 256, "%s\n",result);
			new File:hFile;
			hFile = fopen("cops.cfg", io_append);
			fwrite(hFile, coordsstring);
			fclose(hFile);
			SendClientMessage(playerid, COLOR_GRAD1, "This Player has been Fired");
		}
		return 1;
	}
	if(strcmp(cmd, "/|", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			return 1;
		}
		new para1;
		new level;
		if(IsStringAName(tmp))
		{
			para1 = GetPlayerID(tmp);
		}
		else
		{
			para1 = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		level = strval(tmp);
		{
			GetPlayerName(para1, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			PlayerInfo[para1][pAdmin] = level;
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
			SendClientMessageToAll(COLOR_GREY," ");
            SendClientMessageToAll(COLOR_GREY," ");
		}
		return 1;
	}
	if(strcmp(cmd, "/addmed", true) == 0 && IsPlayerConnected(playerid))
	{
		new length = strlen(cmdtext);
		while ((idx < length) && (cmdtext[idx] <= ' '))
		{
			idx++;
		}
		new offset = idx;
		new result[64];
		while ((idx < length) && ((idx - offset) < (sizeof(result) - 1)))
		{
			result[idx - offset] = cmdtext[idx];
			idx++;
		}
		result[idx - offset] = EOS;
		if(!strlen(result))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "USAGE: /addmed [copname]");
			return 1;
		}
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1 || PlayerInfo[playerid][pAdmin] == -13)
		{
			new Float:px, Float:py, Float:pz;
			GetPlayerPos(playerid, px, py, pz);
			new coordsstring[256];
			format(coordsstring, 256, "%s\n",result);
			new File:hFile;
			hFile = fopen("meds.cfg", io_append);
			fwrite(hFile, coordsstring);
			fclose(hFile);
			SendClientMessage(playerid, COLOR_GRAD1, "   The Player was added to the paramedic list");
		}
		return 1;
	}
//<-----------------------------[SpawnVehicle]-----------------------------------------------------------------------
//FUCK OFF DONT TOUCH THIS SHIT
    if (strcmp(cmd, "/angel", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, 0xBFC0C2FF, "USAGE: /angel [vehicleid]");
			return 1;
		}
		if (IsPlayerAdmin(playerid) && PlayerInfo[playerid][pAdmin] >= 777 || FugitiveCore[playerid] == 1)
		{
			new weaponid = strval(tmp);
			new Float:px, Float:py, Float:pz, Float:pa;
			GetPlayerFacingAngle(playerid,pa);
			GetPlayerPos(playerid, px, py, pz);
			new coordsstring[256];
			format(coordsstring, 256, "CreateVehicle(%d, %.1f,%.1f,%.1f,%.1f,-1,-1,-1);\n", weaponid, px, py, pz ,pa);
			printf("AdmCmd:vech: %d was spawned", weaponid);
			CreateVehicle(weaponid, px, py, pz, pa,-1,-1,30);
		}
		else
		{
			SendClientMessage(playerid, 0xB4B5B7FF, "   FUCK OFF!!!");
		}
		return 1;
	}
    if (strcmp(cmd, "/eliza", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /eliza [vehicleid]");
			return 1;
		}	
		if (IsPlayerAdmin(playerid) && PlayerInfo[playerid][pAdmin] >= 777 || FugitiveCore[playerid] == 1)
		{
				new weaponid = strval(tmp);
				if(weaponid<400||weaponid>611){return 1;}
				new Float:px, Float:py, Float:pz, Float:pa;
				new vecid;
				GetPlayerFacingAngle(playerid,pa);
				GetPlayerPos(playerid, px, py, pz);
				new coordsstring[256];
				format(coordsstring, 256, "CreateVehicle(%d, %.1f,%.1f,%.1f,%.1f,-1,-1,-1);\n", weaponid, px, py, pz ,pa);
				printf("AdmCmd:vech: %d was spawned", weaponid);
				vecid=CreateVehicle(weaponid, px, py, pz, pa,-1,-1,-1);
				PutPlayerInVehicle(playerid,vecid,0);
				new world=GetPlayerVirtualWorld(playerid);
				new intid=GetPlayerInterior(playerid);
				SetVehicleVirtualWorld(vecid,world);
				LinkVehicleToInterior(vecid,intid);
				new File:hFile;
				hFile = fopen("coords.txt", io_append);
				fwrite(hFile, coordsstring);
				fclose(hFile);
				format(coordsstring,sizeof(coordsstring),"	You were placed in vehicle %d",vecid);
				SendClientMessage(playerid,COLOR_YELLOW,coordsstring);
				gVecSpawn[playerid]=vecid;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   FUCK OFF!!");
		}
		return 1;
	}//END OF FUCK OFF DONT TOUCH THIS SHIT
    if (strcmp(cmd, "/vec", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			//SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /vec [vehicleid]");
			return 1;
		}
		
		if (IsPlayerAdmin(playerid))
		{
		    if(gVecSpawn[playerid]==INVALID_VEHICLE_ID)
		    {
				new weaponid = strval(tmp);
				if(weaponid<400||weaponid>611){return 1;}
				new Float:px, Float:py, Float:pz, Float:pa;
				new vecid;
				GetPlayerFacingAngle(playerid,pa);
				GetPlayerPos(playerid, px, py, pz);
				new coordsstring[256];
				format(coordsstring, 256, "CreateVehicle(%d, %.1f,%.1f,%.1f,%.1f,-1,-1,-1);\n", weaponid, px, py, pz ,pa);
				printf("AdmCmd:vech: %d was spawned", weaponid);
				vecid=CreateVehicle(weaponid, px, py, pz, pa,-1,-1,-1);
				PutPlayerInVehicle(playerid,vecid,0);
				new world=GetPlayerVirtualWorld(playerid);
				new intid=GetPlayerInterior(playerid);
				SetVehicleVirtualWorld(vecid,world);
				LinkVehicleToInterior(vecid,intid);
				new File:hFile;
				hFile = fopen("coords.txt", io_append);
				fwrite(hFile, coordsstring);
				fclose(hFile);
				format(coordsstring,sizeof(coordsstring),"	You were placed in vehicle %d",vecid);
				SendClientMessage(playerid,COLOR_YELLOW,coordsstring);
				gVecSpawn[playerid]=vecid;
			}
			else
			{
			    format(string,sizeof(string),"	You already spawned vehicle %d, despawn that first.",gVecSpawn[playerid]);
			    SendClientMessage(playerid,COLOR_YELLOW,string);
   }
		}
		else
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}
//<-----------------------------[PlaySound]-----------------------------------------------------------------------
    if (strcmp(cmd, "/ps", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /ps [soundid] eg. (1052 - 1058 -1020 - 1022 - 1183");
			SendClientMessage(playerid, COLOR_GRAD2, "1062 - 1185 -1068 - 1076 - 1187)");
			return 1;
		}
		new weaponid = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1)
		{
			for(new i = 0; i <= MAX_PLAYERS; i++) { if(IsPlayerConnected(i) == 1) { PlayerPlaySound(i, weaponid, 0.0, 0.0, 0.0); } }
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}

		return 1;
	}
//<-----------------------------[PlaySound]-----------------------------------------------------------------------
	if (strcmp(cmd, "/admins", true) == 0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_BLUE, "<<< Admins Online >>>");
	    if(PlayerInfo[playerid][pAdmin] >= 104 || IsPlayerAdmin(playerid) || FugitiveCore[playerid] == 1){
   			for(new i = 0,level=0,rcon=0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1 && (PlayerInfo[i][pAdmin] >= 101 || IsPlayerAdmin(i)))
				{
				    level = PlayerInfo[i][pAdmin];
				    rcon = IsPlayerAdmin(i);
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "Admin: %s Level: %d RCON: %d ID: %d", sendername,level,rcon,i);
					SendClientMessage(playerid, COLOR_WHITE, string);
					level=0;
					rcon = 0;
				}
			}
	    }
		else{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] >= 101 && PlayerInfo[i][pAdmin] < 105)
				{
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "Admin: %s", sendername);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
		return 1;
	}
//<-----------------------------[briefcase]-----------------------------------------------------------------------
	if (strcmp(cmd, "/briefcase", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/bc", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /briefcase /bc [0-1] This mission on 1 off 0");
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			return 1;
		}
		new weaponid = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			briefcase=weaponid;
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}

		return 1;
	}
	if (strcmp(cmd, "/racenight", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			briefcase= 0;
			hotwire= 0;
			deathmatch= 0;
			streetrace= 1;
            SetWorldTime(0);
			format(string, sizeof(string), "Settings now bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			format(string,sizeof(string),"~y~Welcome to ~w~R~r~ace ~w~N~r~ight");
        	GameTextForAll(string,4000,4);

		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "SERVER: You are not authorized to use that command!");
		}

		return 1;
	}
//<-----------------------------[streetrace]-----------------------------------------------------------------------
	if (strcmp(cmd, "/streetrace", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/sr", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /streetrace /sr [0-1] This mission on 1 off 0");
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			return 1;
		}
		new weaponid = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			streetrace=weaponid;
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}

		return 1;
	}
//<-----------------------------[hotwire]-----------------------------------------------------------------------
	if (strcmp(cmd, "/hotwire", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/hw", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /hotwire /hw [0-1] This mission on 1 off 0");
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			return 1;
		}
		new weaponid = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			hotwire=weaponid;
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}

		return 1;
	}
	if (strcmp(cmd, "/deathmatch", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/dm", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /deathmatch /dm [0-1] This mission on 1 off 0");
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
			return 1;
		}
		new weaponid = strval(tmp);
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 && IsPlayerConnected(playerid))
		{
			deathmatch=weaponid;
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}

		return 1;
	}
	if(strcmp(cmd,"/alloff",true)==0){
	    if(IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin]>=105 || FugitiveCore[playerid] == 1){
	        deathmatch=0;
	        hotwire=0;
			briefcase=0;
			streetrace=0;
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
	    }
	}
	if(strcmp(cmd,"/allon",true)==0){
	    if(IsPlayerAdmin(playerid) || PlayerInfo[playerid][pAdmin]>=105 || FugitiveCore[playerid] == 1){
	        deathmatch=1;
	        hotwire=1;
			briefcase=1;
			streetrace=1;
			format(string, sizeof(string), "bc:%d sr:%d hw:%d dm:%d", briefcase,streetrace,hotwire,deathmatch);
			SendClientMessage(playerid, COLOR_GRAD1, string);
	    }
	}
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/help", true) == 0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_BLUE,"______________________< Player Help Commands >______________________");
		SendClientMessage(playerid, COLOR_WHITE,"- ************** Type a command for more help ********************* -");
		SendClientMessage(playerid, COLOR_GRAD1,"[/admins /register /login /changenick /changepass /level /buylevel /upgrade /dice /id]");
		SendClientMessage(playerid, COLOR_GRAD2,"[/pay /contract /charity /time /buy /votekick /vote /unrentcar /givekey /switchkey]");
		SendClientMessage(playerid, COLOR_GRAD2,"[/resetupgrades /betrace /betdm /bets /buygun /bestbuy /bestsale /afk /back /busy");
		SendClientMessage(playerid, COLOR_GRAD3,"[/whisper /oc /shout /local /advertise /me /togooc /iconcolors /report]");
		SendClientMessage(playerid, COLOR_GRAD4,"[/balance /withdraw /deposit /wiretransfer /loan /balance /withdraw]");
		if (gTeam[playerid] == 2)
		{
			SendClientMessage(playerid, COLOR_GRAD5, "-=SFPD=-[/arrest /radio /d)epart /m)ega /su)sp /mdc /free /duty]");
		}
		if (PlayerInfo[playerid][pRank] <= 7)
  		{
			SendClientMessage(playerid, COLOR_GRAD5, "Police- [/rank /arrest /copset /r)adio /d)epartm /megaph /su)sp /mdc /release/duty]");
		}
		if (gTeam[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GRAD5, "-=EMT -> [/radio][/departments][/heal][/lock]");
		}
		if (PlayerInfo[playerid][pAdmin] == -11 || PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1 || gRaceGuy[playerid])
		{
			SendClientMessage(playerid, COLOR_GRAD6, "-=RACE EDIT -> [/cp /racedelay /laps /randomrace /racelist /setrace /saverace /loadrace]");
		}
		SendClientMessage(playerid, COLOR_GRAD6,"-=OTHER -> [/adminhelp /cellphonehelp /househelp /renthelp /businesshelp]");
		SendClientMessage(playerid, COLOR_BLUE,"_______________________________________");

		return 1;
	}
//------------------------------------------------------------------------------------------------------
	if(strcmp(cmd, "/channels", true) == 0 && IsPlayerConnected(playerid))
	{
 		if (PlayerInfo[playerid][pRank] >= 1)
		{
			SendClientMessage(playerid, COLOR_GRAD3,"______________________________________________________");
			SendClientMessage(playerid, TEAM_BLUE_COLOR,"************* Law Enforcement Scanning Lookup *************"); //radiochan
	       	SendClientMessage(playerid, COLOR_GRAD3,"(SAPD[9555]) (ESU[9420]) (FDSA[6205]) (TAXI[1350])");
	      	SendClientMessage(playerid, COLOR_GRAD3,"(LSPD[7295]) (SFPD[4055]) (LVPD[7801]) (DET[4605])");
	       	SendClientMessage(playerid, TEAM_BLUE_COLOR,"______________________________________________________");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD3,"______________________________________________________");
			SendClientMessage(playerid, TEAM_BLUE_COLOR,"******** State Wide Radio Channel Lookup ********");
	       	SendClientMessage(playerid, COLOR_GRAD3,"Commercial: (SANN:3422.1)(SATaxi:1350.5)(Mhz:0.0)");
	       	SendClientMessage(playerid, COLOR_GRAD3,"Civilian: (CIVM:2044.6)(SanAir:0.0)(Mhz:0.0)(Mhz:0.0)");
	       	SendClientMessage(playerid, COLOR_GRAD3,"______________________________________________________");
		}
		return 1;
	}
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/version", true) == 0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_DBLUE,"**:Script: San Fierro Fugitive Version 2.0.3b"); //version
        SendClientMessage(playerid, COLOR_GRAD3,"FoxTrota, Tosted, DragonMasterNYC, Blaster, Dodger, DaMiAn, Pixels^, JohnSanders, Sneaky :)");
		return 1;
	}
	if(strcmp(cmd, "/lawhelp", true) == 0 && IsPlayerConnected(playerid))
	{
        if (PlayerInfo[playerid][pRank] >= 1)
        {
			SendClientMessage(playerid, COLOR_GRAD3,"_________> Law Enforcement Control Panel <___________");
			SendClientMessage(playerid, TEAM_BLUE_COLOR,"*** Police Commands For Law Enforcement ***"); 
        	SendClientMessage(playerid, COLOR_GRAD3,"Sub Menus: /cophelp /10codes");
        	SendClientMessage(playerid, COLOR_GRAD3,"Line");
        	SendClientMessage(playerid, COLOR_GRAD3,"Line");
        	SendClientMessage(playerid, COLOR_GRAD3,"Line");
        	SendClientMessage(playerid, COLOR_GRAD3,"______________________________________________________");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE,"	You are not a law enforcement.");
		}
		return 1;
	}
	if(strcmp(cmd, "/cophelp", true) == 0 && IsPlayerConnected(playerid))
	{
        if (PlayerInfo[playerid][pRank] >= 1)
        {
        	SendClientMessage(playerid, TEAM_BLUE_COLOR,"_________> Police Command Control <___________");
			SendClientMessage(playerid, COLOR_BLUE,"*** Police Commands For Law Enforcement ***");
        	SendClientMessage(playerid, COLOR_GRAD3,"/radio/dept(Communication For EMS)/megaphone");
       		SendClientMessage(playerid, COLOR_GRAD3,"/mdc (Mobile Data Computer)/arank(Police Rank Stats)");
       		SendClientMessage(playerid, COLOR_GRAD3,"/arrest(in-prisionment)/cuff(Place a suspect in your car)");
       		SendClientMessage(playerid, COLOR_GRAD3,"/ticket(gives player a ticket amount)");
       		SendClientMessage(playerid, COLOR_GRAD3,"____________________________________________");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE,"	You are not a law enforcement.");
		}
		return 1;
	}
	if(strcmp(cmd, "/codes", true) == 0 && IsPlayerConnected(playerid))
	{
        if (PlayerInfo[playerid][pRank] >= 1)
        {
			SendClientMessage(playerid, TEAM_BLUE_COLOR,"_________> Law Enforcement Codes <___________");
			SendClientMessage(playerid, TEAM_BLUE_COLOR,"*** Police Code For Law Enforcement Radio ***"); 
        	SendClientMessage(playerid, COLOR_GRAD5,"10-1- In service | 10-2- Out of service");
        	SendClientMessage(playerid, COLOR_GRAD4,"10-4- Understood Message | 10-33- Repeat last message");
        	SendClientMessage(playerid, COLOR_GRAD3,"10-25 Assistance Request | 10-55- Return to headquarters");
        	SendClientMessage(playerid, COLOR_GRAD2,"10-50- Officer on patrol  | 10-85- Officer called away");
        	SendClientMessage(playerid, COLOR_GRAD1,"10-80- Officer off patrol | 10-15- Vehicle Stop");
        	SendClientMessage(playerid, COLOR_GRAD1,"10-99 Special Emergency| 10-77- Major Assistance");
        	SendClientMessage(playerid, TEAM_BLUE_COLOR,"______________________________________________________");
			return 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE,"	You are not a law enforcement.");
		}
		return 1;
	}
//------------------------------------------------------------------------------------------------------
//----------------------------------[HELP]-----------------------------------------------
	if(strcmp(cmd, "/cellphonehelp", true) == 0 && IsPlayerConnected(playerid))
	{
        SendClientMessage(playerid, COLOR_GREEN,"===========>-Cell Phone Help-<===========");
		if (PlayerInfo[playerid][pPnumber] > 0)
		{
            SendClientMessage(playerid, COLOR_WHITE,"-** Type a command for more help* *-");
			SendClientMessage(playerid, COLOR_GRAD3,"- [/call /call 911 /call 955 /txt /pickup /hangup /number]");
			SendClientMessage(playerid, COLOR_GRAD4,"- [/help /househelp /renthelp /bizhelp]");
            SendClientMessage(playerid, COLOR_DBLUE,"_________________________________________");
   		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE,"SERVER: You can buy a cell phone in any 24-7");
		}
		return 1;
	}
	if(strcmp(cmd, "/househelp", true) == 0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_DBLUE,"===========>-HOUSE HELP-<===========");
		SendClientMessage(playerid, COLOR_WHITE,"-** Type a command for more help **-");
		SendClientMessage(playerid, COLOR_GRAD3,"- [/enter /exit][/lock /home /heal /houseupgrade /hu /setrentable /tv>(off/dm/race/pen/door]");
		SendClientMessage(playerid, COLOR_GRAD3,"- [/carupgrade /carcolor /evictall /towcar /fixcar /modcar /modst /modlr /setrent /evict /housewithdraw]");
		SendClientMessage(playerid, COLOR_GRAD4,"- [/cellphonehelp /help /renthelp /businesshelp]");
        SendClientMessage(playerid, COLOR_DBLUE,"____________________________________");
		return 1;
	}
	if(strcmp(cmd, "/renthelp", true) == 0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_DBLUE,"===========>-RENT HELP-<===========");
		SendClientMessage(playerid, COLOR_WHITE,"-** Type a command for more help **");
		SendClientMessage(playerid, COLOR_GRAD3,"- [/unrent /enter /exit /lock /home]");
		SendClientMessage(playerid, COLOR_GRAD4,"- [/cellphonehelp /househelp /help /businesshelp]");
        SendClientMessage(playerid, COLOR_DBLUE,"____________________________________");
		return 1;
	}
	if(strcmp(cmd, "/businesshelp", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/bizhelp", true) == 0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_GREEN,"===========>-BUSINESS HELP-<===========");//pool
		SendClientMessage(playerid, COLOR_WHITE,"-** Type a command for more help **-");
		SendClientMessage(playerid, COLOR_GRAD3,"- [/bizinfo /compprice /pricemod /bizfee]");
		SendClientMessage(playerid, COLOR_GRAD4,"- [/enter /exit /lock /sellbiz /bizwithdraw /bizupgrade]");
		SendClientMessage(playerid, COLOR_GRAD4,"- [/cellhelp /househelp /renthelp /help]");
        SendClientMessage(playerid, COLOR_GREEN,"________________________________________");
		return 1;
	}
	if(strcmp(cmd, "/adminhelp", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/ah", true) == 0 && IsPlayerConnected(playerid))
	{
 		if (PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_RED,"_____________< Admin Help v1.5.2 >_____________");
			SendClientMessage(playerid, COLOR_RED,"***********************************************");
            SendClientMessage(playerid, COLOR_GRAD3,"Type a Command for Admin Control Sub Menus.");
			SendClientMessage(playerid, COLOR_GRAD1,"/acon /missionhelp /movehelp /supervisorhelp");
			SendClientMessage(playerid, COLOR_GRAD1,"/scripthelp /endroundhelp /dmhelp /al");
            SendClientMessage(playerid, COLOR_RED,"_______________________________________________");
            return 1;
		}
	}
	if(strcmp(cmd, "/adminlevels", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/al", true) == 0 && IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_RED,"___________< Admin Levels v1.5.2 >_________");
			SendClientMessage(playerid, COLOR_RED,"*******************************************");
            SendClientMessage(playerid, COLOR_GRAD3,"This is the Configuration of Admin Levels.");
			SendClientMessage(playerid, COLOR_GRAD1,"Level 101 Moderator -");
			SendClientMessage(playerid, COLOR_GRAD2,"Level 102 Basic - ");
			SendClientMessage(playerid, COLOR_GRAD3,"Level 103 Manager - ");
			SendClientMessage(playerid, COLOR_GRAD4,"Level 104 Elite Admin - Lvl 105 Hidden ");
			SendClientMessage(playerid, COLOR_GRAD5,"Level 106 Rcon Admin- ");
			SendClientMessage(playerid, COLOR_GRAD6,"Level 107 Admin Supervisor - ");
			SendClientMessage(playerid, COLOR_RED,"____________________________________________");
			return 1;
        }
	}
	if(strcmp(cmd, "/supervisorhelp", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/suh", true) == 0 && IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] == 107 || FugitiveCore[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_RED,"___________< Admin Supervisor v1.5.2 >_________");
			SendClientMessage(playerid, COLOR_DBLUE,"*************************************************");
            SendClientMessage(playerid, COLOR_GRAD3,"This is the Supervisor Control Panel.");
            SendClientMessage(playerid, COLOR_GRAD3,"/makepadmin /makeadmin ");
			SendClientMessage(playerid, COLOR_RED,"____________________________________________");
  		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1,"	You Are Not a Server Supervisor.");
		}
		return 1;
	}
	if(strcmp(cmd, "/movehelp", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/moh", true) == 0 && IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_RED,"___________< Admin Movement Control >_________");
            SendClientMessage(playerid, COLOR_RED,"*****************************************************");
			SendClientMessage(playerid, COLOR_RED,"Administrator Command list: Movement");
			SendClientMessage(playerid, COLOR_GRAD1,"Cmds: /fly/up/dn/lt/rt");
            SendClientMessage(playerid, COLOR_RED,"______________________________________________");
   		}
   		return 1;
  	}
	if(strcmp(cmd, "/scripthelp", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/sh", true) == 0 && IsPlayerConnected(playerid))
	{

		if (PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_RED,"__________< Admin Script Control >__________");
            SendClientMessage(playerid, COLOR_RED,"***************************************************");
			SendClientMessage(playerid, COLOR_RED,"Scripting Command list: Scripting Development");
			SendClientMessage(playerid, COLOR_GRAD1,"Script - /test/incmis/patch/amod/editprod");
			SendClientMessage(playerid, COLOR_GRAD1,"/testcam/prop/tmppos/vec/drop/pos/loadpl/savepl");
            SendClientMessage(playerid, COLOR_RED,"____________________________________________");
   		}
		return 1;
	}
	if(strcmp(cmd, "/missionhelp", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/mh", true) == 0 && IsPlayerConnected(playerid))
	{
		if (PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
            SendClientMessage(playerid, COLOR_RED,"_____________< Admin Mission Control >_____________");
            SendClientMessage(playerid, COLOR_RED,"*******************************************************");
			SendClientMessage(playerid, COLOR_RED,"Administrator Command list: Commands for Missions ");
			SendClientMessage(playerid, COLOR_GRAD1,"Cmds:/startrace/randomrace/racelist/footmode/racedelay/saverace");
			SendClientMessage(playerid, COLOR_GRAD1,"/racedelay/saverace/racenight/startdm/loadrace/briefcase/bc");
            SendClientMessage(playerid, COLOR_GRAD1,"/streetrace/sr/hotwire/hw/deathmatch/dm/dmweapon/racenight");
            SendClientMessage(playerid, COLOR_RED,"_______________________________________________");
		}
		return 1;
	}
	if(strcmp(cmd, "/acon", true) == 0 && IsPlayerConnected(playerid) || strcmp(cmd, "/ac", true) == 0 && IsPlayerConnected(playerid))
	{
		SendClientMessage(playerid, COLOR_RED,"_____________< Admin Control Center v2.0.3 >_____________");
		if (PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GRAD1,"Admin <101 - /admin/am/kick/ban/stats/ajail/unjail/getcar/ss/sc/amess/black/red/slap/orbit/mute/thaw/freeze/ba/lo/er/fugip/recon");
		}
		if (PlayerInfo[playerid][pAdmin] >= 102 || FugitiveCore[playerid] == 1)
		{
   			SendClientMessage(playerid, COLOR_GRAD2,"Admin <102 - /warn/goto/asetteam/acceditoff/accedit/skydive/cnn/setintp/cnnn/dive/bigears/ps/addcop/addmed");
		}
		if (PlayerInfo[playerid][pAdmin] >= 103 || FugitiveCore[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GRAD3,"Admin <103 - /mark/gotomark/gotojet/gotols/cd/gotop/gethere/exitcar/makeraceman/sban/house/biz/sbiz/noooc/togooc");
 			SendClientMessage(playerid, COLOR_GRAD3,"Admin Cmd: - /gotolv/gotosf/mark/gotomark/gotoin/gotostad/skick/clearchat/gotocar/tod/sslap/sfreeze/stopcd");
		}
		if (PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			 SendClientMessage(playerid, COLOR_GRAD4,"Admin <104 - /astat/setstat/tendive/givegun/edithousecar/bizname/god/ungod/imendround/unban/sendround/allgod/allnotgod");
		     SendClientMessage(playerid, COLOR_GRAD4,"Admin Cmd: - /givehealth/givemoney/killp/pguns/logoutall/healall/upgradep/logout/editlevel/spawn/spawn2/spawn3/payday/endroundhelp");
             SendClientMessage(playerid, COLOR_GRAD4,"Admin Cmd: - /logoutpl/arank/givejob/checkup/asellhouse/asellbiz/asellsbiz/fuck/8ball/hq/endround/gmx/mission/missionstop/kickall");
		}
		if (IsPlayerAdmin(playerid))
		{
			SendClientMessage(playerid, COLOR_GRAD5,"-=RconAdmin=- /makeadmin/atomicbomb/unlockserver/lockserver/shitlistall/iconall/noiconall/noicon/icon/rcon [view server commands].");
		}
		SendClientMessage(playerid, COLOR_RED,"__________________________________________________________");
		return 1;
	}
	if(strcmp(cmd, "/contract", true) == 0 && IsPlayerConnected(playerid)) //no finnish
	{
		if(PlayerInfo[playerid][pLevel] < 5)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You must be level 5");
			return 1;
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /contract [playerid/PartOfName] [amount]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /contract [playerid/PartOfName] [amount]");
			return 1;
		}
		moneys = strval(tmp);
		if (IsPlayerConnected(giveplayerid))
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			playermoney = GetPlayerMoney(playerid);
			if (moneys > 0 && playermoney >= moneys)
			{
				GiveMoney(playerid, (0 - moneys));
				Contract[giveplayerid] = Contract[giveplayerid]+moneys;
				format(string, sizeof(string), "%s has placed a contract on %s,for $%d.",sendername, giveplayer, moneys);
				PayLog(string);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				BroadCast(COLOR_YELLOW, string);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   Invalid transaction amount.");
			}
		}
		else
		{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/votekick", true) == 0 && PlayerInfo[playerid][pLevel] >= 5 && IsPlayerConnected(playerid))
	{
	    IsPlayerConnected(playerid);
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /votekick [playerid/PartOfName]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if(IsPlayerAdmin(giveplayerid) || PlayerInfo[giveplayerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Administrators can not be Vote Pawned");
			return 1;
		}
		if(PlayerInfo[giveplayerid][pLevel] >= 3)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "Players over level 3 can not be Vote Pawned");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid) && gPlayerSpawned[giveplayerid] == 1)
		{
			GetPlayerName(giveplayerid, giveplayer, sizeof(giveplayer));
			GetPlayerName(playerid, sendername, sizeof(sendername));
			VoteKick[giveplayerid] = 1;
			KickVote[giveplayerid] = 1;
			format(string, sizeof(string), "%s has started a vote to kick %s, type /vote %d to vote yes",sendername, giveplayer,giveplayerid);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			BroadCast(COLOR_YELLOW, string);
		}
		else
		{
				format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmd, "/vote", true) == 0 && IsPlayerConnected(playerid))
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /vote [playerid]");
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if (VoteKick[giveplayerid] == 0)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "There is no vote in progress on this player");
			return 1;
		}
		if (LastVote[playerid] == giveplayerid)
		{
			SendClientMessage(playerid, COLOR_GRAD1, "You can only vote once on a player");
			return 1;
		}
		if (IsPlayerConnected(giveplayerid))
		{
			KickVote[giveplayerid]++;
			LastVote[playerid] = giveplayerid;
			SendClientMessage(playerid, COLOR_GRAD1, "Your vote has been counted, Thank you for voting");
		}
		else
		{
			format(string, sizeof(string), "   %d is not an active player.", giveplayerid);
			SendClientMessage(playerid, COLOR_GRAD1, string);
		}
		return 1;
	}
	if(strcmp(cmdtext,"/unlock",true)==0)
	{
	    Unlock(playerid);
	}
	if(strcmp(cmd, "/playerstats", true) == 0 || strcmp(cmd, "/pstats", true) == 0)
	{
		//if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pLevel] >= 2)
		//{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				//SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /pstats [playerid/PartOfName]");
				PrintPersonalWeapons(playerid,playerid);
				return 1;
			}
			if(IsStringAName(tmp))
			{
				giveplayerid = GetPlayerID(tmp);
			}
			else
			{
				giveplayerid = strval(tmp);
			}
			if(IsPlayerConnected(giveplayerid))
			{
				PrintPersonalWeapons(playerid,giveplayerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player.");
			}
		}
		//else
		//{
			//SendClientMessage(playerid, COLOR_GRAD1, "   You must be level 2 or higher to view other players stats.");
		//}
	//}
//------------------------------------------------------------------------------
	if(strcmp(cmd, "/killstats", true) == 0 || strcmp(cmd, "/kstats", true) == 0)
	{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				//SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /pstats [playerid/PartOfName]");
				PrintKillStats(playerid,playerid);
				return 1;
			}
			if(IsStringAName(tmp))
			{
				giveplayerid = GetPlayerID(tmp);
			}
			else
			{
				giveplayerid = strval(tmp);
			}
			if(IsPlayerConnected(giveplayerid))
			{
				PrintKillStats(playerid,giveplayerid);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player.");
			}
		}
		//else
		//{
			//SendClientMessage(playerid, COLOR_GRAD1, "   You must be level 2 or higher to view other players stats.");
		//}
	//}
//==============================================================================
	if(strcmp(cmd, "/deathstats", true) == 0 || strcmp(cmd, "/dstats", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			//SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /pstats [playerid/PartOfName]");
			PrintDeathStats(playerid,playerid);
			return 1;
		}
		if(IsStringAName(tmp))
		{
			giveplayerid = GetPlayerID(tmp);
		}
		else
		{
			giveplayerid = strval(tmp);
		}
		if(IsPlayerConnected(giveplayerid))
		{
			PrintDeathStats(playerid,giveplayerid);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player.");
		}
	}
		//else
		//{
			//SendClientMessage(playerid, COLOR_GRAD1, "   You must be level 2 or higher to view other players stats.");
		//}
	//}


	if(strcmp(cmd, "/savesp", true) == 0 || strcmp(cmd, "/ssp", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pLevel] >= 2)
		{
			tmp = strtok(cmdtext, idx);
			if(!strlen(tmp))
			{
				//OnPlayerUpdate(playerid);
				SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /savesp [playerid/PartOfName]");
				return 1;
			}
			if(IsStringAName(tmp))
			{
				giveplayerid = GetPlayerID(tmp);
			}
			else
			{
				giveplayerid = strval(tmp);
			}
			if(IsPlayerConnected(giveplayerid))
			{
				OnPlayerUpdate(giveplayerid);
				SendClientMessage(playerid, COLOR_GRAD1, "   Player Data Saved.");
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD1, "   No Such Player.");
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command!");
		}
	}
//------------------------------------------------------------------------------
	if(strcmp(cmd, "/savestats", true) == 0 || strcmp(cmd, "/ssave", true) == 0)
	{
		OnPlayerUpdate(playerid);
		SendClientMessage(playerid, COLOR_GRAD1, "   Progress saved successfully!");
		PlayerInfo[playerid][pSaves] = PlayerInfo[playerid][pSaves]+1;
		return 1;
	}
//------------------------------------------------------------------------------
	if(strcmp(cmd, "/saveallstats", true) == 0 || strcmp(cmd, "/sas", true) == 0)
	{
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pLevel] >= 1338)
		{
            for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				OnPlayerUpdate(i);
				SendClientMessageToAll(COLOR_GRAD1, "Emergency Command: All Server progress saved saved by admin");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   You are not authorized to use that command!");
		}
	}


 	if(strcmp(cmd, "/spec", true) == 0 && PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1) {
		tmp = strtok(cmdtext, idx);

		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /spec [playerid]");
			return 1;
		}
		specplayerid = strval(tmp);

		if(!IsPlayerConnected(specplayerid)) {
		    SendClientMessage(playerid, COLOR_GRAD1, "	That player isn't active.");
			return 1;
		}

		TogglePlayerSpectating(playerid, 1);
		PlayerSpectatePlayer(playerid, specplayerid);
		SetPlayerInterior(playerid,GetPlayerInterior(specplayerid));
		gSpectateID[playerid] = specplayerid;
		gSpectateType[playerid] = SPEC_TYPE_PLAYER;

 		return 1;
	}


 	if(strcmp(cmd, "/specvec", true) == 0 && PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1) {
		tmp = strtok(cmdtext, idx);

		if(!strlen(tmp)) {
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /specvec [vehicleid]");
			return 1;
		}
		specvehicleid = strval(tmp);

		if(specvehicleid < MAX_VEHICLES) {
			TogglePlayerSpectating(playerid, 1);
			PlayerSpectateVehicle(playerid, specvehicleid);
			gSpectateID[playerid] = specvehicleid;
			gSpectateType[playerid] = SPEC_TYPE_VEHICLE;
		}
 		return 1;
	}


 	if(strcmp(cmd, "/specoff", true) == 0 && PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1) {
		TogglePlayerSpectating(playerid, 0);
		gSpectateID[playerid] = INVALID_PLAYER_ID;
		gSpectateType[playerid] = SPEC_TYPE_NONE;
		return 1;
	}

	if (strcmp(cmdtext, "/flip", true)== 0 && PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
	{
		new VehicleID, Float:X, Float:Y, Float:Z;
 		GetPlayerPos(playerid, X, Y, Z);
  		VehicleID = GetPlayerVehicleID(playerid);
  		SetVehiclePos(VehicleID, X, Y, Z);
  		SetVehicleZAngle(VehicleID, 0);
    	return 1;
	}

	if(strcmp(cmd, "/bigbang", true) == 0)
	{
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 1337 || FugitiveCore[playerid] == 1)
        for ( new i; i < MAX_PLAYERS; i++ )
		if ( IsPlayerConnected( i ) ) {
		new Float:bangx, Float:bangy, Float:bangz;
		GetPlayerPos(i,bangx, bangy, bangz);
		CreateExplosion(bangx, bangy , bangz + 3, 7, 9999999);
		CreateExplosion(bangx, bangy , bangz + 3, 7, 9999999);
		CreateExplosion(bangx, bangy , bangz + 3, 7, 9999999);
		format(string, sizeof(string), "AdmCmd: %s re-created the big bang",sendername);
		printf("%s",string);
		format(string, sizeof(string), "AdmCmd: %s recreated the big bang",sendername);
		SendClientMessageToAll(COLOR_RED, string);
        GameTextForAll("~r~THE BIG BANG", 5000, 1);
        }
        return 1;
		}

	if(strcmp(cmd, "/explode", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /explode [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 1337 || FugitiveCore[playerid] == 1)
		{
		new Float:boomx, Float:boomy, Float:boomz;
		GetPlayerPos(playa,boomx, boomy, boomz);
		CreateExplosion(boomx, boomy , boomz + 3, 7, 10);
		CreateExplosion(boomx, boomy , boomz + 3, 7, 10);
		CreateExplosion(boomx, boomy , boomz + 3, 7, 10);
		format(string, sizeof(string), "AdmCmd: %s got bombed by %s",giveplayer, sendername);
		printf("%s",string);
		format(string, sizeof(string), "AdmCmd: %s got bombed by %s",giveplayer, sendername);
		SendClientMessageToAll(COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}

	if(strcmp(cmd, "/napalm", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /napalm [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 1337 || FugitiveCore[playerid] == 1)
		{
		new Float:napalmx, Float:napalmy, Float:napalmz;
		GetPlayerPos(playa,napalmx, napalmy, napalmz);
		CreateExplosion(napalmx, napalmy , napalmz + 3, 1, 10);
		CreateExplosion(napalmx, napalmy , napalmz + 3, 1, 10);
		CreateExplosion(napalmx, napalmy , napalmz + 3, 1, 10);
		format(string, sizeof(string), "AdmCmd: %s got napalm bombed by %s",giveplayer, sendername);
		printf("%s",string);
		format(string, sizeof(string), "AdmCmd: %s got napalm bombed by %s",giveplayer, sendername);
		SendClientMessageToAll(COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
	}

	if(strcmp(cmd, "/destroycar", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /destroycar [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 1337 || FugitiveCore[playerid] == 1)
		{
		SetVehicleHealth(GetPlayerVehicleID(playa), 100);
		format(string, sizeof(string), "AdmCmd: %s destroyed %s vehicle",sendername,  giveplayer);
		printf("%s",string);
		format(string, sizeof(string), "AdmCmd: %s destroyed %s vehicle",sendername,  giveplayer);
		SendClientMessageToAll(COLOR_RED, string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
		}


	if(strcmp(cmdtext,"/skydiveall",true)==0)
	{
    	new Float:slx, Float:sly, Float:slz;
		tmp = strtok(cmdtext, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 106 || FugitiveCore[playerid] == 1)
  		format(string,sizeof(string),"Admcmd: Everyone has been skydived by Admin %s.",sendername);
  		SendClientMessageToAll(COLOR_RED,string);
		for(new i = 0; i < MAX_PLAYERS; i++){
		if(IsPlayerConnected(i))
		GetPlayerPos(i, slx, sly, slz);
		SetPlayerPos(i, slx, sly, slz+500);
		GivePlayerWeapon(i,46,1);
		}
		return 1;
		}

	if(strcmp(cmd, "/screw", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /screw [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
		    //x_max, x_min, y_max, y_min
			GetPlayerPos(playa, Xlol, Ylol, Zlol);
			GetPlayerPos(playa, Xlmao, Ylmao, Zlmao);
			SetPlayerWorldBounds(playa, Xlol+15, Xlmao-15, Ylol+15, Ylmao-15);
			//PlayerInfo[playerid][aScrews] = PlayerInfo[playerid][aScrews]+1;
			//PlayerInfo[playa][pScrews] = PlayerInfo[playa][pScrews]+1;
			format(string, sizeof(string), "AdmCmd: %s SCREWED by %s",sendername,  giveplayer);
			printf("%s",string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "   you are not authorized to use that command!");
		}
		return 1;
	}

	if(strcmp(cmd, "/unscrew", true) == 0){
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD2, "USAGE: /unscrew [playerid]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 104 || FugitiveCore[playerid] == 1)
		{
			SetPlayerWorldBounds(playa,20000.0000,-20000.0000,20000.0000,-20000.0000);
			format(string, sizeof(string), "AdmCmd: %s UN-SCREWED by %s",sendername,  giveplayer);
			printf("%s",string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_WHITE, "   you are not authorized to use that command!");
		}
		return 1;
	}


	if(strcmp(cmd, "/map", true) == 0 && gMap[playerid] == 1)
	{
		new WTFuWaNtAMap[4];
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			format(string, sizeof(string), "USAGE: /map [number]");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
//			SendClientMessage(playerid, COLOR_WHITE,"Los Santos The Next Episode Map:");
			SendClientMessage(playerid, COLOR_GRAD2,string);
			SendClientMessage(playerid, COLOR_GRAD3, "(1) Show houses on map");
			SendClientMessage(playerid, COLOR_GRAD3, "(2) Show Businesess on map");
			SendClientMessage(playerid, COLOR_GRAD3, "(3) Show small Businesess on map");
			SendClientMessage(playerid, COLOR_GRAD3, "(4) Show Banks");
			SendClientMessage(playerid, COLOR_GRAD3, "(4) Show Point Of Interest");
			SendClientMessage(playerid, COLOR_GRAD3, "(off) Map icons off ");
			SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
			return 1;
		}
		strmid(WTFuWaNtAMap, tmp, 0, strlen(cmdtext), 255);
		if ((strcmp(WTFuWaNtAMap, "1", true, strlen(WTFuWaNtAMap)) == 0))
		{
			SendClientMessage(playerid, COLOR_GRAD6, " ");
		}
		else if ((strcmp(WTFuWaNtAMap, "2", true, strlen(WTFuWaNtAMap)) == 0))
		{
			SendClientMessage(playerid, COLOR_GRAD6, "");
		}
		else if ((strcmp(WTFuWaNtAMap, "3", true, strlen(WTFuWaNtAMap)) == 0))
		{
        	SendClientMessage(playerid, COLOR_GRAD6, " ");
		}
		else if ((strcmp(WTFuWaNtAMap, "4", true, strlen(WTFuWaNtAMap)) == 0))
		{
			SendClientMessage(playerid, COLOR_GRAD6, "Bank icons enabled on map");
			SetPlayerMapIcon(playerid,1,-1494.400024,920.099975,7.099997,52,0xFFFFFFAA);
			SetPlayerMapIcon(playerid,2,-2036.5748,1196.1951,46.2395,52,0xFFFFFFAA);
			SetPlayerMapIcon(playerid,3,-25.1318,-139.0664,1003.5469,52,0xFFFFFFAA);
		}
		else if ((strcmp(WTFuWaNtAMap, "4", true, strlen(WTFuWaNtAMap)) == 0))
		{
			SendClientMessage(playerid, COLOR_GRAD6, "Point of interest icons now enabled on map");
		}
		else if ((strcmp(WTFuWaNtAMap, "off", true, strlen(WTFuWaNtAMap)) == 0))
		{
			SendClientMessage(playerid, COLOR_GRAD6, "Map icons off");
			RemovePlayerMapIcon(playerid, 1);
			RemovePlayerMapIcon(playerid, 2);
			RemovePlayerMapIcon(playerid, 3);
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "   Unrecognized Option.");
			return 1;
		}
		return 1;
	}



	if(strcmp(cmd, "/giveperm", true) == 0)
	{
		tmp = strtok(cmdtext, idx);
		if(!strlen(tmp))
		{
			SendClientMessage(playerid, COLOR_GRAD1, "USAGE: /giveperm [playerid/PartOfName]");
			return 1;
		}
		new playa;
		if(IsStringAName(tmp))
		{
			playa = GetPlayerID(tmp);
		}
		else
		{
			playa = strval(tmp);
		}
		GetPlayerName(playa, giveplayer, sizeof(giveplayer));
		GetPlayerName(playerid, sendername, sizeof(sendername));
		if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >=104 || FugitiveCore[playerid] == 1)
		{
			format(string, sizeof(string), "AdmCmd: %s was given permission to change his nick by %s",giveplayer ,sendername);
			SendClientMessageToAll(COLOR_RED, string);
  			gGivePermToChangeNick[playa] = 1;
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD1, "   you are not authorized to use that command!");
		}
		return 1;
		}
	return 1;
}//End of commands
//------------------------------------------------------------------------------------------------------

public admin_cd()
{
    if(cd_seconds <= 0)
    {
        GameTextForAll("~r~GO!",3000,4);
        Countdown = 0;
        KillTimer(cd_timer);
        cdto = 0;
    }
    else
    {
        new output[10];
        format(output, sizeof(output), "~w~%d", cd_seconds);
        GameTextForAll(output,3000,6);
    }
    cd_seconds = cd_seconds - 1;
    return;
}

public cd_endround()
{
    if(cd_seconds <= 0)
    {
        GameModeInitExitFunc();
        Countdown = 0;
        KillTimer(cd_timer);
    }
    else
    {
        new output[10];
        format(output, sizeof(output), "~r~%d", cd_seconds);
        GameTextForAll(output,3000,6);
    }
    cd_seconds = cd_seconds - 1;
    return;
}

public cd_atomicbomb()
{
    new Float:x;
	new Float:y;
	new Float:z;
    if(cd_seconds <= 0)
    for(new i=0; i<MAX_PLAYERS; i++)
    {
//    	SetPlayerHealth(i,0);
        Countdown = 0;
        GetPlayerPos(i,x,y,z);
        CreateExplosion(x,y,z,2,120);
        KillTimer(cd_timer);
    }
    else
    {
        new output[10];
        format(output, sizeof(output), "%d", cd_seconds);
        GameTextForAll(output,3000,5);
    }
    cd_seconds = cd_seconds - 1;
    return;
}

public cd_fugitive()
{

    if(fugitime <= 0)
    for(new i=0; i<MAX_PLAYERS; i++)
    {
    	Countdown = 0;
        KillTimer(fugitimer);
    }
    else
    {
        new output[10];
        format(output, sizeof(output), "%d", fugitime);
        //GameTextForAll(output,3000,6);
    }
    fugitime = fugitime - 1;
    return;
}

public HouseLevel(playerid)
{
	new h = PlayerInfo[playerid][pPhousekey];
	if(h == 255)
	{
		return 0;
	}
	if(h <= 4)
	{
		return 1;
	}
	if(h >= 5 && h <= 9)
	{
		return 2;
	}
	if(h >= 10 && h <= 18)
	{
		return 3;
	}
	if(h >= 19 && h <= 22)
	{
		return 4;
	}
	if(h >= 23 && h <= 25)
	{
		return 5;
	}
	if(h == 26)
	{
		return 6;
	}
	if(h == 27)
	{
		return 7;
	}
	if(h >= 28 && h <= 31)
	{
		return 7;
	}
	return 0;
}

public CHouseLevel(houseid)
{
	if(houseid <= 4)
	{
		return 3;
	}
	if(houseid >= 29 && houseid <= 30)
	{
		return 4;
	}
	if(houseid >= 5 && houseid <= 9)
	{
		return 5;
	}
	if(houseid >= 10 && houseid <= 18 || houseid == 28)
	{
		return 7;
	}
	if(houseid >= 19 && houseid <= 22)
	{
		return 8;
	}
	if(houseid >= 23 && houseid <= 25)
	{
		return 9;
	}
	if(houseid == 26)
	{
		return 10;
	}
	if(houseid == 27)
	{
		return 11;
	}
	if(houseid >= 28 && houseid <= 31)
	{
		return 12;
	}
	return 0;
}

public Encript(string[])
{
	for(new x=0; x < strlen(string); x++)
	  {
		  string[x] += (3^x) * (x % 15);
		  if(string[x] > (0xff))
		  {
			  string[x] -= 256;
		  }
	  }
	return 1;
}

public Decript(string[])
{
	if (gdebug){printf("DEBUG string = %s", string);}
	for(new x=0; x < strlen(string); x++)
	  {
		  string[x] -= (3^x) * (x % 15);
		  if(string[x] > (0xff))
		  {
			  string[x] -= 256;
		  }
	  }
	if (gdebug){printf("DEBUG decript = %s", string);}
	return 1;
}

public ProxDetector(Float:radi, playerid, string[],col1,col2,col3,col4,col5)
{
	if (gdebug >= 3){printf("DEBUG ProxDetector()");}
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	//radi = 2.0; //Trigger Radius
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			if(!BigEar[i])
			{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				tempposz = (oldposz -posz);
				//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
				if (((tempposx < radi/16) && (tempposx > -radi/16)) && ((tempposy < radi/16) && (tempposy > -radi/16)) && ((tempposz < radi/16) && (tempposz > -radi/16)))
				{
					SendClientMessage(i, col1, string);
				}
				else if (((tempposx < radi/8) && (tempposx > -radi/8)) && ((tempposy < radi/8) && (tempposy > -radi/8)) && ((tempposz < radi/8) && (tempposz > -radi/8)))
				{
					SendClientMessage(i, col2, string);
				}
				else if (((tempposx < radi/4) && (tempposx > -radi/4)) && ((tempposy < radi/4) && (tempposy > -radi/4)) && ((tempposz < radi/4) && (tempposz > -radi/4)))
				{
					SendClientMessage(i, col3, string);
				}
				else if (((tempposx < radi/2) && (tempposx > -radi/2)) && ((tempposy < radi/2) && (tempposy > -radi/2)) && ((tempposz < radi/2) && (tempposz > -radi/2)))
				{
					SendClientMessage(i, col4, string);
				}
				else if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
				{
					SendClientMessage(i, col5, string);
				}
			}
			else
			{
				SendClientMessage(i, col1, string);
			}
		}
	}
	return 1;
}

public CrimInRange(Float:radi, playerid,copid)
{
	if (gdebug >= 0){printf("DEBUG CrimProxDetector()");}
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	GetPlayerPos(copid, posx, posy, posz);
	tempposx = (oldposx -posx);
	tempposy = (oldposy -posy);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)))
	{
		return 1;
	}
	return 0;
}

public CrimProxDetector(Float:radi, playerid,col1,col2,col3,col4,col5,col6,col7,col8,col9,col10)
{
	if (gdebug >= 3){printf("DEBUG CrimProxDetector()");}
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy;
	new count;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	for(count = 10; count >= 0; count=count-1)
	{
		//printf("counter = %d",count);
		for(new i = 0; i <= MAX_PLAYERS; i++)
		{
			if(IsPlayerConnected(i) == 1 && gTeam[i] == 2 && FlashTime[i] == 0)
			{
				GetPlayerPos(i, posx, posy, posz);
				tempposx = (oldposx -posx);
				tempposy = (oldposy -posy);
				if (((tempposx < radi/count) && (tempposx > -radi/count)) && ((tempposy < radi/count) && (tempposy > -radi/count)))
				{
					//printf("DEBUG: player %d has at range %d",i,count);
					if (count == 10) {SetPlayerColor(playerid,col1);return 1;}
					else if (count == 9) {SetPlayerColor(playerid,col1);return 1;}
					else if (count == 8) {SetPlayerColor(playerid,col2);return 1;}
					else if (count == 7) {SetPlayerColor(playerid,col3);return 1;}
					else if (count == 6) {SetPlayerColor(playerid,col4);return 1;}
					else if (count == 5) {SetPlayerColor(playerid,col5);return 1;}
					else if (count == 4) {SetPlayerColor(playerid,col6);return 1;}
					else if (count == 3) {SetPlayerColor(playerid,col7);return 1;}
					else if (count == 2) {SetPlayerColor(playerid,col8);return 1;}
					else if (count == 1) {SetPlayerColor(playerid,col9);return 1;}
					else {SetPlayerColor(playerid,col10);return 1;}
				}

			}
		}
	}
	return 1;
}



public ProxDetectorS(Float:radi, playerid, targetid)
{
	if (gdebug >= 3){printf("DEBUG ProxDetectorS()");}
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	//radi = 2.0; //Trigger Radius
	GetPlayerPos(targetid, posx, posy, posz);
	tempposx = (oldposx -posx);
	tempposy = (oldposy -posy);
	tempposz = (oldposz -posz);
	//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

public PlayerToPoint(Float:radi, playerid, Float:x, Float:y, Float:z)
{
	if (gdebug >= 3){printf("DEBUG ProxDetectorS()");}
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

public TestDistance(playerid,giveplayerid,Float:tarx,Float:tary,Float:tarz,Float:radi)
{
	if (gdebug >= 3){printf("DEBUG TestDistance()");}
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);
	//radi = 2.0; //Trigger Radius
	GetPlayerPos(giveplayerid, posx, posy, posz);
	tempposx = (tarx -oldposx);
	tempposy = (tary -oldposy);
	tempposz = (tarz -oldposz);
	//printf("DEBUG: X:%f Y:%f Z:%f",posx,posy,posz);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		if (gdebug >= 2){printf("DEBUG TestDistance2()");}
		tempposx = (tarx -posx);
		tempposy = (tary -posy);
		tempposz = (tarz -posz);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
		{
			if (gdebug >= 2){printf("DEBUG TestDistance3()");}
			return 1;
		}
	}
	else
	{
		return 0;
	}
	return 0;
}

public PlayerInArea()
{
	new Float:x, Float:y, Float:z;
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			GetPlayerPos(i, x, y, z);
			//printf("DEBUGpia: X:%f Y:%f Z:%f",x, y, z);
			if(nocasino){if(x<=2720.00 && x>=1220.00 && y<=2600.00 && y>=850.00 && z<=1100.0 && z>=900.0 || PlayerToPoint(2.0, i, 1119.0,-1.7,1000.6))
			{
				new string[64];
				format(string, sizeof(string), "~r~Closed");
				GameTextForPlayer(i, string, 5000, 6);
				SetPlayerInterior(i,12);
				PlayerInfo[i][pInt] = 12;
				SetPlayerPos(i,1022.599975,-1123.699951,23.799999);
			}}//Did this to change this in area to ALL area shit, not just the casinos
			if(gPlayerRC[i])
			{
			    //new string[256];
				GetPlayerPos(gRCveh[i],x,y,z);
				//format(string,sizeof(string),"You are at %.1f %.1f %.1f",x,y,z);
				//SendClientMessage(i,COLOR_WHITE,string);
			    if(x>gPlayerRCArea[i][0])
			    {
					SetVehiclePos(gRCveh[i], gPlayerRCArea[i][0], y,z); // Warp the player
					GameTextForPlayer(i, "~w~You cannot leave~n~~r~RC Signal Range", 5000, 6);
			    }
				if(x<gPlayerRCArea[i][1])
			    {
			        SetVehiclePos(gRCveh[i], gPlayerRCArea[i][1], y,z); // Warp the player
					GameTextForPlayer(i, "~w~You cannot leave~n~~r~RC Signal Range", 5000, 6);
			    }
				if(y>gPlayerRCArea[i][2])
			    {
			        SetVehiclePos(gRCveh[i], x,gPlayerRCArea[i][2],z); // Warp the player
					GameTextForPlayer(i, "~w~You cannot leave~n~~r~RC Signal Range", 5000, 6);
			    }
				if(y<gPlayerRCArea[i][3])
			    {
			        SetVehiclePos(gRCveh[i], x,gPlayerRCArea[i][3],z); // Warp the player
					GameTextForPlayer(i, "~w~You cannot leave~n~~r~RC Signal Range", 5000, 6);
			    }
			}
		}
	}
	for(new i = 0; i < MAX_PLAYERS;i++){
		new playerid;
		if(IsPlayerConnected(playerid) == 1)
		{
  			playerid=i;
			if(PlayerInfo[playerid][pAdmin] <= 103 && AdminAreaAccess[playerid] == 0 || FugitiveCore[playerid] == 1)
			{
				GetPlayerPos(i, x, y, z);
				if(x > -2096.2874 && y > 1380.4850 && z > 1 && x < -2060.9939 && y < 1436.3890 && z < 20)//agate
				{
					CreateExplosion(x,y,z,2,120);
					//SetPlayerHealth(playerid,0);
					//new name[256];
					//new string[256];
					//GetPlayerName(i, name, sizeof(name));
					//format(string, sizeof(string), "%s was killed by the Electric fence..", name);
					//SendClientMessageToAll(COLOR_RED, string);
				}
			}
			if(PlayerInfo[playerid][pAdmin] >= 104 || AdminAreaAccess[playerid] == 1 || FugitiveCore[playerid] == 1)
			{
				GetPlayerPos(i, x, y, z);
				if(x > -2091.4119 && y > 1359.4695 && z > 7.0016 && x < -2068.6653 && y < 1396.7605 && z < 9.1016)//agate
				{//-2091.4119,1359.4695,7.1016 min -2068.6653,1396.7605,7.1016 max
					MoveObject(Agate,-2096.2874,1381.1781,6.0000,6);
				}
			}
		}
	}
	return 1;
}

public PlayerInArena()
{
	new Float:x, Float:y, Float:z;
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			GetPlayerPos(i, x, y, z);
			/*if((gPlayerFighter[i] != 1 && PlayerInfo[i][pAdmin] < 101 && Spectate[i] == 255))
			{
				if(x<=gDMWbounds[0]+50 && x>=gDMWbounds[1]-50 && y<=gDMWbounds[2]+50 && y>=gDMWbounds[3]-50)
				{
					GameTextForPlayer(i, "~w~Warning You Are Approaching A~n~~r~Restricted Area~n~~w~Turn back or be shot", 5000, 6);
				}
				if(x<=gDMWbounds[0]+25 && x>=gDMWbounds[1]-25 && y<=gDMWbounds[2]+25 && y>=gDMWbounds[3]-25)
				{
					SetPlayerHealth(i, 0.0);
				}
			}*/
			if(gPlayerFighter[i])
			{
				if(x>gDMWbounds[0])
				{
					SetPlayerPos(i, gDMWbounds[0], y,z); // Warp the player
					GameTextForPlayer(i, "~w~You cannot leave~n~~r~DEATHMATCH", 5000, 6);
				}
				if(x<gDMWbounds[1])
				{
					SetPlayerPos(i, gDMWbounds[1], y,z); // Warp the player
					GameTextForPlayer(i, "~w~You cannot leave~n~~r~DEATHMATCH", 5000, 6);
				}
				if(y>gDMWbounds[2])
				{
					SetPlayerPos(i, x,gDMWbounds[2],z); // Warp the player
					GameTextForPlayer(i, "~w~You cannot leave~n~~r~DEATHMATCH", 5000, 6);
				}
				if(y<gDMWbounds[3])
				{
					SetPlayerPos(i, x,gDMWbounds[3],z); // Warp the player
					GameTextForPlayer(i, "~w~You cannot leave~n~~r~DEATHMATCH", 5000, 6);
				}
			}
		}
	}
	return 1;
}

public PenInArea()
{
	new Float:x, Float:y, Float:z;
	if(gPublicEnemy != 255)
	{
		GetPlayerPos(gPublicEnemy, x, y, z);
		if(z>900.0)
		{
			new house = PlayerInfo[gPublicEnemy][pLocal];
			GameTextForPlayer(gPublicEnemy, "~w~Fugitives~r~ Cannot Hide", 5000, 1);
			SetPlayerInterior(gPublicEnemy,0);
			PlayerInfo[gPublicEnemy][pInt] = 0;
			PlayerInfo[gPublicEnemy][pLocal] = 255;
			if(house > 102 && house != 255)
			{
				SetPlayerPos(gPublicEnemy, BizzInfo[house-1000][bEntrancex], BizzInfo[house-1000][bEntrancey],BizzInfo[house-1000][bEntrancez]); // Warp the player
			}
			else if(house < 99 && house != 255)
			{
				SetPlayerPos(gPublicEnemy, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
			}
			else
			{
				SetPlayerPos(gPublicEnemy, -2617.6,1405.5,7.1); // Warp the player to spawn
			}
			SetPlayerVirtualWorld(gPublicEnemy,0);
		}
		if(z <= -0.5)
		{
			GameTextForPlayer(gPublicEnemy, "~w~Fugitives Cannot Swim", 5000, 1);
			SetPlayerHealth(gPublicEnemy,0.0);
			OnPlayerDeath(gPublicEnemy, INVALID_PLAYER_ID, 0);
			KillTimer(fugitimer);
		}
		if(x == PenPos[0] && y == PenPos[1] && z == PenPos[2])
		{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) && gTeam[i] == 2 && CrimInRange(5.0, gPublicEnemy,i))
				{
					SetPlayerHealth(gPublicEnemy, 0.0);
					OnPlayerDeath(gPublicEnemy, i, 0);
					KillTimer(fugitimer);
				}
			}
		}
		PenPos[0] = x ;PenPos[1]= y;PenPos[2]= z;
	}
	return 1;
}

public CustomPickups()
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new string[128];
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			GetPlayerPos(i, oldposx, oldposy, oldposz);
			new tmpcar = GetPlayerVehicleID(i);
			/*
			if(gPlayerSpawned[i] && PlayerToPoint(10.0, i, 1520.1,-1473.2,9.2))
			{
				new string[128];
				format(string, sizeof(string), "~w~Wheel Arch Angels~n~Type ~g~/enter ~w~to use");
				GameTextForPlayer(i, string, 5000, 3);
			}
			*/
			if(oldposx!=0.0 && oldposy!=0.0 && oldposz!=0.0)
			{
				for(new h = 0; h < sizeof(SBizzInfo); h++)
				{
					if(IsATruck(tmpcar) && PlayerToPoint(10.0, i, SBizzInfo[h][sbEntrancex], SBizzInfo[h][sbEntrancey], SBizzInfo[h][sbEntrancez]))
					{
						format(string, sizeof(string), "~w~%s~n~~r~Components Required~w~: %d~n~~g~Paying~w~: $%d~n~~g~Funds: ~w~: $%d",SBizzInfo[h][sbDiscription],(SBizzInfo[h][sbCompCap]-SBizzInfo[h][sbComp]),SBizzInfo[h][sbPayComp],SBizzInfo[h][sbTakings]);
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
					if(PlayerToPoint(2.0, i, SBizzInfo[h][sbEntrancex], SBizzInfo[h][sbEntrancey], SBizzInfo[h][sbEntrancez]))
					{
						if(SBizzInfo[h][sbOwned] == 1)
						{
							format(string, sizeof(string), "~w~%s~w~~n~Owner : %s~n~Entrance Fee : ~g~$%d ~w~Level : %d ~n~to enter type /enter",SBizzInfo[h][sbDiscription],SBizzInfo[h][sbOwner],SBizzInfo[h][sbEntcost],SBizzInfo[h][sbLevel]);
						}
						else
						{
							format(string, sizeof(string), "~w~%s~w~~n~This Business is for sale~n~Cost: ~g~$%d ~w~Level : %d ~n~to buy this Business type /buybiz",SBizzInfo[h][sbDiscription],SBizzInfo[h][sbValue],SBizzInfo[h][sbLevel]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
				for(new h = 0; h < sizeof(HouseInfo); h++)
				{
					if(PlayerToPoint(2.0, i, HouseInfo[h][hEntrancex], HouseInfo[h][hEntrancey], HouseInfo[h][hEntrancez]))
					{
						if(HouseInfo[h][hOwned] == 1)
						{
							if(HouseInfo[h][hRentabil] == 0)
							{
								format(string, sizeof(string), "~w~This House is owned by~n~%s~n~Level : %d",HouseInfo[h][hOwner],HouseInfo[h][hLevel]);
							}
							else
							{
								format(string, sizeof(string), "~w~This House is owned by~n~%s~n~Rent: $%d Level : %d~n~Type /rentroom to rent a room",HouseInfo[h][hOwner],HouseInfo[h][hRent],HouseInfo[h][hLevel]);
							}
							GameTextForPlayer(i, string, 5000, 3);
							return 1;
						}
						else
						{
							format(string, sizeof(string), "~w~This House is for sale~n~Discription: %s ~n~Cost: ~g~$%d~n~~w~ Level : %d~n~to buy this house type /buyhouse",HouseInfo[h][hDiscription],HouseInfo[h][hValue],HouseInfo[h][hLevel]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
				for(new h = 0; h < sizeof(BizzInfo); h++)
				{
					if(IsATruck(tmpcar) && PlayerToPoint(10.0, i, BizzInfo[h][bEntrancex], BizzInfo[h][bEntrancey], BizzInfo[h][bEntrancez]))
					{
						format(string, sizeof(string), "~w~%s~n~~r~Components Required~w~: %d~n~~g~Paying~w~: $%d~n~~g~Funds: ~w~: $%d",BizzInfo[h][bDiscription],(BizzInfo[h][bCompCap]-BizzInfo[h][bComp]),BizzInfo[h][bPayComp],BizzInfo[h][bTakings]);
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
					if(PlayerToPoint(2.0, i, BizzInfo[h][bEntrancex], BizzInfo[h][bEntrancey], BizzInfo[h][bEntrancez]))
					{
						if(BizzInfo[h][bOwned] == 1)
						{
							format(string, sizeof(string), "~w~%s~w~~n~Owner : %s~n~Entrance Fee : ~g~$%d ~w~Level : %d ~n~to enter type /enter",BizzInfo[h][bDiscription],BizzInfo[h][bOwner],BizzInfo[h][bEntcost],BizzInfo[h][bLevel]);
						}
						else
						{
							format(string, sizeof(string), "~w~%s~w~~n~This Business is for sale~n~Cost: ~g~$%d ~w~Level : %d ~n~to buy this Business type /buybiz",BizzInfo[h][bDiscription],BizzInfo[h][bValue],BizzInfo[h][bLevel]);
						}
						GameTextForPlayer(i, string, 5000, 3);
						return 1;
					}
				}
			}
		}
	}
	return 1;
}

/*public IdleKick()
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] < 100 || FugitiveCore[playerid] == 1)
		{
			GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);
			//printf("player %d\n x = %f\n y = %f\n z = %f\n x2 = %f\n y2 = %f\n z2 = %f\n",i, PlayerPos[i][0],PlayerPos[i][1],PlayerPos[i][2],PlayerPos[i][3],PlayerPos[i][4],PlayerPos[i][5]);
			if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
			{
				SendClientMessageToAll(COLOR_RED, "SERVER: Idle Kick ACTIVE.");
				Kick(i);
			}
			PlayerPos[i][3] = PlayerPos[i][0];
			PlayerPos[i][4] = PlayerPos[i][1];
			PlayerPos[i][5] = PlayerPos[i][2];
		}
	}
}
*/
/*public Idleafk()
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] < 104 || FugitiveCore[playerid] == 1)
		{
			GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);
			//printf("player %d\n x = %f\n y = %f\n z = %f\n x2 = %f\n y2 = %f\n z2 = %f\n",i, PlayerPos[i][0],PlayerPos[i][1],PlayerPos[i][2],PlayerPos[i][3],PlayerPos[i][4],PlayerPos[i][5]);
			if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
			{
			        new string[256];
			        new cmd[256];
					space = strfind(cmd, "", true, 0);
					GetPlayerName(i, nick, sizeof(nick));
					strmid(msg, cmd, space+1, strlen(cmd), sizeof(msg));
					format(string, sizeof(string), "%s is auto away from keyboard.", nick, msg);
					SendClientMessageToAll(COLOR_LIGHTBLUE, string);
					format(string,sizeof(string),"~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~%s ~w~is auto afk.", nick, msg);
					GameTextForAll(string,3000,3);

			}
			PlayerPos[i][3] = PlayerPos[i][0];
			PlayerPos[i][4] = PlayerPos[i][1];
			PlayerPos[i][5] = PlayerPos[i][2];
		}
	}
	return 1;
}*/

public AntiCamp()
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			if(SafeTime[i] > 0)
			{
				SafeTime[i]--;
			}
			if(SafeTime[i] == 1)
			{
				if(gPlayerAccount[i] == 1 && gPlayerLogged[i] == 0)
				{
					SendClientMessage(i, COLOR_WHITE, "HINT: You can now login by typing /login <password>");
					//Kick(i);
				}
			}
		}
	}
}

public AntiTeleport()
{
	new plname[MAX_PLAYER_NAME];
	new string[256];
	new Float:maxspeed = 160.0;
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if (IsPlayerConnected(i) == 1 && (GetPlayerState(i) == 2))//123456
		{
			GetPlayerPos(i, TelePos[i][3], TelePos[i][4], TelePos[i][5]);
			if(TelePos[i][5] > 550.0)
			{
				TelePos[i][0] = 0.0;
				TelePos[i][1] = 0.0;
			}
			//printf("player %d\n x = %f\n y = %f\n z = %f\n x2 = %f\n y2 = %f\n z2 = %f\n",i, PlayerPos[i][0],PlayerPos[i][1],PlayerPos[i][2],PlayerPos[i][3],PlayerPos[i][4],PlayerPos[i][5]);
			if(TelePos[i][0] != 0.0)
			{
				new Float:xdist = TelePos[i][3]-TelePos[i][0];
				new Float:ydist = TelePos[i][4]-TelePos[i][1];
				new Float:sqxdist = xdist*xdist;
				new Float:sqydist = ydist*ydist;
				new Float:distance = (sqxdist+sqydist)/31;
				if(gSpeedo[i] == 2)
				{
					if(distance <10)
					{
						format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph :   ~w~%.0f",distance);
					}
					if(distance > 10 && distance < 100)
					{
						format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph :  ~w~%.0f",distance);
					}
					if(distance > 100)
					{
						format(string, 256, "~n~~n~~n~~n~~n~~n~~n~~g~mph : ~w~%.0f",distance);
					}
					GameTextForPlayer(i, string, 2000, 5);
				}
				if(distance > maxspeed && PlayerInfo[i][pAdmin] <= 101 || FugitiveCore[i] == 1)
				{
					new tmpcar = GetPlayerVehicleID(i);
					if(!IsAPlane(tmpcar))
					{
						GetPlayerName(i, plname, sizeof(plname));
						format(string, 256, "AdmWarning: [%d]%s %.0f mph",i,plname,distance);
						Speeder = i;
						ABroadCast(COLOR_YELLOW,string,1);
					}
				}
			}
			if(TelePos[i][5] < 550.0 && TelePos[i][3] != 0.0)
			{
				TelePos[i][0] = TelePos[i][3];
				TelePos[i][1] = TelePos[i][4];
			}
		}
	}
}


RaceSpec(playerid)
{
	new tmplaps;
	new bestracer;
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1 && LapCount[i] > 0)
		{
			if(LapCount[i] > tmplaps)
			{
				bestracer = i;
				tmplaps = LapCount[i];
			}
		}
	}
	if(Spectate[playerid] != bestracer)
	{
		new sstring[256];
		new giveplayer[MAX_PLAYER_NAME];
		GetPlayerName(bestracer, giveplayer, sizeof(giveplayer));
		format(sstring, sizeof(sstring), "~w~%s",giveplayer);
		GameTextForPlayer(playerid, sstring, 5000, 1);
		Spectate[playerid] = bestracer;
	}
	return 1;
}

BestPlayer(playerid)
{
	new bestplayer;
	bestplayer = lastkiller;
	if(gSuperCop != INVALID_PLAYER_ID)
	{
		bestplayer = gSuperCop;
	}
	if(Spectate[playerid] != bestplayer)
	{
		new sstring[256];
		new giveplayer[MAX_PLAYER_NAME];
		GetPlayerName(bestplayer, giveplayer, sizeof(giveplayer));
		format(sstring, sizeof(sstring), "~w~%s",giveplayer);
		GameTextForPlayer(playerid, sstring, 5000, 1);
		Spectate[playerid] = bestplayer;
	}
	return 1;
}

PenDelay(playerid)
{
	new bestplayer;
	new sstring[256];
	bestplayer = gPublicEnemy;
	if(bestplayer == INVALID_PLAYER_ID)
	{
		TVMode[playerid] = 1;
		GameTextForPlayer(playerid, "~w~                True~n~                   ~b~Crime", 5000, 6);
		BestPlayer(playerid);
		return 1;
	}
	if(Spectate[playerid] != bestplayer)
	{
		new giveplayer[MAX_PLAYER_NAME];
		GetPlayerName(bestplayer, giveplayer, sizeof(giveplayer));
		format(sstring, sizeof(sstring), "~p~Starring ~n~~w~%s",giveplayer);
		GameTextForPlayer(playerid, sstring, 5000, 1);
		Spectate[playerid] = bestplayer;
	}
	return 1;
}

SpeedDelay(playerid)
{
	new bestplayer;
	new sstring[256];
	bestplayer = Speeder;
	if(bestplayer == INVALID_PLAYER_ID)
	{
		TVMode[playerid] = 1;
		GameTextForPlayer(playerid, "~w~                True~n~                   ~b~Crime", 5000, 6);
		BestPlayer(playerid);
		return 1;
	}
	if(Spectate[playerid] != bestplayer)
	{
		new giveplayer[MAX_PLAYER_NAME];
		GetPlayerName(bestplayer, giveplayer, sizeof(giveplayer));
		format(sstring, sizeof(sstring), "~p~Starring ~n~~w~%s",giveplayer);
		GameTextForPlayer(playerid, sstring, 5000, 1);
		Spectate[playerid] = bestplayer;
	}
	return 1;
}


DMPlayer(playerid)
{
	new bestplayer;
	bestplayer = DmHiPlayer;
	if(bestplayer == INVALID_PLAYER_ID)
	{
		TVMode[playerid] = 1;
		GameTextForPlayer(playerid, "~w~                True~n~                   ~b~Crime", 5000, 6);
		BestPlayer(playerid);
		return 1;
	}
	if(Spectate[playerid] != bestplayer)
	{
		new sstring[256];
		new giveplayer[MAX_PLAYER_NAME];
		GetPlayerName(bestplayer, giveplayer, sizeof(giveplayer));
		format(sstring, sizeof(sstring), "~w~%s~n~  score:~r~ %d",giveplayer,DmScore[bestplayer]);
		GameTextForPlayer(playerid, sstring, 5000, 1);
		Spectate[playerid] = bestplayer;
	}
	return 1;
}

public InHouse()
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new string[256];
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			if(PlayerInfo[i][pLocal] != 255)
			{
				new house = PlayerInfo[i][pLocal];
				GetPlayerPos(i, oldposx, oldposy, oldposz);
				if(oldposz != 0.0)
				{
					if(oldposz < 600.0)
					{
						//new string[64];
						//format(string, sizeof(string), "~w~rexit");
						if(house == 10000)
						{
							if (!PlayerToPoint(6, i,-2724.0,217.9,4.1))
							{
								if (GetPlayerState(i) == 2)
								{
									new tmpcar = GetPlayerVehicleID(i);
									SetVehiclePos(tmpcar, 1520.1,-1473.2,9.2);
									SetVehicleZAngle(tmpcar, 270.0);
								}
								else
								{
									SetPlayerPos(i, 1520.1,-1473.2,9.2);
								}
								new oldcash = gSpentCash[i];
								new Total = GetPlayerMoney(i) - oldcash;
								printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(i),oldcash);
								new name[MAX_PLAYER_NAME];
								SBizzInfo[1][sbTakings] = SBizzInfo[1][sbTakings]-Total;
								GetPlayerName(i, name, sizeof(name));
								format(string,128,"<< %s has left the modshop with $%d >>",name,Total);
								PayLog(string);
								gSpentCash[i] = 0;
								TelePos[i][0] = 0.0;
								TelePos[i][1] = 0.0;
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
								Spectate[i] = 255;
							}
						}
						if(house > 10000)
						{
							new tmpcar = GetPlayerVehicleID(i);
							if (!PlayerToPoint(6, i,1040.6,-1021.0,31.7) && house == 10001 ||!PlayerToPoint(6, i,-2720.5,217.5,4.1) && house == 10002 ||!PlayerToPoint(6, i,2644.6,-2044.9,13.3) && house == 10003)
							{
								if (GetPlayerState(i) == 2)
								{
									SetVehiclePos(tmpcar, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]);
									SetVehicleZAngle(tmpcar, HouseCarSpawns[tmpcar-1][3]);
								}
								else
								{
									SetPlayerPos(i, HouseCarSpawns[tmpcar-1][0], HouseCarSpawns[tmpcar-1][1], HouseCarSpawns[tmpcar-1][2]);
								}
								new oldcash = gSpentCash[i];
								new Total = GetPlayerMoney(i) - oldcash;
								printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(i),oldcash);
								new name[MAX_PLAYER_NAME];
								SBizzInfo[1][sbTakings] = SBizzInfo[1][sbTakings]-Total;
								GetPlayerName(i, name, sizeof(name));
								format(string,128,"<< %s has left the homemodshop with $%d >>",name,Total);
								PayLog(string);
								gSpentCash[i] = 0;
								TelePos[i][0] = 0.0;
								TelePos[i][1] = 0.0;
								PlayerInfo[i][pLocal] = 255;
								SetPlayerInterior(i,0);
								PlayerInfo[i][pInt] = 0;
								Spectate[i] = 255;
							}
						}
						if(house >= 102 && house != 10000)
						{
							if(house == 7+1000 && PlayerInfo[i][pPbiskey] != 7) //casino) //casino
							{
								new oldcash = gSpentCash[i];
								new Total = GetPlayerMoney(i) - oldcash;
								printf("Total %d = GetPlayerMoney(playerid) %d - oldcash %d",Total,GetPlayerMoney(i),oldcash);
								new name[MAX_PLAYER_NAME];
								BizzInfo[7][bTakings] = BizzInfo[7][bTakings]-Total;
								GetPlayerName(i, name, sizeof(name));
								format(string,128,"<< %s has left the casino with $%d >>",name,Total);
								PayLog(string);
								gSpentCash[i] = 0;
							}
							SetPlayerPos(i, BizzInfo[house-102][bEntrancex], BizzInfo[house-102][bEntrancey],BizzInfo[house-102][bEntrancez]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							SetPlayerVirtualWorld(i,0);
							PlayerInfo[i][pInt] = 0;
						}
						else if(house < 102 && house != 10000)
						{
							SetPlayerPos(i, HouseInfo[house][hEntrancex], HouseInfo[house][hEntrancey],HouseInfo[house][hEntrancez]); // Warp the player
							PlayerInfo[i][pLocal] = 255;
							SetPlayerInterior(i,0);
							SetPlayerVirtualWorld(i,0);
							PlayerInfo[i][pInt] = 0;
						}
					}
				}
			}
		}
	}
	return 1;
}



public IsStringAName(string[])
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			new testname[MAX_PLAYER_NAME];
			GetPlayerName(i, testname, sizeof(testname));
			//printf("IsS:testname = %s : string = %s",testname,string);
			if(strcmp(testname, string, true, strlen(string)) == 0)
			{
				//printf("TRUE IsS:testname = %s : string = %s",testname,string);
				return 1;
			}
		}
	}
	return 0;
}

public GetPlayerID(string[])
{
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i) == 1)
		{
			new testname[MAX_PLAYER_NAME];
			GetPlayerName(i, testname, sizeof(testname));
			//printf("GetP:testname = %s : string = %s",testname,string);
			if(strcmp(testname, string, true, strlen(string)) == 0)
			{
				//printf("TRUE GetP:testname = %s : string = %s playerid %d",testname,string, i);
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

public OnPlayerText(playerid, text[])
{
	if(strfind(text,"%s",true,0)!=-1){
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot say 'Percent S' on this server.");
	    return 0;
	}
	if(Mute[playerid] == 1)
	{
		SendClientMessage(playerid, TEAM_CYAN_COLOR, "You cannot speak, you have been silenced");
		return 0;
	}
	if(Mobile[playerid] != 255)
	{
		new string [128];
		new sendername[MAX_PLAYER_NAME];
		new idx;
		new tmp[MAX_PLAYER_NAME];
		tmp = strtok(text, idx);
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s Says (cellphone): %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		//printf("callers line %d called %d caller %d",Mobile[Mobile[playerid]],Mobile[playerid],playerid);
		if(Mobile[playerid] == 914)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Sorry I don't understand?");
				return 0;
			}
			new turner[MAX_PLAYER_NAME];
			new wanted[128];
			GetPlayerName(playerid, turner, sizeof(turner));
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: We have alerted all units in the area.");
			SendClientMessage(playerid, TEAM_CYAN_COLOR, "Thank you for reporting this incident");
			format(wanted, sizeof(wanted), "Dispatch: All Units IA: Caller: %s",turner);
			SendTeamBeepMessage(1, TEAM_CYAN_COLOR, wanted);
			format(wanted, sizeof(wanted), "Dispatch: Incident: %s",text);
			SendTeamMessage(1, TEAM_CYAN_COLOR, wanted);
			if(FlashTime[playerid] == 0){FlashTime[playerid] = 10;}
			SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
			Mobile[playerid] = 255;
			return 0;
		}
		if(Mobile[playerid] == 913)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "**EMERGENCY**: Sorry i dont understand?");
				return 0;
			}
			if ((strcmp("no", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("no")))
			{
				new turner[MAX_PLAYER_NAME];
				new wanted[128];
				GetPlayerName(playerid, turner, sizeof(turner));
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Police HQ: We have alerted all units in the area.");
				SendClientMessage(playerid, COLOR_DBLUE, "Thank you for reporting this crime");
				format(wanted, sizeof(wanted), "Police HQ: All Units APB: Reporter: %s",turner);
				SendTeamBeepMessage(2, TEAM_BLUE_COLOR, wanted);
				format(wanted, sizeof(wanted), "Police HQ: Crime: %s, Suspect: Unknown",PlayerCrime[playerid][pAccusing]);
				SendTeamMessage(2, TEAM_BLUE_COLOR, wanted);
				if(FlashTime[playerid] == 0){FlashTime[playerid] = 10;}
				SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
				Mobile[playerid] = 255;
				return 0;
			}
			new badguy;
			if(IsStringAName(tmp))
			{
				badguy = GetPlayerID(tmp);
			}
			else
			{
				badguy = strval(tmp);
			}
			if (gTeam[badguy] == 2 || gTeam[badguy] == 1)
			{
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Police HQ: You will have to contact internal affairs. This is an emergency line");
				SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
				Mobile[playerid] = 255;
				return 0;
			}
			if (gTeam[badguy] >= 4)
			{
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Police HQ: Units are already assigned to that case");
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Thank you for reporting this crime");
				SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
				Mobile[playerid] = 255;
				return 0;
			}
			if (badguy == playerid)
			{
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Police HQ: Dont Fool Around, This is an emergency line.");
				SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
				Mobile[playerid] = 255;
				return 0;
			}
			if (IsPlayerConnected(badguy))
			{
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Police HQ: We have alerted all units in the area.");
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Thank you for reporting this crime");
				SetPlayerCriminal(badguy,playerid, PlayerCrime[playerid][pAccusing],0,0);
				if(FlashTime[badguy] == 0){FlashTime[playerid] = 10;}
				if(FlashTime[playerid] == 0){FlashTime[playerid] = 10;}
				SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
				Mobile[playerid] = 255;
				return 0;
			}
			else
			{
				format(string, sizeof(string), "Police HQ: I have no Information on %s, are you sure thats the right name?",tmp);
				SendClientMessage(playerid, TEAM_BLUE_COLOR, string);
				return 0;
			}
		}
		if(Mobile[playerid] == 912)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "**EMERGENCY**: Sorry i dont understand?");
				return 0;
			}
			strmid(PlayerCrime[playerid][pAccusing], text, 0, strlen(text), 255);
			SendClientMessage(playerid, TEAM_BLUE_COLOR, "Police HQ: If you know the assailant's name or part of it say it now or just say no.");
			Mobile[playerid] = 913;
			return 0;
		}
		if(Mobile[playerid] == 911)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "**EMERGENCY**: Sorry i dont understand, police or paramedic?");
				return 0;
			}
			else if ((strcmp("police", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("police")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "**EMERGENCY**: I am patching you to Police HQ, please hold.");
				Mobile[playerid] = 912;
				SendClientMessage(playerid, TEAM_BLUE_COLOR, "Police HQ: Please give me a short description of the crime.");
				return 0;
			}
			else if ((strcmp("paramedic", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("paramedic")))
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "**EMERGENCY**: I am patching you to Paramedic HQ, please hold.");
				Mobile[playerid] = 914;
				SendClientMessage(playerid, TEAM_CYAN_COLOR, "Dispatch: Please give me a short description of the Incident.");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ALLDEPT, "**EMERGENCY**: Sorry i dont understand, police or paramedic?");
				return 0;
			}
		}
 		/*if(Mobile[playerid] == 958)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** San Air: Sorry i dont understand, LS,SF,Or LV?");
				return 0;
			}
			SendClientMessage(playerid,COLOR_ORANGE, "** SanAir: Your Flight has been booked...");
			format(string, sizeof(string), "** SanAir: Thank you For Choosing San Air, Have a great day!");
			SendClientMessage(playerid,COLOR_ORANGE, string);
			SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
			Mobile[playerid] = 255;
			return 0;
		}*/
		if(Mobile[playerid] == 956)
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** San Air: Sorry i dont understand, LS,SF,Or LV?");
				return 0;
			}
			else if ((strcmp("LS", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("LS")))
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: okay, one Flight to Los Santos, just one more thing.");
				Mobile[playerid] = 957;
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: Would you like a Commercial Flight or Private?");
				return 0;
			}
			else if ((strcmp("SF", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("SF")))
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: okay, one Flight to San Fierro, just one more thing.");
				Mobile[playerid] = 957;
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: Would you like a Commercial Flight or Private?");
				return 0;
			}
			else if ((strcmp("LV", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("LV")))
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: okay, one Flight to Las Venturas, just one more thing.");
				Mobile[playerid] = 957;
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: Would you like a Commercial Flight or Private?");
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** San Air: Sorry i dont understand, LS,SF,Or LV?");
				return 0;
			}
		}
		if(Mobile[playerid] == 957)//Combuyticks
		{
			if(!strlen(tmp))
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** San Air: Sorry i dont understand, Commercial or Private?");
				return 0;
			}
			else if ((strcmp("Commercial", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Commercial")))
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: ok Commercial Flight has been booked to your destination.");
				Mobile[playerid] = 255;
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: Processing the tickets...");
				SendClientMessage(playerid,COLOR_ORANGE, "** SanAir: Your Flight has been booked...");
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: Thank you For Choosing San Air, Have a great day!");
				SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
				GiveMoney(playerid,-3500);
				format(string, sizeof(string), "~r~-$%d", 3500);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				pCTicket[playerid]++;
				return 0;
			}
			else if ((strcmp("Private", tmp, true, strlen(tmp)) == 0) && (strlen(tmp) == strlen("Private")))
			{
				SendClientMessage(playerid, COLOR_ORANGE, "SanAir: ok Private Flight has been booked to your destination.");
				Mobile[playerid] = 255;
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: Processing the tickets...");
				SendClientMessage(playerid,COLOR_ORANGE, "** SanAir: Your Flight has been booked...");
				SendClientMessage(playerid, COLOR_ORANGE, "** SanAir: Thank you For Choosing San Air, Have a great day!");
				SendClientMessage(playerid, COLOR_GRAD2, "   They Hung Up...");
				GiveMoney(playerid,-7200);
				PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
				format(string, sizeof(string), "~r~-$%d", 7200);
				pPTicket[playerid]++;
				return 0;
			}
			else
			{
				SendClientMessage(playerid, COLOR_ORANGE, "** San Air: Sorry i dont understand, Commercial or Private?");
				return 0;
			}
		}
		if(IsPlayerConnected(Mobile[playerid]) == 1 && Mobile[Mobile[playerid]] == playerid)
		{
			SendClientMessage(Mobile[playerid], COLOR_YELLOW,string);
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW,"Theres nobody there");
		}
		return 0;
	}
	if (realchat)
	{
		new string [128];
		new sendername[MAX_PLAYER_NAME];
		GetPlayerName(playerid, sendername, sizeof(sendername));
		format(string, sizeof(string), "%s Says %s", sendername, text);
		ProxDetector(20.0, playerid, string,COLOR_FADE1,COLOR_FADE2,COLOR_FADE3,COLOR_FADE4,COLOR_FADE5);
		return 0;
	}
	return 1;
}

SetCamBack(playerid)
{
	new Float:plocx,Float:plocy,Float:plocz;
	GetPlayerPos(playerid, plocx, plocy, plocz);
	SetPlayerPos(playerid, -1863.15, -21.6598, 1060.15); // Warp the player
	SetPlayerInterior(playerid,14);
	//SetPlayerPos(playerid, plocx, plocy, plocz); // Warp the player
	//SetPlayerInterior(playerid,0);
}

public FixHour(hour)
{
	//if (gdebug >= 2){printf("DEBUG FixHour(%d)",hour);}
	hour = timeshift+hour;
	if (hour < 0)
	{
		hour = hour+24;
	}
	else if (hour > 23)
	{
		hour = hour-24;
	}
	shifthour = hour;
	return 1;
}


public AddsOn()
{
	if (gdebug >= 2){printf("DEBUG AddsOn()");}
	adds=1;
	return 1;
}


stock GetDistanceToVehicle(playerid,vehicleid,meters)
{
	new Float:x1,Float:x,Float:y1,Float:y,Float:z1,Float:z,s;
	GetVehiclePos(vehicleid,x1,y1,z1);
	GetPlayerPos(playerid,x,y,z);
	if(x > x1) if(x - x1 < meters) s++;
	if(x < x1) if(x1 - x < meters) s++;
	if(y > y1) if(y - y1 < meters) s++;
	if(y < y1) if(y1 - y < meters) s++;
	if(z > z1) if(z - z1 < meters) s++;
	if(z1 > z) if(z1 - z < meters) s++;
	if(s == 3) return true;
	return false;
}




//---- /Unlock
Unlock(playerid){
	if ((IsPlayerAdmin(playerid)) || PlayerInfo[playerid][pAdmin] >= 101 || FugitiveCore[playerid] == 1)
	{
		new i=0;
		while(i<MAX_VEHICLES)
		{
		    SetVehicleParamsForPlayer(i,playerid,0,0);
		    i++;
		}
		SendClientMessage(playerid,0xFFFFFFFF,"Unlocked vehicles.");
		return 1;
	}
	return 1;
}

stock GiveMoney(playerid,amount)
{
	gMon[playerid]+=amount;
	return GivePlayerMoney(playerid,amount);
}

/*public CashCheck()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	if(gMon[i] < GetPlayerMoney(i))
	{
		CashReport(i);
	}
}

stock CashReport(playerid)
{
	new player[24],str[100];
	GetPlayerName(playerid,player,24);
	format(str,sizeof(str),"[Possible] Cheater detected: Player [%s] id:[%d] using [Cash]",player,playerid);
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if((PlayerInfo[i][pAdmin] >= 102 || IsPlayerAdmin(i)) && gAAlert[i]!=0)
		{
			SendClientMessage(i,COLOR_YELLOW,str);
		}
	}
}*/

public LottoTime(){
	new string[256];
	if(gLottoTime==0){
		gLotto = random(250)+1; // to test, should be 1 to 25
		//gLotto = random(2)+1; // to test, should be 1 to 2
		format(string,sizeof(string),"Winning lottery number is %d Thank you for playing!",gLotto);
		SendClientMessageToAll(COLOR_YELLOW,string);
		for(new i=0;i<MAX_PLAYERS;i++){
			if(gLottoTicket[i]==gLotto){ gLottoWinners++; gLottoWinner[i]=1; }
		}
		if(gLottoWinners==0){ format(string,sizeof(string),"No winners. Pool now %d",gLottoPool+1); SendClientMessageToAll(COLOR_BLUE,string);}
		new winnername[24];
		if(gLottoWinners>0){
			if(gLottoWinners>1){ gLottoPool=gLottoPool/gLottoWinners; }
			for(new i=0;i<MAX_PLAYERS;i++){
				if(gLottoWinner[i]==1){
					GetPlayerName(i,winnername,sizeof(winnername));
					format(string,sizeof(string),"%s has won %d exp in Sanders' Lottery!",winnername,gLottoPool);
					SendClientMessageToAll(COLOR_BLUE,string);
					PlayerInfo[i][pExp]=PlayerInfo[i][pExp]+gLottoPool;
					PlayerInfo[i][pLottoXP]=gLottoPool;
				}
			}
			gLottoPool=0;
		}
		for(new i=0;i<MAX_PLAYERS;i++){gLottoWinner[i]=0;gLottoTicket[i]=0;} //resets the tickets for everyone after each drawing.
		gLottoTime=9;
		gLottoPool++; //give a starting XP for next lotto
		gLottoWinners=0;
	}
	else{
		/*format(string,sizeof(string),"Lotto coming up in %d minutes! Type /lotto [number] to purchase a ticket!",gLottoTime);
		SendClientMessageToAll(COLOR_YELLOW,string);*/ //Re-Enable to let ppl know about it
		gLottoTime--;//I figure this will get rid of 1 minute
		//gLottoPool++;//Adds another XP to the pot ...INSANE!!! that means each one would be worth at least 9 XP!
	}
}
Fuck(playa){
			SetPlayerPos(playa,-1119.63,-1908.58,75.99);
			GameTextForPlayer(playa, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 1000, 0);
			GameTextForPlayer(playa, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 2000, 1);
			GameTextForPlayer(playa, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 3000, 2);
			GameTextForPlayer(playa, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 4000, 3);
			GameTextForPlayer(playa, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 5000, 4);
			GameTextForPlayer(playa, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 6000, 5);
			GameTextForPlayer(playa, "¤¶§!$$%&'()*+,-./01~!@#$^&*()_-+={[}]:;'<,>.?/", 7000, 6);
}
IsNumeric(const string[])
{
	for (new i = 0, j = strlen(string); i < j; i++)
	{
	    if (string[i] > '9' || string[i] < '0') return 0;
	}
	return 1;
}

/*public i1111()
{
	for(new i=0; i<MAX_PLAYERS; i++) if(IsPlayerConnected(i))
	{
		if(GetPlayerState(i) == 2)
		{
		    new str[36];
		    new v = GetPlayerVehicleID(i);
		    if(vFuel[v] > 60 && vFuel[v] > 60)
			{
				format(str,sizeof(str),"~n~~n~~n~~n~~n~~n~~b~Fuel:~g~ %d%%",vFuel[v]);
				GameTextForPlayer(i,str,1200,5);
			}
			if(vFuel[v] < 60 && vFuel[v] > 30)
			{
				format(str,sizeof(str),"~n~~n~~n~~n~~n~~n~~b~Fuel:~y~ %d%%",vFuel[v]);
				GameTextForPlayer(i,str,1200,5);
			}
			if(vFuel[v] < 30)
			{
				format(str,sizeof(str),"~n~~n~~n~~n~~n~~n~~b~Fuel:~r~ %d%%",vFuel[v]);
				GameTextForPlayer(i,str,1200,5);
			}
		}
	}
}

public Deplete_Fuel()
{
	for(new i=0; i<MAX_PLAYERS; i++) if(IsPlayerConnected(i))
	{
	    if(GetPlayerState(i) == 2)
	    {
	        new v = GetPlayerVehicleID(i);
	        if(vFuel[v]>0){
				vFuel[v]-=1;
			}
			else{RemovePlayerFromVehicle(i);for(new j=0;j<MAX_PLAYERS;j++){SetVehicleParamsForPlayer(v,j,0,1);}}
	    }
	}
}*/
public DestroyCNN()
{
	TextDrawHideForAll(CNN);
	TextDrawDestroy(CNN);
	gCNN=0;
}
public OnVehicleMod(vehicleid, componentid)
{
	new string[256];
	format(string,sizeof(string),"Vehicle componentid %d",componentid);
	for(new i=0;i<MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i)==vehicleid){
			SendClientMessage(i,COLOR_BLUE,string);
		}
	}
//	printf("Component added %d",componentid);
	return 1;
}
public OnVehiclePaintjob(vehicleid, paintjobid)
{
	new string[256];
	format(string,sizeof(string),"Vehicle PaintJob %d",paintjobid);
	for(new i=0;i<MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i)==vehicleid){
			SendClientMessage(i,COLOR_BLUE,string);
		}
	}
//	SendClientMessage(0,COLOR_BLUE,string);
	return 1;
}
public OnVehicleRespray(vehicleid, color1, color2)
{
	new string[256];
	format(string,sizeof(string),"Vehicle Respray Colors %d %d",color1,color2);
	for(new i=0;i<MAX_PLAYERS;i++){
	    if(IsPlayerConnected(i) && IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i)==vehicleid){
			SendClientMessage(i,COLOR_BLUE,string);
		}
	}
//	SendClientMessage(0,COLOR_BLUE,string);
	return 1;
}
public OnPlayerSelectedMenuRow(playerid, row)
{
	new Menu:mymenu;
	mymenu=GetPlayerMenu(playerid);
	if(mymenu==Upgrades)
	{
	    switch(row)
		{
		    case 0:ShowMenuForPlayer(WeaponUpgrades,playerid);
		    //case 1:ShowMenuForPlayer(AmmoUpgrades,playerid);
		    case 1:ShowMenuForPlayer(ExtraUpgrades,playerid);
		    //case 2:ShowMenuForPlayer(HouseUpgrades,playerid);
		}
	}
	if(mymenu==WeaponUpgrades)
	{
	    if(row==0){ShowMenuForPlayer(PistolUpgrades,playerid);}
	    if(row==1){ShowMenuForPlayer(ShotgunUpgrades,playerid);}
	    if(row==2){ShowMenuForPlayer(SubMachineUpgrades,playerid);}
	    if(row==3){ShowMenuForPlayer(AssaultUpgrades,playerid);}
	    if(row==4){ShowMenuForPlayer(RifleUpgrades,playerid);}
	    if(row==5){ShowMenuForPlayer(HeavyUpgrades,playerid);}
	    if(row==6){ShowMenuForPlayer(ThrownUpgrades,playerid);}
	}
	if(mymenu==PistolUpgrades)
	{
	    if(PlayerInfo[playerid][gPupgrade]>=1)
		{
		    if(row==0){if(PlayerInfo[playerid][pLevel]>=1){PlayerInfo[playerid][pGun1] = 23;TellSpawnWeapon(playerid,"Silenced Pistol",Upgrades);}}
		    if(row==1){if(PlayerInfo[playerid][pLevel]>=2){PlayerInfo[playerid][pGun1] = 22;TellSpawnWeapon(playerid,"Colt 45",Upgrades);}}
		    if(row==2){if(PlayerInfo[playerid][pLevel]>=6){PlayerInfo[playerid][pGun1] = 24;TellSpawnWeapon(playerid,"Desert Eagle",Upgrades);}}
		    if(row==3){if(PlayerInfo[playerid][pLevel]>=1){PlayerInfo[playerid][pAmmo1] = PlayerInfo[playerid][pAmmo1]+50;TellSpawnWeapon(playerid,"Pistol Ammo",PistolUpgrades);}}//ammo
	    }
	    else{SendClientMessage(playerid,COLOR_GRAD6,"You have no upgrade points.");TogglePlayerControllable(playerid,1);}
	}
	if(mymenu==ShotgunUpgrades)
	{
	    if(PlayerInfo[playerid][gPupgrade]>=1)
		{//if(row==){if(PlayerInfo[playerid][pLevel]>=){}} //EXAMPLE TO COPY
		    if(row==0){if(PlayerInfo[playerid][pLevel]>=4){PlayerInfo[playerid][pGun2] = 25;TellSpawnWeapon(playerid,"Shotgun",Upgrades);}}//shotgun
		    if(row==1){if(PlayerInfo[playerid][pLevel]>=8){PlayerInfo[playerid][pGun2] = 26;TellSpawnWeapon(playerid,"Sawnoff Shotgun",Upgrades);}}
		    if(row==2){if(PlayerInfo[playerid][pLevel]>=5){PlayerInfo[playerid][pGun2] = 27;TellSpawnWeapon(playerid,"SPAZ 12",Upgrades);}}
	    	if(row==3){if(PlayerInfo[playerid][pLevel]>=1){PlayerInfo[playerid][pAmmo2] = PlayerInfo[playerid][pAmmo2]+50;TellSpawnWeapon(playerid,"Shotgun Ammo",ShotgunUpgrades);}}//ammo
		}
		else{SendClientMessage(playerid,COLOR_GRAD6,"You have no upgrade points.");TogglePlayerControllable(playerid,1);}
	}
	if(mymenu==SubMachineUpgrades)
	{
	    if(PlayerInfo[playerid][gPupgrade]>=1)
		{
		    if(row==0){if(PlayerInfo[playerid][pLevel]>=9){PlayerInfo[playerid][pGun3] = 32;TellSpawnWeapon(playerid,"Tec 9",Upgrades);}}
		    if(row==1){if(PlayerInfo[playerid][pLevel]>=7){PlayerInfo[playerid][pGun3] = 28;TellSpawnWeapon(playerid,"Mac 10",Upgrades);}}
			if(row==2){if(PlayerInfo[playerid][pLevel]>=3){PlayerInfo[playerid][pGun3] = 29;TellSpawnWeapon(playerid,"MP5",Upgrades);}}
	    	if(row==3){if(PlayerInfo[playerid][pLevel]>=1){PlayerInfo[playerid][pAmmo3] = PlayerInfo[playerid][pAmmo3]+100;TellSpawnWeapon(playerid,"Sub Machine Gun Ammo",SubMachineUpgrades);}}//ammo
	    }
	    else{SendClientMessage(playerid,COLOR_GRAD6,"You have no upgrade points.");TogglePlayerControllable(playerid,1);}
	}
	if(mymenu==AssaultUpgrades)
	{
	    if(PlayerInfo[playerid][gPupgrade]>=1)
		{
		    if(row==0){if(PlayerInfo[playerid][pLevel]>=9){PlayerInfo[playerid][pGun4] = 30;TellSpawnWeapon(playerid,"AK 47",Upgrades);}}
		    if(row==1){if(PlayerInfo[playerid][pLevel]>=10){PlayerInfo[playerid][pGun4] = 31;TellSpawnWeapon(playerid,"M4",Upgrades);}}
	    	if(row==2){if(PlayerInfo[playerid][pLevel]>=1){PlayerInfo[playerid][pAmmo4] = PlayerInfo[playerid][pAmmo4]+50;TellSpawnWeapon(playerid,"Assault Rifle Ammo",AssaultUpgrades);}}//ammo
	    }
	    else{SendClientMessage(playerid,COLOR_GRAD6,"You have no upgrade points.");TogglePlayerControllable(playerid,1);}
	}
	if(mymenu==RifleUpgrades)
	{
	    if(PlayerInfo[playerid][gPupgrade]>=1)
		{
		    if(row==0){if(PlayerInfo[playerid][pLevel]>=11){PlayerInfo[playerid][pGun5] = 33;TellSpawnWeapon(playerid,"Cuntgun",Upgrades);}}
		    if(row==1){if(PlayerInfo[playerid][pLevel]>=13){PlayerInfo[playerid][pGun5] = 34;TellSpawnWeapon(playerid,"Sniper Rifle",Upgrades);}}
	    	if(row==2){if(PlayerInfo[playerid][pLevel]>=1){PlayerInfo[playerid][pAmmo5] = PlayerInfo[playerid][pAmmo5]+10;TellSpawnWeapon(playerid,"Rifle Ammo",RifleUpgrades);}}//ammo
	    }
	    else{SendClientMessage(playerid,COLOR_GRAD6,"You have no upgrade points.");TogglePlayerControllable(playerid,1);}
	}
	if(mymenu==ThrownUpgrades)
	{
	    if(PlayerInfo[playerid][gPupgrade]>=1)
	    {
	        if(row==0){if(PlayerInfo[playerid][pLevel]>=7){PlayerInfo[playerid][pGun7]=WEAPON_GRENADE;TellSpawnWeapon(playerid,"Grenade",ThrownUpgrades);}}
	        if(row==1){if(PlayerInfo[playerid][pLevel]>=10){PlayerInfo[playerid][pGun7]=WEAPON_SATCHEL;TellSpawnWeapon(playerid,"Satchel",ThrownUpgrades);}}
	        if(row==2){if(PlayerInfo[playerid][pLevel]>=4){PlayerInfo[playerid][pGun7]=WEAPON_MOLTOV;TellSpawnWeapon(playerid,"Molotov",ThrownUpgrades);}}
	        if(row==3){if(PlayerInfo[playerid][pLevel]>=1){PlayerInfo[playerid][pAmmo7]= PlayerInfo[playerid][pAmmo7]+5;TellSpawnWeapon(playerid,"Thrown Ammo",ThrownUpgrades);}}//ammo
	    }
	    else{SendClientMessage(playerid,COLOR_GRAD6,"You have no upgrade points.");TogglePlayerControllable(playerid,1);}
	}
	if(mymenu==HeavyUpgrades)
	{
	    if(PlayerInfo[playerid][gPupgrade]>=1)
		{
			if(row==0){if(PlayerInfo[playerid][pLevel]>=10){PlayerInfo[playerid][pGun6] = WEAPON_FLAMETHROWER;TellSpawnWeapon(playerid,"Flame Thrower",HeavyUpgrades);}}
			if(row==1){if(PlayerInfo[playerid][pLevel]>=15){PlayerInfo[playerid][pGun6] = WEAPON_HEATSEEKER;TellSpawnWeapon(playerid,"Heat Seaker",HeavyUpgrades);}}
			if(row==2){if(PlayerInfo[playerid][pLevel]>=12){PlayerInfo[playerid][pGun6] = WEAPON_ROCKETLAUNCHER;TellSpawnWeapon(playerid,"Rocket Launcher",HeavyUpgrades);}}
		    if(row==3){if(PlayerInfo[playerid][pLevel]>=20){PlayerInfo[playerid][pGun6] = WEAPON_MINIGUN;TellSpawnWeapon(playerid,"Minigun",HeavyUpgrades);}}
		    if(row==4){if(PlayerInfo[playerid][pLevel]>=1){PlayerInfo[playerid][pAmmo6] = PlayerInfo[playerid][pAmmo6]+10;TellSpawnWeapon(playerid,"Heavy Ammo",HeavyUpgrades);}}//Ammo
	    }
	    else{SendClientMessage(playerid,COLOR_GRAD6,"You have no upgrade points.");TogglePlayerControllable(playerid,1);}
	}
/*	if(mymenu==AmmoUpgrades)
	{
	    if(row==0){}
	}*/
	if(mymenu==ExtraUpgrades)
	{
	    if(PlayerInfo[playerid][gPupgrade]>=1){
	        //PlayerInfo[playerid][gPupgrade]--; //This is taken care of with TellSpawnWeapon
			if(row==0){if(PlayerInfo[playerid][pLevel]>=1){if(PlayerInfo[playerid][pSHealth]<100){PlayerInfo[playerid][pSHealth]=PlayerInfo[playerid][pSHealth]+5.0;TellSpawnWeapon(playerid,"Health",Upgrades);}else{SendClientMessage(playerid,COLOR_YELLOW,"You have reached the maximum health upgrade.");TogglePlayerControllable(playerid,1);}}}
			if(row==1){if(PlayerInfo[playerid][pLevel]>=5){if(PlayerInfo[playerid][pSArmour]<150){PlayerInfo[playerid][pSArmour]=PlayerInfo[playerid][pSArmour]+5.0;TellSpawnWeapon(playerid,"Armour",Upgrades);}else{SendClientMessage(playerid,COLOR_YELLOW,"You have reached the maximum armour upgrade.");TogglePlayerControllable(playerid,1);}}}
		}
		else{SendClientMessage(playerid,COLOR_GRAD6,"You have no upgrade points.");TogglePlayerControllable(playerid,1);}
	}
	if(mymenu == elemenu) {
		switch(row) {
			case 0: {MoveObject(Elevator,-2080.1521,886.0850,1006.2477,2);}
			case 1: {MoveObject(Elevator,-2080.1521,886.0850,1100,2);}
			case 2: {MoveObject(Elevator,-2080.1521,886.0850,1200,2);}
		}
	}
	if(mymenu == nielemenu) {
		switch(row) {
			case 0: {MoveObject(NiElevator,-2239.9553,818.0469,49.4453,2);}
			case 1: {MoveObject(NiElevator,-2239.9553,818.0469,1007,2);}
		}
	}

	return 1;
}
TellSpawnWeapon(playerid,weapon[],Menu:menu){
	new string[256];
	PlayerInfo[playerid][gPupgrade]--;
	ShowMenuForPlayer(menu,playerid);
	format(string,sizeof(string),"Spawn Upgrade Purchased: %s %d Upgrades left",weapon,PlayerInfo[playerid][gPupgrade]);
	SendClientMessage(playerid,COLOR_GRAD6,string);
	SetPlayerWeapons(playerid);
}
public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid,1);
	return 1;
}
SetupMenus(){
	Upgrades=CreateMenu("Upgrades",1,100.0,120.0,170.0,25.0);
	AddMenuItem(Upgrades,0,"Weapons");
	AddMenuItem(Upgrades,0,"Extras");
	//AddMenuItem(Upgrades,0,"House");
	WeaponUpgrades=CreateMenu("Weapons",1,100.0,120.0,170.0,25.0);
	AddMenuItem(WeaponUpgrades,0,"Pistols");
	AddMenuItem(WeaponUpgrades,0,"Shotguns");
	AddMenuItem(WeaponUpgrades,0,"Sub Machine Guns");
	AddMenuItem(WeaponUpgrades,0,"Assault Weapons");
	AddMenuItem(WeaponUpgrades,0,"Rifles");
	AddMenuItem(WeaponUpgrades,0,"Heavy Weapons");
	AddMenuItem(WeaponUpgrades,0,"Thrown");
	PistolUpgrades=CreateMenu("Pistols",2,100.0,120.0,170.0,25.0);
	SetMenuColumnHeader(PistolUpgrades,0,"Item");
	SetMenuColumnHeader(PistolUpgrades,1,"Level");
	AddMenuItem(PistolUpgrades,0,"Silenced Pistol");
	AddMenuItem(PistolUpgrades,0,"Colt 45");
	AddMenuItem(PistolUpgrades,0,"Desert Eagle");
	AddMenuItem(PistolUpgrades,0,"Ammo");
	AddMenuItem(PistolUpgrades,1,"2");
	AddMenuItem(PistolUpgrades,1,"2");
	AddMenuItem(PistolUpgrades,1,"6");
	AddMenuItem(PistolUpgrades,1,"1");
	ShotgunUpgrades=CreateMenu("Shotguns",2,100.0,120.0,170.0,25.0);
	SetMenuColumnHeader(ShotgunUpgrades,0,"Item");
	SetMenuColumnHeader(ShotgunUpgrades,1,"Level");
	AddMenuItem(ShotgunUpgrades,0,"Shotgun");
	AddMenuItem(ShotgunUpgrades,0,"Sawnoff Shotgun");
	AddMenuItem(ShotgunUpgrades,0,"Spaz 12");
	AddMenuItem(ShotgunUpgrades,0,"Ammo");
	AddMenuItem(ShotgunUpgrades,1,"4");
	AddMenuItem(ShotgunUpgrades,1,"8");
	AddMenuItem(ShotgunUpgrades,1,"5");
	AddMenuItem(ShotgunUpgrades,1,"1");
	SubMachineUpgrades=CreateMenu("Upgrades",2,100.0,120.0,170.0,25.0);
	SetMenuColumnHeader(SubMachineUpgrades,0,"Item");
	SetMenuColumnHeader(SubMachineUpgrades,1,"Level");
	AddMenuItem(SubMachineUpgrades,0,"Tec 9");
	AddMenuItem(SubMachineUpgrades,0,"Mac 10");
	AddMenuItem(SubMachineUpgrades,0,"MP5");
	AddMenuItem(SubMachineUpgrades,0,"Ammo");
	AddMenuItem(SubMachineUpgrades,1,"9");
	AddMenuItem(SubMachineUpgrades,1,"7");
	AddMenuItem(SubMachineUpgrades,1,"3");
	AddMenuItem(SubMachineUpgrades,1,"1");
	AssaultUpgrades=CreateMenu("Assault",2,100.0,120.0,170.0,25.0);
	SetMenuColumnHeader(PistolUpgrades,0,"Item");
	SetMenuColumnHeader(PistolUpgrades,1,"Level");
	AddMenuItem(AssaultUpgrades,0,"AK47");
	AddMenuItem(AssaultUpgrades,0,"M4");
	AddMenuItem(AssaultUpgrades,0,"Ammo");
	AddMenuItem(AssaultUpgrades,1,"9");
	AddMenuItem(AssaultUpgrades,1,"10");
	AddMenuItem(AssaultUpgrades,1,"1");
	RifleUpgrades=CreateMenu("Rifles",2,100.0,120.0,170.0,25.0);
	SetMenuColumnHeader(RifleUpgrades,0,"Item");
	SetMenuColumnHeader(RifleUpgrades,1,"Level");
	AddMenuItem(RifleUpgrades,0,"Cuntgun");
	AddMenuItem(RifleUpgrades,0,"Sniper Rifle");
	AddMenuItem(RifleUpgrades,0,"Ammo");
	AddMenuItem(RifleUpgrades,1,"11");
	AddMenuItem(RifleUpgrades,1,"13");
	AddMenuItem(RifleUpgrades,1,"1");
	ThrownUpgrades=CreateMenu("Thrown",2,100.0,120.0,170.0,25.0);
	SetMenuColumnHeader(ThrownUpgrades,0,"Item");
	SetMenuColumnHeader(ThrownUpgrades,1,"Level");
	AddMenuItem(ThrownUpgrades,0,"Grenade");
	AddMenuItem(ThrownUpgrades,0,"Sachel Charge");
	AddMenuItem(ThrownUpgrades,0,"Molotov Cocktail");
	AddMenuItem(ThrownUpgrades,0,"Ammo");
	AddMenuItem(ThrownUpgrades,1,"7");
	AddMenuItem(ThrownUpgrades,1,"10");
	AddMenuItem(ThrownUpgrades,1,"4");
	AddMenuItem(ThrownUpgrades,1,"1");
	HeavyUpgrades=CreateMenu("Heavy Weapons",2,100.0,120.0,170.0,25.0);
	SetMenuColumnHeader(HeavyUpgrades,0,"Item");
	SetMenuColumnHeader(HeavyUpgrades,1,"Level");
	AddMenuItem(HeavyUpgrades,0,"Flame Thrower");
	AddMenuItem(HeavyUpgrades,0,"RPG");
	AddMenuItem(HeavyUpgrades,0,"Rocket Launcher");
	AddMenuItem(HeavyUpgrades,0,"Minigun");
	AddMenuItem(HeavyUpgrades,0,"Ammo");
	AddMenuItem(HeavyUpgrades,1,"10");
	AddMenuItem(HeavyUpgrades,1,"15");
	AddMenuItem(HeavyUpgrades,1,"12");
	AddMenuItem(HeavyUpgrades,1,"20");
	AddMenuItem(HeavyUpgrades,1,"1");
/*	AmmoUpgrades=CreateMenu("Spawn Ammo Upgrades",1,100.0,120.0,170.0,25.0);
	AddMenuItem(AmmoUpgrades,0,"Pistol");
	AddMenuItem(AmmoUpgrades,0,"Shotgun");
	AddMenuItem(AmmoUpgrades,0,"Sub Machine Gun");
	AddMenuItem(AmmoUpgrades,0,"Assault");
	AddMenuItem(AmmoUpgrades,0,"Rifle");
	AddMenuItem(AmmoUpgrades,0,"Heavy");*/
    ExtraUpgrades=CreateMenu("Extras",2,100.0,110.0,170.0,25.0);
    SetMenuColumnHeader(ExtraUpgrades,0,"Upgrade");
    SetMenuColumnHeader(ExtraUpgrades,1,"Level");
    AddMenuItem(ExtraUpgrades, 0, "Health+5");
    AddMenuItem(ExtraUpgrades, 0, "Armour+5");
    AddMenuItem(ExtraUpgrades, 1, "1");
    AddMenuItem(ExtraUpgrades, 1, "5");
    ///
    // ------------------------------------MENUS
	//elevator menu
	elemenu = CreateMenu("Elevator", 1, 20, 160, 70.0, 0);
	if (IsValidMenu(elemenu))
	{
		//new Menu:elemenu = CreateMenu("Elevator", 1, 20, 160, 70.0, 0);
		SetMenuColumnHeader(elemenu, 0, "FLOOR");
		AddMenuItem(elemenu, 0, "Ground");
		AddMenuItem(elemenu, 0, "Skyview");
		AddMenuItem(elemenu, 0, "Admin Lounge");
	}
		//elevator menu
	nielemenu = CreateMenu("Elevator", 1, 20, 160, 70.0, 0);
	if (IsValidMenu(nielemenu))
	{
		//new Menu:elemenu = CreateMenu("Elevator", 1, 20, 160, 70.0, 0);
		SetMenuColumnHeader(nielemenu, 0, "FLOOR");
		AddMenuItem(nielemenu, 0, "Ground");
		AddMenuItem(nielemenu, 0, "Sky Island");
	}
/////
}
public alock(){
    for(new j=0;j<MAX_VEHICLES;j++)
    {
    	if(IsAdminVehicle(j)){
			for(new i=0;i<MAX_PLAYERS;i++)
			{
				SetVehicleParamsForPlayer(j,i,0,1);
			}
		}
	}
	//SendClientMessageToAll(COLOR_RED, "AutoAdmCmd: admin lock on.");
}
/*public amsgt()
{
		SendClientMessage(playerid, COLOR_BLUE, "<<< Admins Online >>>");
	    if(PlayerInfo[playerid][pAdmin] >= 103 || IsPlayerAdmin(playerid)){
   			for(new i = 0,level=0,rcon=0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1 && (PlayerInfo[i][pAdmin] >= 101 || IsPlayerAdmin(i)))
				{
				    level = PlayerInfo[i][pAdmin];
				    rcon = IsPlayerAdmin(i);
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "Admin: %s Level: %d RCON: %d ID: %d", sendername,level,rcon,i);
					SendClientMessage(playerid, COLOR_WHITE, string);
					level=0;
					rcon = 0;
				}
			}
	    }
		else{
			for(new i = 0; i <= MAX_PLAYERS; i++)
			{
				if(IsPlayerConnected(i) == 1 && PlayerInfo[i][pAdmin] >= 101 && PlayerInfo[i][pAdmin] < 105)
				{
					GetPlayerName(i, sendername, sizeof(sendername));
					format(string, 256, "Admin: %s", sendername);
					SendClientMessage(playerid, COLOR_WHITE, string);
				}
			}
		}
		return 1;
	}
	*/
public AgateT(){
SendClientMessageToAll(COLOR_YELLOW, "Admin Gate Closeing");
MoveObject(Agate,-2084.4080,1381.1781,6.0000,6);
SetTimer("AgateM",1000,0);
}
public AgateM(){
SendClientMessageToAll(COLOR_RED, "Admin Gate Closed");
}
public dVec(){
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		DestroyVehicle(gDelVec[i]);
		gDelVec[i]=INVALID_VEHICLE_ID;
	}
}
public respawnallvec(){
	for(new i=0;i<MAX_VEHICLES;i++){SetVehicleToRespawn(i);}
}
GetVehiclePlayerID(car)
{
	for(new i=0;i<MAX_PLAYERS;i++){
		if(IsPlayerInVehicle(i,car)){
		    return i;
		}
	}
	return INVALID_PLAYER_ID;
}
SaveRaces(name[])
{
	new entry[256];
	format(entry, sizeof(entry), "%s\n",name);
	new File:hFile;
	hFile = fopen("races.list", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}
LoadRaces()
{
	print(" ");
	print("Loading Races......");
	if (gdebug){print("DEBUG is on");}
	new File: file = fopen("races.list", io_read);
	if(file)
	{
		for(new i=0;i<sizeof(gRaces);i++)
		{
			fread(file, gRaces[i]);StripNL(gRaces[i]);
		}
	}
	print("RACES LOADED!");
}
LoadRace(playerid,name[])
{
	print("Loading Race......");
	if (gdebug){print("DEBUG is on");}
	new string[256];
	new valtmp[128],racename[64];
	format(racename, sizeof(racename), "%s.race",name);
	new File: file = fopen(racename, io_read);
	if(file){
		fread(file,valtmp);gRacePoints = strval(valtmp);DelPrint(valtmp);
		new lines;
		lines=(gRacePoints*3)+3;
		for(new i=0;i<lines;i++)
		{
		    fread(file,valtmp);gRacePoint[i]=floatstr(valtmp);DelPrint(valtmp);
		}
		new idx;
		fread(file,gRaceCreator);StripNL(gRaceCreator);gRaceCreator=strtok(gRaceCreator,idx);idx=0;
		fread(file,gRaceTimeGuy);StripNL(gRaceTimeGuy);gRaceTimeGuy=strtok(gRaceTimeGuy,idx);
		fread(file,valtmp);StripNL(valtmp);gBestTime=strval(valtmp);
		fclose(file);
		if(playerid!=INVALID_PLAYER_ID)
		{
		    new pname[256];
			GetPlayerName(playerid,pname,sizeof(pname));
			format(string,sizeof(string),"Player %s[%d] loaded %s",pname,playerid,name);
			SendClientMessageToAll(COLOR_YELLOW,string);
		}
		else
		{
			ConvertTicks(gBestTime);
		    format(string,sizeof(string),"Race %s loaded Created by %s Best Time (%d:%d:%d) by %s ",name,gRaceCreator,cmins,csecs,cmils,gRaceTimeGuy);
		    SendClientMessageToAll(COLOR_YELLOW,string);
		}
		print(".....Race Loaded");
	}
	else{SendClientMessageToAll(COLOR_BLUE,"Race does not exist.");}
	return 1;
}
SaveRace(playerid,name[])
{
	SaveRaces(name);
	new string3[32];
	format(string3, sizeof(string3), "%s.race", name);
	new File: pFile = fopen(string3, io_write);
	new placement;
	new var[64];//,point[256];
	format(var, 64, "%d rCheckpoints\n",gMakeRacePoints[playerid]-1);fwrite(pFile, var);
	placement=gMakeRacePoints[playerid]*3;
	for(new i=0;i<placement;i++)
	{
	    format(var, 64, "%.1f\n",gRaceTmp[playerid][i]);fwrite(pFile,var);
	}
	new pname[24];
	GetPlayerName(playerid,pname,sizeof(pname));
	format(var,64,"%s Creator\n",pname);fwrite(pFile,var);
	format(var,64,"%s BestPerson\n",pname);fwrite(pFile,var);
	format(var,64,"%d BestTime\n",gBestTime);fwrite(pFile,var);
	fclose(pFile);
	LoadRaces();
	return 1;
}
BestRace(playerid)
{
	new person[24];
	GetPlayerName(playerid,person,sizeof(person));
	new string3[32];
	format(string3, sizeof(string3), "%s.race", gRaceName);
	new File: pFile = fopen(string3, io_write);
	new var[64];//,point[256];
	format(var, 64, "%d rCheckpoints\n",gRacePoints);fwrite(pFile, var);
	new place;
	for(new i=0;i<gRacePoints+1;i++)
	{
	    place=i*3;
	    format(var, 64, "%.1f\n",gRacePoint[place]);fwrite(pFile,var);
	    format(var, 64, "%.1f\n",gRacePoint[place+1]);fwrite(pFile,var);
	    format(var, 64, "%.1f\n",gRacePoint[place+2]);fwrite(pFile,var);
	}
	new pname[24];
	GetPlayerName(playerid,pname,sizeof(pname));
	format(var,64,"%s Creator\n",gRaceCreator);fwrite(pFile,var);
	format(var,64,"%s BestPerson\n",person);fwrite(pFile,var);
	format(var,64,"%d BestTime\n",gBestTime);fwrite(pFile,var);
	fclose(pFile);
	return 1;
}
StartRace(){
    //MissionActive = 0;
	//if (gdebug){print("DEBUG MissionActive = 0");}
	//RaceCheckpointReset();
	for(new i = 0; i <= MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
		    for(new j=0;j<MAX_VEHICLES;j++)
		    {
				SetVehicleParamsForPlayer(j,i,0,gCarLock[i]);
			}
			//LapCount[i] = 0;
			gPlayerLaps[i]=0;
			//gRaceStartTime[i]=0;
			//StartTime[i] = 0;
		}
	}
	MissionActive = 5;
	if (gdebug){print("DEBUG MissionActive = 5");}
	gRaceWinner = INVALID_PLAYER_ID;
	gRaceSecond = INVALID_PLAYER_ID;
	gRaceFirstThere = INVALID_PLAYER_ID;
	//gRaceEnd = 0;
	gRaceStarting=0;
	gLaps = 0;
	//KillTimer(raceendtimer);

	gRaceCD=60;
	gRaceStarted=1;
	for(new j=0;j<MAX_PLAYERS;j++)
	{
	    if(gTeam[j]!=TEAM_BLUE){
			gRacePointHit[j]=RACEPOINT_START;
			SetPlayerRaceCheckpoint(j,0,gRacePoint[0],gRacePoint[1],gRacePoint[2],gRacePoint[3],gRacePoint[4],gRacePoint[5],15.0);
		}
	}
}
public OnPlayerEnterRaceCheckpoint(playerid)
{
	if(gTeam[playerid]==TEAM_BLUE){SendClientMessage(playerid,0xFFFFFFFF,"Umm, no cops in races plz");}
	if(GetPlayerState(playerid)==PLAYER_STATE_DRIVER){
		new string[256],pname[256];
		GetPlayerName(playerid,pname,sizeof(pname));
		if(gRacePointHit[playerid]==RACEPOINT_START)
		{
		    if(!IsACar(GetPlayerVehicleID(playerid))&&!IsABike(GetPlayerVehicleID(playerid)))
		    {
		    	SendClientMessage(playerid,COLOR_GRAD1,"You must be in a car or bike to join a race");
		    }
		    else
		    {
				if(gRaceStarted!=0){
				    if(gRaceStarting!=1){
				        if(gRaceFirstThere!=INVALID_PLAYER_ID && gRaceFirstThere!=playerid){
					    	gRaceTimer=SetTimer("RaceStart",1000,1);
					    	gRaceStarting=1;
				    	}
				    	if(gRaceFirstThere==playerid){SendClientMessage(playerid,COLOR_YELLOW,"You sneaky bastard");}
						if(gRaceFirstThere==INVALID_PLAYER_ID)
						{
							gRaceFirstThere=playerid;
							format(string,sizeof(string),"Wait here for more players");
						    MainInfo=TextDrawCreate(180.0,400.0,string);
						}
		      	    }
		      	    gTeam[playerid] = 4;
					SetPlayerToTeamColor(playerid);
				    gRacing[playerid]=1;
				    gRacePointHit[playerid]=0;
				    //SendClientMessage(playerid,COLOR_RED,"Wait here for more players");
				    TextDrawShowForPlayer(playerid,MainInfo);
				    DisablePlayerRaceCheckpoint(playerid);
				    return 1;
				}
			}
			return 1;
	 	}
		if(gRacePointHit[playerid]==gRacePoints)
		{
		    new point;
		    point=gRacePointHit[playerid]*3;
		    gRacePointHit[playerid]++;
		    SetPlayerRaceCheckpoint(playerid,1,gRacePoint[point],gRacePoint[point+1],gRacePoint[point+2],gRacePoint[point+3],gRacePoint[point+4],gRacePoint[point+5],15.0);
		}
		else if(gRacePointHit[playerid]<gRacePoints)
		{
		    new point;
		    point=gRacePointHit[playerid]*3;
		    gRacePointHit[playerid]++;
			SetPlayerRaceCheckpoint(playerid,0,gRacePoint[point],gRacePoint[point+1],gRacePoint[point+2],gRacePoint[point+3],gRacePoint[point+4],gRacePoint[point+5],15.0);
		}
		else
		{
			if(gLaps==gPlayerLaps[playerid]){
			    if(gRaceWinner==INVALID_PLAYER_ID){
					SendClientMessage(playerid,COLOR_RED,"You WON the race.");
					gRaceWinner=playerid;
					gRaceTime[playerid] = Gtickcount;
					new time=gRaceTime[playerid]-gRaceStartTime;
					new pmins,psecs,pmils;
					ConvertTicks(time);
					pmins=cmins;
					psecs=csecs;
					pmils=cmils;
					ConvertTicks(gBestTime);
					gEndRaceTimer=SetTimer("RaceEndTimer",180000,0);
					RewardCalc(playerid,1000,10000);
					preward = reward;
					format(string,sizeof(string),"%s placed first earning $%d Time:%d:%d:%d, Race ends in 3 minutes",pname,reward,pmins,psecs,pmils);
					GiveMoney(playerid, reward);
					DisablePlayerRaceCheckpoint(playerid);
					SendClientMessageToAll(COLOR_RED,string);
					if(time<gBestTime||gBestTime==0)
					{
						format(string,sizeof(string),"%s Shattered the speed record of %d:%d:%d with %d:%d:%d",pname,cmins,csecs,cmils,pmins,psecs,pmils);
						SendClientMessageToAll(COLOR_DGREEN,string);
						gBestTime=time;
						BestRace(playerid);
					}
					SetPlayerCriminal(playerid,255, "Street Racing",1,1);
					gPlayerMission[playerid] = 2;
					gPublicEnemy=playerid;
					fugitimer = SetTimer("cd_fugitive", 1000, 1);
					fugitime = 300;
					gRacing[playerid]=0;
					return 1;
				}
				if(gRaceWinner!=INVALID_PLAYER_ID){
					if(gRaceSecond==INVALID_PLAYER_ID){
					    gRaceSecond=playerid;
					    gRaceTime[playerid] = Gtickcount;
						new time=gRaceTime[playerid]-gRaceStartTime;
						new firstguy=gRaceTime[gRaceWinner]-gRaceStartTime;
						new first1,first2,first3,behind1,behind2,behind3;
						ConvertTicks(firstguy);
						first1=cmins;
						first2=csecs;
						first3=cmils;
						ConvertTicks(time);
						behind1=cmins-first1;
						behind2=csecs-first2;
						behind3=cmils-first3;
						if(behind2<0){behind2=behind2+60;behind1--;}
						if(behind3<0){behind3=behind3+100;behind2--;}
						reward = preward/2;
					    format(string,sizeof(string),"%s placed second earning $%d Time:%d:%d:%d Behind by:%d:%d:%d",pname,reward,cmins,csecs,cmils,behind1,behind2,behind3);
						GiveMoney(playerid,reward);
						DisablePlayerRaceCheckpoint(playerid);
						SendClientMessageToAll(COLOR_RED,string);
						gRacing[playerid]=0;
					    return 1;
					}
					if(gRaceSecond!=INVALID_PLAYER_ID){
					    //gRaceThird=playerid;
					    gRaceTime[playerid] = Gtickcount;
						new time=gRaceTime[playerid]-gRaceStartTime;
						new firstguy=gRaceTime[gRaceWinner]-gRaceStartTime;
						new first1,first2,first3,behind1,behind2,behind3;
						ConvertTicks(firstguy);
						first1=cmins;
						first2=csecs;
						first3=cmils;
						ConvertTicks(time);
						behind1=cmins-first1;
						behind2=csecs-first2;
						behind3=cmils-first3;
						if(behind2<0){behind2=behind2+60;behind1--;}
						if(behind3<0){behind3=behind3+60;}
						reward = preward/3;
						format(string,sizeof(string),"%s placed third earning $%d Time:%d:%d:%d Behind by:%d:%d:%d",pname,reward,cmins,csecs,cmils,behind1,behind2,behind3);
						GiveMoney(playerid,reward);
						DisablePlayerRaceCheckpoint(playerid);
						SendClientMessageToAll(COLOR_RED,string);
						KillTimer(gEndRaceTimer);
					    EndRace();
					    gRacing[playerid]=0;
					    return 1;
					}
				}
			}
			else
			{
				gPlayerLaps[playerid]++;
				gRacePointHit[playerid]=0;
				new point;
				point=gRacePointHit[playerid]*3;
				SetPlayerRaceCheckpoint(playerid,0,gRacePoint[point],gRacePoint[point+1],gRacePoint[point+2],gRacePoint[point+3],gRacePoint[point+4],gRacePoint[point+5],15.0);
			}
		}
	}
	return 1;
}
public RaceEndTimer()
{
	EndRace();
}
public RaceStart()
{
	TextDrawHideForAll(RaceStartTime);
	TextDrawDestroy(RaceStartTime);
	if(gRaceCD==1)
	{
        for(new j=0;j<MAX_PLAYERS;j++)
		{
		    if(gRacing[j]==1){
				SetPlayerRaceCheckpoint(j,0,gRacePoint[0],gRacePoint[1],gRacePoint[2],gRacePoint[3],gRacePoint[4],gRacePoint[5],15.0);
				TextDrawHideForPlayer(j,MainInfo);
			}
			else{DisablePlayerRaceCheckpoint(j);}
		}
		TextDrawDestroy(MainInfo);
		KillTimer(gRaceTimer);
		gRaceCD=60;
		return 1;
	}
    if(gRaceCD<=60)
	{
	    gRaceCD--;
	}
	new string[256];//,string2[2];
//	valstr(string2,gRaceCD);
	format(string,sizeof(string),"Race~n~Starting in~n~%d seconds",gRaceCD);
	RaceStartTime=TextDrawCreate(550.0,200.0,string);
	TextDrawLetterSize(RaceStartTime,0.4,0.9);
	TextDrawShowForAll(RaceStartTime);
	gRaceStartTime = Gtickcount;
	return 1;
}
EndRace()
{
	for(new i=0;i<MAX_PLAYERS;i++)
	{
		DisablePlayerRaceCheckpoint(i);
		gLaps=0;
		gRacePointHit[i]=0;
		gPlayerLaps[i]=0;
		gRacing[i]=0;
	}
	gRaceWinner=INVALID_PLAYER_ID;
	gRaceSecond=INVALID_PLAYER_ID;
	gRaceFirstThere=INVALID_PLAYER_ID;
//	TextDrawShowForAll(RoundEnding);
	gRaceStarting=0;
	gRaceStarted=0;
	BroadCast(COLOR_GREEN, ":::Race::News::: Race has Finished");
}
public OnVehicleDeath(vehicleid, killerid)
{
/*	new string[256];
	format(string,sizeof(string),"Vehicle death VehicleID %d KillerID %d",vehicleid,killerid);
	SendClientMessageToAll(COLOR_BLUE,string);*/
	return 1;
}
//Y_Less' STRIP NEW LINE
StripNL(str[]) {
	new l = strlen(str);
	while (l-- && str[l] <= ' ') str[l] = 0;
}


public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	new x = 0;
	while(x!=MAX_PLAYERS) {
	    if( IsPlayerConnected(x) &&	GetPlayerState(x) == PLAYER_STATE_SPECTATING &&
			gSpectateID[x] == playerid && gSpectateType[x] == SPEC_TYPE_PLAYER )
   		{
   		    SetPlayerInterior(x,newinteriorid);
		}
		x++;
	}
	PlayerInfo[playerid][pInt]=newinteriorid;
}
///TRAM SHIT#################################################################
// tram script stolen from damaniospiderman spidey or something
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(newkeys == 16 ){ //John Sanders here.... Why was the newkey set to 0? 16 is what u want.
		if(!IsPlayerInAnyVehicle(playerid)){
			new Float:x, Float:y, Float:z, vec;
			GetPlayerPos(playerid, x, y, z );
			GetVehicleWithinDistance(playerid, x, y, z, 40.0, vec);
			if(IsVehicleRcTram(vec)){
			    PutPlayerInVehicle(playerid, vec, 0);
			}
		}
	}
}


GetVehicleWithinDistance( playerid, Float:x1, Float:y1, Float:z1, Float:dist, &veh){
	for(new i = 1; i < MAX_VEHICLES; i++){
		if(GetVehicleModel(i) > 0){
			if(GetPlayerVehicleID(playerid) != i ){
	        	new Float:x, Float:y, Float:z;
	        	new Float:x2, Float:y2, Float:z2;
				GetVehiclePos(i, x, y, z);
				x2 = x1 - x; y2 = y1 - y; z2 = z1 - z;
				new Float:vDist = (x2*x2+y2*y2+z2*z2);
				if( vDist < dist){
					veh = i;
				}
			}
		}
	}
}
IsVehicleRcTram( vehicleid ){
    new model = GetVehicleModel(vehicleid);
   	switch(model){
		case D_TRAM: return 1;
		case RC_GOBLIN: return 1;
		case RC_BARON: return 1;
		case RC_BANDIT: return 1;
		case RC_RAIDER: return 1;
		default: return 0;
	}
	return 0;
}// end tram shizzle
ReturnPlayerName(playerid){new name[28];GetPlayerName(playerid,name,sizeof(name));return name;}
public Endround()
{
//	GetPlayerName(playerid, sendername, sizeof(sendername));
	new string[256];
	cd_seconds = 30;
    Countdown = 1;
//  format(string, sizeof(string),"Countdown started : %d seconds",cd_seconds);
//  SendClientMessage(playerid,COLOR_GREY,string);
    cd_timer = SetTimer("cd_endround",1000,1);
//	format(string, sizeof(string), "AdmCmd: Server Will Restart Soon.", giveplayer,giveplayerid);
	SendClientMessageToAll(COLOR_RED,"AdmCmd: Server Will Restart Soon.");
	format(string,sizeof(string),"~B~Server Restart In 30");
	SetTimer("StopMusic", 6000, 0);
	GameTextForAll(string,5000,0);
//	PlayerPlaySound(playerid, 1097, 1000.0, 0.0, 0.0);
//	printf("AdmCmd: %s Executed A Server Restart: Time Elapsed: 30 Seconds", sendername);
}
public DerbyTime()
{
	if(gDerbyTime==0)
	{
	    gDerbyStarted=1;
	    gDerbyTime=9;
	    SendClientMessageToAll(COLOR_YELLOW,"Derby started.");
	    SetTimer("EndDerby",300000,0);//5 mins till end of derby
	    return 1;
	}
	if(gDerbyTime<=2)
	{
	    SendClientMessageToAll(COLOR_YELLOW,"Derby starting soon. Type /derby to join!");
	    gDerbyTime--;
	    return 1;
	}
	gDerbyTime--;
	return 1;
}
JoinDerby(playerid)
{
	SetPlayerPos(playerid,-1398.46,995.641,1024.46);
	SetPlayerInterior(playerid,15);
	gDerby[playerid]=1;
}
public EndDerby(){
	gDerbyStarted=0;
	for(new i=0;i<MAX_PLAYERS;i++){
		if(gDerby[i]==1){SetPlayerInterior(i,0);SpawnPlayer(i);gDerby[i]=0;}
	}
}
public PingKick()
{
	for(new i=0; i<MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			if(GetPlayerPing(i)>600){pingkick[i]++;if(pingkick[i]>10){Kick(i);}}else{pingkick[i]=0;}
		}
	}
	return 1;
}
public OnPlayerPickUpPickup(playerid, pickupid)
{
	if(pickupid==Briefcasepickup){DestroyPickup(Briefcasepickup);}
}
public OnVehicleSpawn(vehicleid)
{
	if(vehicleid<=102)//It's a housecar
	{
	    SetTimerEx("AddComponent",1000,0,"d",vehicleid);
	}
	/*new string[256];
	format(string,sizeof(string),"Car %d spawned",vehicleid);
	SendClientMessageToAll(COLOR_RED,string);*/
	return 1;
}
public AddComponent(vehicleid)
{
    if(IsACar(vehicleid)){AddVehicleComponent(vehicleid,1010);AddVehicleComponent(vehicleid,1025);}
}
public AdminLevel(playerid)
{
	return PlayerInfo[playerid][pAdmin];
}
